
minipro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007960  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08007af0  08007af0  00017af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d18  08007d18  000200ec  2**0
                  CONTENTS
  4 .ARM          00000000  08007d18  08007d18  000200ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007d18  08007d18  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d18  08007d18  00017d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d1c  08007d1c  00017d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  08007d20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200ec  2**0
                  CONTENTS
 10 .bss          00000654  200000ec  200000ec  000200ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000740  20000740  000200ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b4ce  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030f7  00000000  00000000  0003b5ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001540  00000000  00000000  0003e6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001450  00000000  00000000  0003fc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002053b  00000000  00000000  00041078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a165  00000000  00000000  000615b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf7a4  00000000  00000000  0007b718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013aebc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006318  00000000  00000000  0013af10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000ec 	.word	0x200000ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007ad8 	.word	0x08007ad8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000f0 	.word	0x200000f0
 80001cc:	08007ad8 	.word	0x08007ad8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <write_num_toBCD>:

TIM_HandleTypeDef *pwm_timer = &htim8; // Point to PWM timer configured in CubeMX
uint32_t pwm_channel = TIM_CHANNEL_2;  // Specify configured PWM channel


void write_num_toBCD(int a) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	if (a & 1) {
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	f003 0301 	and.w	r3, r3, #1
 800027e:	2b00      	cmp	r3, #0
 8000280:	d005      	beq.n	800028e <write_num_toBCD+0x1e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8000282:	2201      	movs	r2, #1
 8000284:	2101      	movs	r1, #1
 8000286:	481e      	ldr	r0, [pc, #120]	; (8000300 <write_num_toBCD+0x90>)
 8000288:	f002 f964 	bl	8002554 <HAL_GPIO_WritePin>
 800028c:	e004      	b.n	8000298 <write_num_toBCD+0x28>
	} else {
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 800028e:	2200      	movs	r2, #0
 8000290:	2101      	movs	r1, #1
 8000292:	481b      	ldr	r0, [pc, #108]	; (8000300 <write_num_toBCD+0x90>)
 8000294:	f002 f95e 	bl	8002554 <HAL_GPIO_WritePin>
	}
	if (a & 2) {
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	f003 0302 	and.w	r3, r3, #2
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d005      	beq.n	80002ae <write_num_toBCD+0x3e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 80002a2:	2201      	movs	r2, #1
 80002a4:	2102      	movs	r1, #2
 80002a6:	4816      	ldr	r0, [pc, #88]	; (8000300 <write_num_toBCD+0x90>)
 80002a8:	f002 f954 	bl	8002554 <HAL_GPIO_WritePin>
 80002ac:	e004      	b.n	80002b8 <write_num_toBCD+0x48>
	} else {
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 80002ae:	2200      	movs	r2, #0
 80002b0:	2102      	movs	r1, #2
 80002b2:	4813      	ldr	r0, [pc, #76]	; (8000300 <write_num_toBCD+0x90>)
 80002b4:	f002 f94e 	bl	8002554 <HAL_GPIO_WritePin>
	}
	if (a & 4) {
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f003 0304 	and.w	r3, r3, #4
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d005      	beq.n	80002ce <write_num_toBCD+0x5e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80002c2:	2201      	movs	r2, #1
 80002c4:	2104      	movs	r1, #4
 80002c6:	480e      	ldr	r0, [pc, #56]	; (8000300 <write_num_toBCD+0x90>)
 80002c8:	f002 f944 	bl	8002554 <HAL_GPIO_WritePin>
 80002cc:	e004      	b.n	80002d8 <write_num_toBCD+0x68>
	} else {
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80002ce:	2200      	movs	r2, #0
 80002d0:	2104      	movs	r1, #4
 80002d2:	480b      	ldr	r0, [pc, #44]	; (8000300 <write_num_toBCD+0x90>)
 80002d4:	f002 f93e 	bl	8002554 <HAL_GPIO_WritePin>
	}
	if (a & 8) {
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	f003 0308 	and.w	r3, r3, #8
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d005      	beq.n	80002ee <write_num_toBCD+0x7e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 80002e2:	2201      	movs	r2, #1
 80002e4:	2108      	movs	r1, #8
 80002e6:	4806      	ldr	r0, [pc, #24]	; (8000300 <write_num_toBCD+0x90>)
 80002e8:	f002 f934 	bl	8002554 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
	}
}
 80002ec:	e004      	b.n	80002f8 <write_num_toBCD+0x88>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 80002ee:	2200      	movs	r2, #0
 80002f0:	2108      	movs	r1, #8
 80002f2:	4803      	ldr	r0, [pc, #12]	; (8000300 <write_num_toBCD+0x90>)
 80002f4:	f002 f92e 	bl	8002554 <HAL_GPIO_WritePin>
}
 80002f8:	bf00      	nop
 80002fa:	3708      	adds	r7, #8
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	48000c00 	.word	0x48000c00

08000304 <turn_off_all>:

void turn_off_all() {
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3,
 8000308:	2200      	movs	r2, #0
 800030a:	210f      	movs	r1, #15
 800030c:	4802      	ldr	r0, [pc, #8]	; (8000318 <turn_off_all+0x14>)
 800030e:	f002 f921 	bl	8002554 <HAL_GPIO_WritePin>
			0);

}
 8000312:	bf00      	nop
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	48000800 	.word	0x48000800

0800031c <turn_on_led>:

void turn_on_led(){
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8 , 1);
 8000320:	2201      	movs	r2, #1
 8000322:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000326:	4817      	ldr	r0, [pc, #92]	; (8000384 <turn_on_led+0x68>)
 8000328:	f002 f914 	bl	8002554 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9 , 1);
 800032c:	2201      	movs	r2, #1
 800032e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000332:	4814      	ldr	r0, [pc, #80]	; (8000384 <turn_on_led+0x68>)
 8000334:	f002 f90e 	bl	8002554 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10 , 1);
 8000338:	2201      	movs	r2, #1
 800033a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800033e:	4811      	ldr	r0, [pc, #68]	; (8000384 <turn_on_led+0x68>)
 8000340:	f002 f908 	bl	8002554 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11 , 1);
 8000344:	2201      	movs	r2, #1
 8000346:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800034a:	480e      	ldr	r0, [pc, #56]	; (8000384 <turn_on_led+0x68>)
 800034c:	f002 f902 	bl	8002554 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12 , 1);
 8000350:	2201      	movs	r2, #1
 8000352:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000356:	480b      	ldr	r0, [pc, #44]	; (8000384 <turn_on_led+0x68>)
 8000358:	f002 f8fc 	bl	8002554 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13 , 1);
 800035c:	2201      	movs	r2, #1
 800035e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000362:	4808      	ldr	r0, [pc, #32]	; (8000384 <turn_on_led+0x68>)
 8000364:	f002 f8f6 	bl	8002554 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14 , 1);
 8000368:	2201      	movs	r2, #1
 800036a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800036e:	4805      	ldr	r0, [pc, #20]	; (8000384 <turn_on_led+0x68>)
 8000370:	f002 f8f0 	bl	8002554 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15 , 1);
 8000374:	2201      	movs	r2, #1
 8000376:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800037a:	4802      	ldr	r0, [pc, #8]	; (8000384 <turn_on_led+0x68>)
 800037c:	f002 f8ea 	bl	8002554 <HAL_GPIO_WritePin>
}
 8000380:	bf00      	nop
 8000382:	bd80      	pop	{r7, pc}
 8000384:	48001000 	.word	0x48001000

08000388 <turn_off_led>:

void turn_off_led(){
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8 , 0);
 800038c:	2200      	movs	r2, #0
 800038e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000392:	4817      	ldr	r0, [pc, #92]	; (80003f0 <turn_off_led+0x68>)
 8000394:	f002 f8de 	bl	8002554 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9 , 0);
 8000398:	2200      	movs	r2, #0
 800039a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800039e:	4814      	ldr	r0, [pc, #80]	; (80003f0 <turn_off_led+0x68>)
 80003a0:	f002 f8d8 	bl	8002554 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10 , 0);
 80003a4:	2200      	movs	r2, #0
 80003a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003aa:	4811      	ldr	r0, [pc, #68]	; (80003f0 <turn_off_led+0x68>)
 80003ac:	f002 f8d2 	bl	8002554 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11 , 0);
 80003b0:	2200      	movs	r2, #0
 80003b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003b6:	480e      	ldr	r0, [pc, #56]	; (80003f0 <turn_off_led+0x68>)
 80003b8:	f002 f8cc 	bl	8002554 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12 , 0);
 80003bc:	2200      	movs	r2, #0
 80003be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003c2:	480b      	ldr	r0, [pc, #44]	; (80003f0 <turn_off_led+0x68>)
 80003c4:	f002 f8c6 	bl	8002554 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13 , 0);
 80003c8:	2200      	movs	r2, #0
 80003ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003ce:	4808      	ldr	r0, [pc, #32]	; (80003f0 <turn_off_led+0x68>)
 80003d0:	f002 f8c0 	bl	8002554 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14 , 0);
 80003d4:	2200      	movs	r2, #0
 80003d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003da:	4805      	ldr	r0, [pc, #20]	; (80003f0 <turn_off_led+0x68>)
 80003dc:	f002 f8ba 	bl	8002554 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15 , 0);
 80003e0:	2200      	movs	r2, #0
 80003e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003e6:	4802      	ldr	r0, [pc, #8]	; (80003f0 <turn_off_led+0x68>)
 80003e8:	f002 f8b4 	bl	8002554 <HAL_GPIO_WritePin>
}
 80003ec:	bf00      	nop
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	48001000 	.word	0x48001000

080003f4 <enQueue>:

/////////////////////////// queue ///////////////////////

void enQueue(int value) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  if (rear == SIZE - 1)
 80003fc:	4b10      	ldr	r3, [pc, #64]	; (8000440 <enQueue+0x4c>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	2b09      	cmp	r3, #9
 8000402:	d103      	bne.n	800040c <enQueue+0x18>
    printf("\nQueue is Full!!");
 8000404:	480f      	ldr	r0, [pc, #60]	; (8000444 <enQueue+0x50>)
 8000406:	f006 fbe7 	bl	8006bd8 <iprintf>
    rear++;
    items[rear] = value;
    isEmpty = 0;
//    printf("\nInserted -> %d", value);
  }
}
 800040a:	e015      	b.n	8000438 <enQueue+0x44>
    if (front == -1)
 800040c:	4b0e      	ldr	r3, [pc, #56]	; (8000448 <enQueue+0x54>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000414:	d102      	bne.n	800041c <enQueue+0x28>
      front = 0;
 8000416:	4b0c      	ldr	r3, [pc, #48]	; (8000448 <enQueue+0x54>)
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
    rear++;
 800041c:	4b08      	ldr	r3, [pc, #32]	; (8000440 <enQueue+0x4c>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	3301      	adds	r3, #1
 8000422:	4a07      	ldr	r2, [pc, #28]	; (8000440 <enQueue+0x4c>)
 8000424:	6013      	str	r3, [r2, #0]
    items[rear] = value;
 8000426:	4b06      	ldr	r3, [pc, #24]	; (8000440 <enQueue+0x4c>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4908      	ldr	r1, [pc, #32]	; (800044c <enQueue+0x58>)
 800042c:	687a      	ldr	r2, [r7, #4]
 800042e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    isEmpty = 0;
 8000432:	4b07      	ldr	r3, [pc, #28]	; (8000450 <enQueue+0x5c>)
 8000434:	2200      	movs	r2, #0
 8000436:	601a      	str	r2, [r3, #0]
}
 8000438:	bf00      	nop
 800043a:	3708      	adds	r7, #8
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	20000014 	.word	0x20000014
 8000444:	08007af0 	.word	0x08007af0
 8000448:	20000010 	.word	0x20000010
 800044c:	20000700 	.word	0x20000700
 8000450:	20000000 	.word	0x20000000

08000454 <deQueue>:

void deQueue() {
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  if (front == -1){
 8000458:	4b13      	ldr	r3, [pc, #76]	; (80004a8 <deQueue+0x54>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000460:	d103      	bne.n	800046a <deQueue+0x16>
	isEmpty = 1;
 8000462:	4b12      	ldr	r3, [pc, #72]	; (80004ac <deQueue+0x58>)
 8000464:	2201      	movs	r2, #1
 8000466:	601a      	str	r2, [r3, #0]
    front++;
    if (front > rear){
      front = rear = -1;
    }
  }
}
 8000468:	e019      	b.n	800049e <deQueue+0x4a>
    goto_floor = items[front];
 800046a:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <deQueue+0x54>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4a10      	ldr	r2, [pc, #64]	; (80004b0 <deQueue+0x5c>)
 8000470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000474:	4a0f      	ldr	r2, [pc, #60]	; (80004b4 <deQueue+0x60>)
 8000476:	6013      	str	r3, [r2, #0]
    front++;
 8000478:	4b0b      	ldr	r3, [pc, #44]	; (80004a8 <deQueue+0x54>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	3301      	adds	r3, #1
 800047e:	4a0a      	ldr	r2, [pc, #40]	; (80004a8 <deQueue+0x54>)
 8000480:	6013      	str	r3, [r2, #0]
    if (front > rear){
 8000482:	4b09      	ldr	r3, [pc, #36]	; (80004a8 <deQueue+0x54>)
 8000484:	681a      	ldr	r2, [r3, #0]
 8000486:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <deQueue+0x64>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	429a      	cmp	r2, r3
 800048c:	dd07      	ble.n	800049e <deQueue+0x4a>
      front = rear = -1;
 800048e:	4b0a      	ldr	r3, [pc, #40]	; (80004b8 <deQueue+0x64>)
 8000490:	f04f 32ff 	mov.w	r2, #4294967295
 8000494:	601a      	str	r2, [r3, #0]
 8000496:	4b08      	ldr	r3, [pc, #32]	; (80004b8 <deQueue+0x64>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a03      	ldr	r2, [pc, #12]	; (80004a8 <deQueue+0x54>)
 800049c:	6013      	str	r3, [r2, #0]
}
 800049e:	bf00      	nop
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr
 80004a8:	20000010 	.word	0x20000010
 80004ac:	20000000 	.word	0x20000000
 80004b0:	20000700 	.word	0x20000700
 80004b4:	20000124 	.word	0x20000124
 80004b8:	20000014 	.word	0x20000014

080004bc <peek>:

void peek() {
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  if (front == -1){
 80004c0:	4b0a      	ldr	r3, [pc, #40]	; (80004ec <peek+0x30>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004c8:	d103      	bne.n	80004d2 <peek+0x16>
	isEmpty = 1;
 80004ca:	4b09      	ldr	r3, [pc, #36]	; (80004f0 <peek+0x34>)
 80004cc:	2201      	movs	r2, #1
 80004ce:	601a      	str	r2, [r3, #0]
  }
  else {
    last_floor = items[rear];
  }
}
 80004d0:	e006      	b.n	80004e0 <peek+0x24>
    last_floor = items[rear];
 80004d2:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <peek+0x38>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4a08      	ldr	r2, [pc, #32]	; (80004f8 <peek+0x3c>)
 80004d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004dc:	4a07      	ldr	r2, [pc, #28]	; (80004fc <peek+0x40>)
 80004de:	6013      	str	r3, [r2, #0]
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	20000010 	.word	0x20000010
 80004f0:	20000000 	.word	0x20000000
 80004f4:	20000014 	.word	0x20000014
 80004f8:	20000700 	.word	0x20000700
 80004fc:	20000128 	.word	0x20000128

08000500 <PWM_Start>:

/////////////////////////////// buzzer /////////////////////////////////////////////////


void PWM_Start()
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start(pwm_timer, pwm_channel);
 8000504:	4b04      	ldr	r3, [pc, #16]	; (8000518 <PWM_Start+0x18>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a04      	ldr	r2, [pc, #16]	; (800051c <PWM_Start+0x1c>)
 800050a:	6812      	ldr	r2, [r2, #0]
 800050c:	4611      	mov	r1, r2
 800050e:	4618      	mov	r0, r3
 8000510:	f003 ff2a 	bl	8004368 <HAL_TIM_PWM_Start>
}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}
 8000518:	2000006c 	.word	0x2000006c
 800051c:	20000070 	.word	0x20000070

08000520 <PWM_Change_Tone>:

void PWM_Change_Tone(uint16_t pwm_freq, uint16_t volume) // pwm_freq (1 - 20000), volume (0 - 1000)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b088      	sub	sp, #32
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	460a      	mov	r2, r1
 800052a:	80fb      	strh	r3, [r7, #6]
 800052c:	4613      	mov	r3, r2
 800052e:	80bb      	strh	r3, [r7, #4]
  if (pwm_freq == 0 || pwm_freq > 20000)
 8000530:	88fb      	ldrh	r3, [r7, #6]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d004      	beq.n	8000540 <PWM_Change_Tone+0x20>
 8000536:	88fb      	ldrh	r3, [r7, #6]
 8000538:	f644 6220 	movw	r2, #20000	; 0x4e20
 800053c:	4293      	cmp	r3, r2
 800053e:	d937      	bls.n	80005b0 <PWM_Change_Tone+0x90>
  {
    __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, 0);
 8000540:	4b52      	ldr	r3, [pc, #328]	; (800068c <PWM_Change_Tone+0x16c>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d105      	bne.n	8000554 <PWM_Change_Tone+0x34>
 8000548:	4b51      	ldr	r3, [pc, #324]	; (8000690 <PWM_Change_Tone+0x170>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	2200      	movs	r2, #0
 8000550:	635a      	str	r2, [r3, #52]	; 0x34
 8000552:	e097      	b.n	8000684 <PWM_Change_Tone+0x164>
 8000554:	4b4d      	ldr	r3, [pc, #308]	; (800068c <PWM_Change_Tone+0x16c>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	2b04      	cmp	r3, #4
 800055a:	d105      	bne.n	8000568 <PWM_Change_Tone+0x48>
 800055c:	4b4c      	ldr	r3, [pc, #304]	; (8000690 <PWM_Change_Tone+0x170>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	2300      	movs	r3, #0
 8000564:	6393      	str	r3, [r2, #56]	; 0x38
 8000566:	e08d      	b.n	8000684 <PWM_Change_Tone+0x164>
 8000568:	4b48      	ldr	r3, [pc, #288]	; (800068c <PWM_Change_Tone+0x16c>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2b08      	cmp	r3, #8
 800056e:	d105      	bne.n	800057c <PWM_Change_Tone+0x5c>
 8000570:	4b47      	ldr	r3, [pc, #284]	; (8000690 <PWM_Change_Tone+0x170>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	2300      	movs	r3, #0
 8000578:	63d3      	str	r3, [r2, #60]	; 0x3c
 800057a:	e083      	b.n	8000684 <PWM_Change_Tone+0x164>
 800057c:	4b43      	ldr	r3, [pc, #268]	; (800068c <PWM_Change_Tone+0x16c>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	2b0c      	cmp	r3, #12
 8000582:	d105      	bne.n	8000590 <PWM_Change_Tone+0x70>
 8000584:	4b42      	ldr	r3, [pc, #264]	; (8000690 <PWM_Change_Tone+0x170>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	681a      	ldr	r2, [r3, #0]
 800058a:	2300      	movs	r3, #0
 800058c:	6413      	str	r3, [r2, #64]	; 0x40
 800058e:	e079      	b.n	8000684 <PWM_Change_Tone+0x164>
 8000590:	4b3e      	ldr	r3, [pc, #248]	; (800068c <PWM_Change_Tone+0x16c>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2b10      	cmp	r3, #16
 8000596:	d105      	bne.n	80005a4 <PWM_Change_Tone+0x84>
 8000598:	4b3d      	ldr	r3, [pc, #244]	; (8000690 <PWM_Change_Tone+0x170>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	2300      	movs	r3, #0
 80005a0:	6593      	str	r3, [r2, #88]	; 0x58
 80005a2:	e06f      	b.n	8000684 <PWM_Change_Tone+0x164>
 80005a4:	4b3a      	ldr	r3, [pc, #232]	; (8000690 <PWM_Change_Tone+0x170>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	681a      	ldr	r2, [r3, #0]
 80005aa:	2300      	movs	r3, #0
 80005ac:	65d3      	str	r3, [r2, #92]	; 0x5c
 80005ae:	e069      	b.n	8000684 <PWM_Change_Tone+0x164>
  }
  else
  {
    const uint32_t internal_clock_freq = HAL_RCC_GetSysClockFreq();
 80005b0:	f003 faa2 	bl	8003af8 <HAL_RCC_GetSysClockFreq>
 80005b4:	61f8      	str	r0, [r7, #28]
	const uint16_t prescaler = 1 + internal_clock_freq / pwm_freq / 60000;
 80005b6:	88fb      	ldrh	r3, [r7, #6]
 80005b8:	69fa      	ldr	r2, [r7, #28]
 80005ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80005be:	4a35      	ldr	r2, [pc, #212]	; (8000694 <PWM_Change_Tone+0x174>)
 80005c0:	fba2 2303 	umull	r2, r3, r2, r3
 80005c4:	0b9b      	lsrs	r3, r3, #14
 80005c6:	b29b      	uxth	r3, r3
 80005c8:	3301      	adds	r3, #1
 80005ca:	837b      	strh	r3, [r7, #26]
    const uint32_t timer_clock = internal_clock_freq / prescaler;
 80005cc:	8b7b      	ldrh	r3, [r7, #26]
 80005ce:	69fa      	ldr	r2, [r7, #28]
 80005d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d4:	617b      	str	r3, [r7, #20]
    const uint32_t period_cycles = timer_clock / pwm_freq;
 80005d6:	88fb      	ldrh	r3, [r7, #6]
 80005d8:	697a      	ldr	r2, [r7, #20]
 80005da:	fbb2 f3f3 	udiv	r3, r2, r3
 80005de:	613b      	str	r3, [r7, #16]
    const uint32_t pulse_width = volume * period_cycles / 1000 / 2;
 80005e0:	88bb      	ldrh	r3, [r7, #4]
 80005e2:	693a      	ldr	r2, [r7, #16]
 80005e4:	fb02 f303 	mul.w	r3, r2, r3
 80005e8:	4a2b      	ldr	r2, [pc, #172]	; (8000698 <PWM_Change_Tone+0x178>)
 80005ea:	fba2 2303 	umull	r2, r3, r2, r3
 80005ee:	09db      	lsrs	r3, r3, #7
 80005f0:	60fb      	str	r3, [r7, #12]

    pwm_timer->Instance->PSC = prescaler - 1;
 80005f2:	8b7b      	ldrh	r3, [r7, #26]
 80005f4:	1e5a      	subs	r2, r3, #1
 80005f6:	4b26      	ldr	r3, [pc, #152]	; (8000690 <PWM_Change_Tone+0x170>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	629a      	str	r2, [r3, #40]	; 0x28
    pwm_timer->Instance->ARR = period_cycles - 1;
 80005fe:	4b24      	ldr	r3, [pc, #144]	; (8000690 <PWM_Change_Tone+0x170>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	693a      	ldr	r2, [r7, #16]
 8000606:	3a01      	subs	r2, #1
 8000608:	62da      	str	r2, [r3, #44]	; 0x2c
    pwm_timer->Instance->EGR = TIM_EGR_UG;
 800060a:	4b21      	ldr	r3, [pc, #132]	; (8000690 <PWM_Change_Tone+0x170>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2201      	movs	r2, #1
 8000612:	615a      	str	r2, [r3, #20]
    __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8000614:	4b1d      	ldr	r3, [pc, #116]	; (800068c <PWM_Change_Tone+0x16c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d105      	bne.n	8000628 <PWM_Change_Tone+0x108>
 800061c:	4b1c      	ldr	r3, [pc, #112]	; (8000690 <PWM_Change_Tone+0x170>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	68fa      	ldr	r2, [r7, #12]
 8000624:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8000626:	e02d      	b.n	8000684 <PWM_Change_Tone+0x164>
    __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8000628:	4b18      	ldr	r3, [pc, #96]	; (800068c <PWM_Change_Tone+0x16c>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b04      	cmp	r3, #4
 800062e:	d105      	bne.n	800063c <PWM_Change_Tone+0x11c>
 8000630:	4b17      	ldr	r3, [pc, #92]	; (8000690 <PWM_Change_Tone+0x170>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	6393      	str	r3, [r2, #56]	; 0x38
}
 800063a:	e023      	b.n	8000684 <PWM_Change_Tone+0x164>
    __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 800063c:	4b13      	ldr	r3, [pc, #76]	; (800068c <PWM_Change_Tone+0x16c>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2b08      	cmp	r3, #8
 8000642:	d105      	bne.n	8000650 <PWM_Change_Tone+0x130>
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <PWM_Change_Tone+0x170>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	681a      	ldr	r2, [r3, #0]
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800064e:	e019      	b.n	8000684 <PWM_Change_Tone+0x164>
    __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8000650:	4b0e      	ldr	r3, [pc, #56]	; (800068c <PWM_Change_Tone+0x16c>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b0c      	cmp	r3, #12
 8000656:	d105      	bne.n	8000664 <PWM_Change_Tone+0x144>
 8000658:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <PWM_Change_Tone+0x170>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000662:	e00f      	b.n	8000684 <PWM_Change_Tone+0x164>
    __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8000664:	4b09      	ldr	r3, [pc, #36]	; (800068c <PWM_Change_Tone+0x16c>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2b10      	cmp	r3, #16
 800066a:	d105      	bne.n	8000678 <PWM_Change_Tone+0x158>
 800066c:	4b08      	ldr	r3, [pc, #32]	; (8000690 <PWM_Change_Tone+0x170>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000676:	e005      	b.n	8000684 <PWM_Change_Tone+0x164>
    __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8000678:	4b05      	ldr	r3, [pc, #20]	; (8000690 <PWM_Change_Tone+0x170>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000682:	e7ff      	b.n	8000684 <PWM_Change_Tone+0x164>
 8000684:	bf00      	nop
 8000686:	3720      	adds	r7, #32
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000070 	.word	0x20000070
 8000690:	2000006c 	.word	0x2000006c
 8000694:	45e7b273 	.word	0x45e7b273
 8000698:	10624dd3 	.word	0x10624dd3

0800069c <HAL_GPIO_EXTI_Callback>:


////////////////////////////////////////////////
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800069c:	b590      	push	{r4, r7, lr}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	80fb      	strh	r3, [r7, #6]

		if (GPIO_Pin == GPIO_PIN_4 && last_interrupt1 + 200 < HAL_GetTick()){
 80006a6:	88fb      	ldrh	r3, [r7, #6]
 80006a8:	2b10      	cmp	r3, #16
 80006aa:	d11a      	bne.n	80006e2 <HAL_GPIO_EXTI_Callback+0x46>
 80006ac:	4b46      	ldr	r3, [pc, #280]	; (80007c8 <HAL_GPIO_EXTI_Callback+0x12c>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	33c8      	adds	r3, #200	; 0xc8
 80006b2:	461c      	mov	r4, r3
 80006b4:	f001 fc1c 	bl	8001ef0 <HAL_GetTick>
 80006b8:	4603      	mov	r3, r0
 80006ba:	429c      	cmp	r4, r3
 80006bc:	d211      	bcs.n	80006e2 <HAL_GPIO_EXTI_Callback+0x46>
			last_interrupt1 = HAL_GetTick();
 80006be:	f001 fc17 	bl	8001ef0 <HAL_GetTick>
 80006c2:	4603      	mov	r3, r0
 80006c4:	461a      	mov	r2, r3
 80006c6:	4b40      	ldr	r3, [pc, #256]	; (80007c8 <HAL_GPIO_EXTI_Callback+0x12c>)
 80006c8:	601a      	str	r2, [r3, #0]

			if (selected_floor  < max_floor) {
 80006ca:	4b40      	ldr	r3, [pc, #256]	; (80007cc <HAL_GPIO_EXTI_Callback+0x130>)
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	4b40      	ldr	r3, [pc, #256]	; (80007d0 <HAL_GPIO_EXTI_Callback+0x134>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	da74      	bge.n	80007c0 <HAL_GPIO_EXTI_Callback+0x124>
				selected_floor++;
 80006d6:	4b3d      	ldr	r3, [pc, #244]	; (80007cc <HAL_GPIO_EXTI_Callback+0x130>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	3301      	adds	r3, #1
 80006dc:	4a3b      	ldr	r2, [pc, #236]	; (80007cc <HAL_GPIO_EXTI_Callback+0x130>)
 80006de:	6013      	str	r3, [r2, #0]
			if (selected_floor  < max_floor) {
 80006e0:	e06e      	b.n	80007c0 <HAL_GPIO_EXTI_Callback+0x124>
			}

		}
		else if (GPIO_Pin == GPIO_PIN_6 && last_interrupt1 + 200 < HAL_GetTick()){
 80006e2:	88fb      	ldrh	r3, [r7, #6]
 80006e4:	2b40      	cmp	r3, #64	; 0x40
 80006e6:	d118      	bne.n	800071a <HAL_GPIO_EXTI_Callback+0x7e>
 80006e8:	4b37      	ldr	r3, [pc, #220]	; (80007c8 <HAL_GPIO_EXTI_Callback+0x12c>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	33c8      	adds	r3, #200	; 0xc8
 80006ee:	461c      	mov	r4, r3
 80006f0:	f001 fbfe 	bl	8001ef0 <HAL_GetTick>
 80006f4:	4603      	mov	r3, r0
 80006f6:	429c      	cmp	r4, r3
 80006f8:	d20f      	bcs.n	800071a <HAL_GPIO_EXTI_Callback+0x7e>
			last_interrupt1 = HAL_GetTick();
 80006fa:	f001 fbf9 	bl	8001ef0 <HAL_GetTick>
 80006fe:	4603      	mov	r3, r0
 8000700:	461a      	mov	r2, r3
 8000702:	4b31      	ldr	r3, [pc, #196]	; (80007c8 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000704:	601a      	str	r2, [r3, #0]

			if (selected_floor  > 0) {
 8000706:	4b31      	ldr	r3, [pc, #196]	; (80007cc <HAL_GPIO_EXTI_Callback+0x130>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	dd58      	ble.n	80007c0 <HAL_GPIO_EXTI_Callback+0x124>
				selected_floor --;
 800070e:	4b2f      	ldr	r3, [pc, #188]	; (80007cc <HAL_GPIO_EXTI_Callback+0x130>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	3b01      	subs	r3, #1
 8000714:	4a2d      	ldr	r2, [pc, #180]	; (80007cc <HAL_GPIO_EXTI_Callback+0x130>)
 8000716:	6013      	str	r3, [r2, #0]
			if (selected_floor  > 0) {
 8000718:	e052      	b.n	80007c0 <HAL_GPIO_EXTI_Callback+0x124>
			}

		}
		else if (GPIO_Pin == GPIO_PIN_12 && last_interrupt1 + 200 < HAL_GetTick()){
 800071a:	88fb      	ldrh	r3, [r7, #6]
 800071c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000720:	d127      	bne.n	8000772 <HAL_GPIO_EXTI_Callback+0xd6>
 8000722:	4b29      	ldr	r3, [pc, #164]	; (80007c8 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	33c8      	adds	r3, #200	; 0xc8
 8000728:	461c      	mov	r4, r3
 800072a:	f001 fbe1 	bl	8001ef0 <HAL_GetTick>
 800072e:	4603      	mov	r3, r0
 8000730:	429c      	cmp	r4, r3
 8000732:	d21e      	bcs.n	8000772 <HAL_GPIO_EXTI_Callback+0xd6>
			last_interrupt1 = HAL_GetTick();
 8000734:	f001 fbdc 	bl	8001ef0 <HAL_GetTick>
 8000738:	4603      	mov	r3, r0
 800073a:	461a      	mov	r2, r3
 800073c:	4b22      	ldr	r3, [pc, #136]	; (80007c8 <HAL_GPIO_EXTI_Callback+0x12c>)
 800073e:	601a      	str	r2, [r3, #0]
			peek();
 8000740:	f7ff febc 	bl	80004bc <peek>
			if(last_floor != selected_floor && selected_floor != current_floor){
 8000744:	4b23      	ldr	r3, [pc, #140]	; (80007d4 <HAL_GPIO_EXTI_Callback+0x138>)
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	4b20      	ldr	r3, [pc, #128]	; (80007cc <HAL_GPIO_EXTI_Callback+0x130>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	429a      	cmp	r2, r3
 800074e:	d036      	beq.n	80007be <HAL_GPIO_EXTI_Callback+0x122>
 8000750:	4b1e      	ldr	r3, [pc, #120]	; (80007cc <HAL_GPIO_EXTI_Callback+0x130>)
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4b20      	ldr	r3, [pc, #128]	; (80007d8 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	429a      	cmp	r2, r3
 800075a:	d030      	beq.n	80007be <HAL_GPIO_EXTI_Callback+0x122>
			enQueue(selected_floor);
 800075c:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <HAL_GPIO_EXTI_Callback+0x130>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff fe47 	bl	80003f4 <enQueue>
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 8000766:	f44f 7100 	mov.w	r1, #512	; 0x200
 800076a:	481c      	ldr	r0, [pc, #112]	; (80007dc <HAL_GPIO_EXTI_Callback+0x140>)
 800076c:	f001 ff0a 	bl	8002584 <HAL_GPIO_TogglePin>
			if(last_floor != selected_floor && selected_floor != current_floor){
 8000770:	e025      	b.n	80007be <HAL_GPIO_EXTI_Callback+0x122>
			}

		}
		else if (GPIO_Pin == GPIO_PIN_1 && last_interrupt1 + 200 < HAL_GetTick()){
 8000772:	88fb      	ldrh	r3, [r7, #6]
 8000774:	2b02      	cmp	r3, #2
 8000776:	d123      	bne.n	80007c0 <HAL_GPIO_EXTI_Callback+0x124>
 8000778:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <HAL_GPIO_EXTI_Callback+0x12c>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	33c8      	adds	r3, #200	; 0xc8
 800077e:	461c      	mov	r4, r3
 8000780:	f001 fbb6 	bl	8001ef0 <HAL_GetTick>
 8000784:	4603      	mov	r3, r0
 8000786:	429c      	cmp	r4, r3
 8000788:	d21a      	bcs.n	80007c0 <HAL_GPIO_EXTI_Callback+0x124>
			last_interrupt1 = HAL_GetTick();
 800078a:	f001 fbb1 	bl	8001ef0 <HAL_GetTick>
 800078e:	4603      	mov	r3, r0
 8000790:	461a      	mov	r2, r3
 8000792:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000794:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);
 8000796:	f44f 7180 	mov.w	r1, #256	; 0x100
 800079a:	4810      	ldr	r0, [pc, #64]	; (80007dc <HAL_GPIO_EXTI_Callback+0x140>)
 800079c:	f001 fef2 	bl	8002584 <HAL_GPIO_TogglePin>
			PWM_Start();
 80007a0:	f7ff feae 	bl	8000500 <PWM_Start>
			sw1 = 1;
 80007a4:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <HAL_GPIO_EXTI_Callback+0x144>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	601a      	str	r2, [r3, #0]
			if(led_condition){
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <HAL_GPIO_EXTI_Callback+0x148>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d002      	beq.n	80007b8 <HAL_GPIO_EXTI_Callback+0x11c>
				turn_on_led();
 80007b2:	f7ff fdb3 	bl	800031c <turn_on_led>
			else{
				turn_off_led();
			}
		}

	}
 80007b6:	e003      	b.n	80007c0 <HAL_GPIO_EXTI_Callback+0x124>
				turn_off_led();
 80007b8:	f7ff fde6 	bl	8000388 <turn_off_led>
	}
 80007bc:	e000      	b.n	80007c0 <HAL_GPIO_EXTI_Callback+0x124>
			if(last_floor != selected_floor && selected_floor != current_floor){
 80007be:	bf00      	nop
	}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd90      	pop	{r4, r7, pc}
 80007c8:	20000110 	.word	0x20000110
 80007cc:	20000120 	.word	0x20000120
 80007d0:	2000000c 	.word	0x2000000c
 80007d4:	20000128 	.word	0x20000128
 80007d8:	2000011c 	.word	0x2000011c
 80007dc:	48001000 	.word	0x48001000
 80007e0:	2000010c 	.word	0x2000010c
 80007e4:	20000130 	.word	0x20000130

080007e8 <HAL_TIM_PeriodElapsedCallback>:

////////////////////////////////////////////////////////////////


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a5a      	ldr	r2, [pc, #360]	; (8000960 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d14b      	bne.n	8000892 <HAL_TIM_PeriodElapsedCallback+0xaa>
    {
    	switch (delay%4) {
 80007fa:	4b5a      	ldr	r3, [pc, #360]	; (8000964 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	425a      	negs	r2, r3
 8000800:	f003 0303 	and.w	r3, r3, #3
 8000804:	f002 0203 	and.w	r2, r2, #3
 8000808:	bf58      	it	pl
 800080a:	4253      	negpl	r3, r2
 800080c:	2b03      	cmp	r3, #3
 800080e:	d83b      	bhi.n	8000888 <HAL_TIM_PeriodElapsedCallback+0xa0>
 8000810:	a201      	add	r2, pc, #4	; (adr r2, 8000818 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000816:	bf00      	nop
 8000818:	08000829 	.word	0x08000829
 800081c:	08000843 	.word	0x08000843
 8000820:	08000859 	.word	0x08000859
 8000824:	0800086f 	.word	0x0800086f
			case 0:
				turn_off_all();
 8000828:	f7ff fd6c 	bl	8000304 <turn_off_all>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 800082c:	2201      	movs	r2, #1
 800082e:	2101      	movs	r1, #1
 8000830:	484d      	ldr	r0, [pc, #308]	; (8000968 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000832:	f001 fe8f 	bl	8002554 <HAL_GPIO_WritePin>
				write_num_toBCD(selected_floor);
 8000836:	4b4d      	ldr	r3, [pc, #308]	; (800096c <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff fd18 	bl	8000270 <write_num_toBCD>
				break;
 8000840:	e022      	b.n	8000888 <HAL_TIM_PeriodElapsedCallback+0xa0>
			case 1:
				turn_off_all();
 8000842:	f7ff fd5f 	bl	8000304 <turn_off_all>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	2102      	movs	r1, #2
 800084a:	4847      	ldr	r0, [pc, #284]	; (8000968 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800084c:	f001 fe82 	bl	8002554 <HAL_GPIO_WritePin>
				write_num_toBCD(0);
 8000850:	2000      	movs	r0, #0
 8000852:	f7ff fd0d 	bl	8000270 <write_num_toBCD>
				break;
 8000856:	e017      	b.n	8000888 <HAL_TIM_PeriodElapsedCallback+0xa0>
			case 2:
				turn_off_all();
 8000858:	f7ff fd54 	bl	8000304 <turn_off_all>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 800085c:	2200      	movs	r2, #0
 800085e:	2104      	movs	r1, #4
 8000860:	4841      	ldr	r0, [pc, #260]	; (8000968 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000862:	f001 fe77 	bl	8002554 <HAL_GPIO_WritePin>
				write_num_toBCD(0);
 8000866:	2000      	movs	r0, #0
 8000868:	f7ff fd02 	bl	8000270 <write_num_toBCD>
				break;
 800086c:	e00c      	b.n	8000888 <HAL_TIM_PeriodElapsedCallback+0xa0>
			case 3:
				turn_off_all();
 800086e:	f7ff fd49 	bl	8000304 <turn_off_all>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 8000872:	2201      	movs	r2, #1
 8000874:	2108      	movs	r1, #8
 8000876:	483c      	ldr	r0, [pc, #240]	; (8000968 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000878:	f001 fe6c 	bl	8002554 <HAL_GPIO_WritePin>
				write_num_toBCD(current_floor);
 800087c:	4b3c      	ldr	r3, [pc, #240]	; (8000970 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff fcf5 	bl	8000270 <write_num_toBCD>
				break;
 8000886:	bf00      	nop

		}
				delay++;
 8000888:	4b36      	ldr	r3, [pc, #216]	; (8000964 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	3301      	adds	r3, #1
 800088e:	4a35      	ldr	r2, [pc, #212]	; (8000964 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000890:	6013      	str	r3, [r2, #0]



    }

    if (htim->Instance == TIM4)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a37      	ldr	r2, [pc, #220]	; (8000974 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d13e      	bne.n	800091a <HAL_TIM_PeriodElapsedCallback+0x132>
    {

    	if (goto_floor == current_floor && !isEmpty && !admin_mode ){
 800089c:	4b36      	ldr	r3, [pc, #216]	; (8000978 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	4b33      	ldr	r3, [pc, #204]	; (8000970 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d116      	bne.n	80008d6 <HAL_TIM_PeriodElapsedCallback+0xee>
 80008a8:	4b34      	ldr	r3, [pc, #208]	; (800097c <HAL_TIM_PeriodElapsedCallback+0x194>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d112      	bne.n	80008d6 <HAL_TIM_PeriodElapsedCallback+0xee>
 80008b0:	4b33      	ldr	r3, [pc, #204]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d10e      	bne.n	80008d6 <HAL_TIM_PeriodElapsedCallback+0xee>
    		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 80008b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008bc:	4831      	ldr	r0, [pc, #196]	; (8000984 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80008be:	f001 fe61 	bl	8002584 <HAL_GPIO_TogglePin>
    		HAL_Delay(waiting_time);
 80008c2:	4b31      	ldr	r3, [pc, #196]	; (8000988 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f001 fb1e 	bl	8001f08 <HAL_Delay>
    		deQueue();
 80008cc:	f7ff fdc2 	bl	8000454 <deQueue>
    		counter_flag = 1;
 80008d0:	4b2e      	ldr	r3, [pc, #184]	; (800098c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	601a      	str	r2, [r3, #0]
    	}

    	if(isEmpty){
 80008d6:	4b29      	ldr	r3, [pc, #164]	; (800097c <HAL_TIM_PeriodElapsedCallback+0x194>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d002      	beq.n	80008e4 <HAL_TIM_PeriodElapsedCallback+0xfc>
    		counter_flag = 0;
 80008de:	4b2b      	ldr	r3, [pc, #172]	; (800098c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
    	}

    	if (counter_flag){
 80008e4:	4b29      	ldr	r3, [pc, #164]	; (800098c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d016      	beq.n	800091a <HAL_TIM_PeriodElapsedCallback+0x132>
//    		deQueue();

    		if(goto_floor > current_floor ){
 80008ec:	4b22      	ldr	r3, [pc, #136]	; (8000978 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	dd05      	ble.n	8000904 <HAL_TIM_PeriodElapsedCallback+0x11c>
    			current_floor++;
 80008f8:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	3301      	adds	r3, #1
 80008fe:	4a1c      	ldr	r2, [pc, #112]	; (8000970 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000900:	6013      	str	r3, [r2, #0]
 8000902:	e00a      	b.n	800091a <HAL_TIM_PeriodElapsedCallback+0x132>
    		}
    		else if(goto_floor < current_floor){
 8000904:	4b1c      	ldr	r3, [pc, #112]	; (8000978 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	4b19      	ldr	r3, [pc, #100]	; (8000970 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	429a      	cmp	r2, r3
 800090e:	da04      	bge.n	800091a <HAL_TIM_PeriodElapsedCallback+0x132>
    			current_floor--;
 8000910:	4b17      	ldr	r3, [pc, #92]	; (8000970 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	3b01      	subs	r3, #1
 8000916:	4a16      	ldr	r2, [pc, #88]	; (8000970 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000918:	6013      	str	r3, [r2, #0]

    	}

    }

    if (htim->Instance == TIM2)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000922:	d119      	bne.n	8000958 <HAL_TIM_PeriodElapsedCallback+0x170>
        {
    	if(sw1){
 8000924:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d015      	beq.n	8000958 <HAL_TIM_PeriodElapsedCallback+0x170>
    		if(buzzer_flag % 2 == 0){
 800092c:	4b19      	ldr	r3, [pc, #100]	; (8000994 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f003 0301 	and.w	r3, r3, #1
 8000934:	2b00      	cmp	r3, #0
 8000936:	d105      	bne.n	8000944 <HAL_TIM_PeriodElapsedCallback+0x15c>
    			PWM_Change_Tone(300, 50);
 8000938:	2132      	movs	r1, #50	; 0x32
 800093a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800093e:	f7ff fdef 	bl	8000520 <PWM_Change_Tone>
 8000942:	e004      	b.n	800094e <HAL_TIM_PeriodElapsedCallback+0x166>
    		}else{
    			PWM_Change_Tone(300, 0);
 8000944:	2100      	movs	r1, #0
 8000946:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800094a:	f7ff fde9 	bl	8000520 <PWM_Change_Tone>
    		}
    		buzzer_flag++;
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	3301      	adds	r3, #1
 8000954:	4a0f      	ldr	r2, [pc, #60]	; (8000994 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000956:	6013      	str	r3, [r2, #0]
    	}
       }
}
 8000958:	bf00      	nop
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40000400 	.word	0x40000400
 8000964:	20000114 	.word	0x20000114
 8000968:	48000800 	.word	0x48000800
 800096c:	20000120 	.word	0x20000120
 8000970:	2000011c 	.word	0x2000011c
 8000974:	40000800 	.word	0x40000800
 8000978:	20000124 	.word	0x20000124
 800097c:	20000000 	.word	0x20000000
 8000980:	2000012c 	.word	0x2000012c
 8000984:	48001000 	.word	0x48001000
 8000988:	20000068 	.word	0x20000068
 800098c:	20000108 	.word	0x20000108
 8000990:	2000010c 	.word	0x2000010c
 8000994:	20000118 	.word	0x20000118

08000998 <set_max_level>:

/////////////////////////////////////////////////////////////////////////////////////////
void set_max_level(int max){
 8000998:	b5b0      	push	{r4, r5, r7, lr}
 800099a:	b08e      	sub	sp, #56	; 0x38
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	if(max > 9){
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2b09      	cmp	r3, #9
 80009a4:	dd14      	ble.n	80009d0 <set_max_level+0x38>
//		message = "Number of levels should be less than 10\n";
		char incorrect_pass_msg[41] = "\nNumber of levels should be less than 10\n" ;
 80009a6:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <set_max_level+0x4c>)
 80009a8:	f107 040c 	add.w	r4, r7, #12
 80009ac:	461d      	mov	r5, r3
 80009ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009ba:	c403      	stmia	r4!, {r0, r1}
 80009bc:	7022      	strb	r2, [r4, #0]
		HAL_UART_Transmit(&huart2, &incorrect_pass_msg, sizeof(incorrect_pass_msg),1000);	}else{
 80009be:	f107 010c 	add.w	r1, r7, #12
 80009c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c6:	2229      	movs	r2, #41	; 0x29
 80009c8:	4807      	ldr	r0, [pc, #28]	; (80009e8 <set_max_level+0x50>)
 80009ca:	f004 fe83 	bl	80056d4 <HAL_UART_Transmit>
 80009ce:	e002      	b.n	80009d6 <set_max_level+0x3e>
		max_floor = max;
 80009d0:	4a06      	ldr	r2, [pc, #24]	; (80009ec <set_max_level+0x54>)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6013      	str	r3, [r2, #0]
	}
	current_floor = 0;
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <set_max_level+0x58>)
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
}
 80009dc:	bf00      	nop
 80009de:	3738      	adds	r7, #56	; 0x38
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bdb0      	pop	{r4, r5, r7, pc}
 80009e4:	08007b04 	.word	0x08007b04
 80009e8:	20000380 	.word	0x20000380
 80009ec:	2000000c 	.word	0x2000000c
 80009f0:	2000011c 	.word	0x2000011c

080009f4 <set_level>:

void set_level(int level){
 80009f4:	b5b0      	push	{r4, r5, r7, lr}
 80009f6:	b094      	sub	sp, #80	; 0x50
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	if(level >= 0 && level <= max_floor){
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	db0b      	blt.n	8000a1a <set_level+0x26>
 8000a02:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <set_level+0x80>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	687a      	ldr	r2, [r7, #4]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	dc06      	bgt.n	8000a1a <set_level+0x26>
		current_floor = level;
 8000a0c:	4a1a      	ldr	r2, [pc, #104]	; (8000a78 <set_level+0x84>)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6013      	str	r3, [r2, #0]
		goto_floor = level;
 8000a12:	4a1a      	ldr	r2, [pc, #104]	; (8000a7c <set_level+0x88>)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6013      	str	r3, [r2, #0]
		} else{
			char incorrect_pass_msg[68] = "\nNumber of current level should be less than total number of levels\n" ;
			HAL_UART_Transmit(&huart2, &incorrect_pass_msg, sizeof(incorrect_pass_msg),1000);
		}
	}
}
 8000a18:	e027      	b.n	8000a6a <set_level+0x76>
		if(level < 0){
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	da14      	bge.n	8000a4a <set_level+0x56>
			char incorrect_pass_msg[44] = "\nNumber of current level should be positive\n" ;
 8000a20:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <set_level+0x8c>)
 8000a22:	f107 040c 	add.w	r4, r7, #12
 8000a26:	461d      	mov	r5, r3
 8000a28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a30:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			HAL_UART_Transmit(&huart2, &incorrect_pass_msg, sizeof(incorrect_pass_msg),1000);
 8000a38:	f107 010c 	add.w	r1, r7, #12
 8000a3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a40:	222c      	movs	r2, #44	; 0x2c
 8000a42:	4810      	ldr	r0, [pc, #64]	; (8000a84 <set_level+0x90>)
 8000a44:	f004 fe46 	bl	80056d4 <HAL_UART_Transmit>
}
 8000a48:	e00f      	b.n	8000a6a <set_level+0x76>
			char incorrect_pass_msg[68] = "\nNumber of current level should be less than total number of levels\n" ;
 8000a4a:	4a0f      	ldr	r2, [pc, #60]	; (8000a88 <set_level+0x94>)
 8000a4c:	f107 030c 	add.w	r3, r7, #12
 8000a50:	4611      	mov	r1, r2
 8000a52:	2244      	movs	r2, #68	; 0x44
 8000a54:	4618      	mov	r0, r3
 8000a56:	f006 f8a9 	bl	8006bac <memcpy>
			HAL_UART_Transmit(&huart2, &incorrect_pass_msg, sizeof(incorrect_pass_msg),1000);
 8000a5a:	f107 010c 	add.w	r1, r7, #12
 8000a5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a62:	2244      	movs	r2, #68	; 0x44
 8000a64:	4807      	ldr	r0, [pc, #28]	; (8000a84 <set_level+0x90>)
 8000a66:	f004 fe35 	bl	80056d4 <HAL_UART_Transmit>
}
 8000a6a:	bf00      	nop
 8000a6c:	3750      	adds	r7, #80	; 0x50
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bdb0      	pop	{r4, r5, r7, pc}
 8000a72:	bf00      	nop
 8000a74:	2000000c 	.word	0x2000000c
 8000a78:	2000011c 	.word	0x2000011c
 8000a7c:	20000124 	.word	0x20000124
 8000a80:	08007b30 	.word	0x08007b30
 8000a84:	20000380 	.word	0x20000380
 8000a88:	08007b5c 	.word	0x08007b5c

08000a8c <set_led>:

void set_led(char condition[]){
 8000a8c:	b590      	push	{r4, r7, lr}
 8000a8e:	b089      	sub	sp, #36	; 0x24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	char on[] = "ON";
 8000a94:	4a20      	ldr	r2, [pc, #128]	; (8000b18 <set_led+0x8c>)
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	6812      	ldr	r2, [r2, #0]
 8000a9c:	4611      	mov	r1, r2
 8000a9e:	8019      	strh	r1, [r3, #0]
 8000aa0:	3302      	adds	r3, #2
 8000aa2:	0c12      	lsrs	r2, r2, #16
 8000aa4:	701a      	strb	r2, [r3, #0]
	char off[] = "OFF";
 8000aa6:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <set_led+0x90>)
 8000aa8:	61bb      	str	r3, [r7, #24]
	if(strstr(condition , on)){
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	4619      	mov	r1, r3
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f006 f8bc 	bl	8006c2e <strstr>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d008      	beq.n	8000ace <set_led+0x42>
		led_condition = 1;
 8000abc:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <set_led+0x94>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 8000ac2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ac6:	4817      	ldr	r0, [pc, #92]	; (8000b24 <set_led+0x98>)
 8000ac8:	f001 fd5c 	bl	8002584 <HAL_GPIO_TogglePin>
	}
	else{
		char incorrect_pass_msg[16] = "\nwrong command!\n" ;
		HAL_UART_Transmit(&huart2, &incorrect_pass_msg, sizeof(incorrect_pass_msg),1000);
	}
}
 8000acc:	e01f      	b.n	8000b0e <set_led+0x82>
	else if (strstr(condition , off)){
 8000ace:	f107 0318 	add.w	r3, r7, #24
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f006 f8aa 	bl	8006c2e <strstr>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d008      	beq.n	8000af2 <set_led+0x66>
		led_condition = 0;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <set_led+0x94>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 8000ae6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aea:	480e      	ldr	r0, [pc, #56]	; (8000b24 <set_led+0x98>)
 8000aec:	f001 fd4a 	bl	8002584 <HAL_GPIO_TogglePin>
}
 8000af0:	e00d      	b.n	8000b0e <set_led+0x82>
		char incorrect_pass_msg[16] = "\nwrong command!\n" ;
 8000af2:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <set_led+0x9c>)
 8000af4:	f107 0408 	add.w	r4, r7, #8
 8000af8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000afa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		HAL_UART_Transmit(&huart2, &incorrect_pass_msg, sizeof(incorrect_pass_msg),1000);
 8000afe:	f107 0108 	add.w	r1, r7, #8
 8000b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b06:	2210      	movs	r2, #16
 8000b08:	4808      	ldr	r0, [pc, #32]	; (8000b2c <set_led+0xa0>)
 8000b0a:	f004 fde3 	bl	80056d4 <HAL_UART_Transmit>
}
 8000b0e:	bf00      	nop
 8000b10:	3724      	adds	r7, #36	; 0x24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd90      	pop	{r4, r7, pc}
 8000b16:	bf00      	nop
 8000b18:	08007ba0 	.word	0x08007ba0
 8000b1c:	0046464f 	.word	0x0046464f
 8000b20:	20000130 	.word	0x20000130
 8000b24:	48001000 	.word	0x48001000
 8000b28:	08007ba4 	.word	0x08007ba4
 8000b2c:	20000380 	.word	0x20000380

08000b30 <set_wait>:

void set_wait(int wait){
 8000b30:	b5b0      	push	{r4, r5, r7, lr}
 8000b32:	b08e      	sub	sp, #56	; 0x38
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	if (wait >= 500 && wait <= 5000 && (wait % 100 == 0)){
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b3e:	db15      	blt.n	8000b6c <set_wait+0x3c>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b46:	4293      	cmp	r3, r2
 8000b48:	dc10      	bgt.n	8000b6c <set_wait+0x3c>
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	4b36      	ldr	r3, [pc, #216]	; (8000c28 <set_wait+0xf8>)
 8000b4e:	fb83 1302 	smull	r1, r3, r3, r2
 8000b52:	1159      	asrs	r1, r3, #5
 8000b54:	17d3      	asrs	r3, r2, #31
 8000b56:	1acb      	subs	r3, r1, r3
 8000b58:	2164      	movs	r1, #100	; 0x64
 8000b5a:	fb01 f303 	mul.w	r3, r1, r3
 8000b5e:	1ad3      	subs	r3, r2, r3
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d103      	bne.n	8000b6c <set_wait+0x3c>
		waiting_time = wait;
 8000b64:	4a31      	ldr	r2, [pc, #196]	; (8000c2c <set_wait+0xfc>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6013      	str	r3, [r2, #0]
		} else if(wait > 5000){
			char incorrect_pass_msg[39] = "\nWaiting time should be less than 5000\n" ;
			HAL_UART_Transmit(&huart2, &incorrect_pass_msg, sizeof(incorrect_pass_msg),1000);
		}
	}
}
 8000b6a:	e058      	b.n	8000c1e <set_wait+0xee>
		if(wait % 100 != 0){
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	4b2e      	ldr	r3, [pc, #184]	; (8000c28 <set_wait+0xf8>)
 8000b70:	fb83 1302 	smull	r1, r3, r3, r2
 8000b74:	1159      	asrs	r1, r3, #5
 8000b76:	17d3      	asrs	r3, r2, #31
 8000b78:	1acb      	subs	r3, r1, r3
 8000b7a:	2164      	movs	r1, #100	; 0x64
 8000b7c:	fb01 f303 	mul.w	r3, r1, r3
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d014      	beq.n	8000bb0 <set_wait+0x80>
			char incorrect_pass_msg[41] = "\nWaiting time should be dividable by 100\n" ;
 8000b86:	4b2a      	ldr	r3, [pc, #168]	; (8000c30 <set_wait+0x100>)
 8000b88:	f107 040c 	add.w	r4, r7, #12
 8000b8c:	461d      	mov	r5, r3
 8000b8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b96:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b9a:	c403      	stmia	r4!, {r0, r1}
 8000b9c:	7022      	strb	r2, [r4, #0]
			HAL_UART_Transmit(&huart2, &incorrect_pass_msg, sizeof(incorrect_pass_msg),1000);
 8000b9e:	f107 010c 	add.w	r1, r7, #12
 8000ba2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba6:	2229      	movs	r2, #41	; 0x29
 8000ba8:	4822      	ldr	r0, [pc, #136]	; (8000c34 <set_wait+0x104>)
 8000baa:	f004 fd93 	bl	80056d4 <HAL_UART_Transmit>
}
 8000bae:	e036      	b.n	8000c1e <set_wait+0xee>
		} else if (wait < 500){
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000bb6:	da15      	bge.n	8000be4 <set_wait+0xb4>
			char incorrect_pass_msg[38] = "\nWaiting time should be more than 500\n" ;
 8000bb8:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <set_wait+0x108>)
 8000bba:	f107 040c 	add.w	r4, r7, #12
 8000bbe:	461d      	mov	r5, r3
 8000bc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000bcc:	6020      	str	r0, [r4, #0]
 8000bce:	3404      	adds	r4, #4
 8000bd0:	8021      	strh	r1, [r4, #0]
			HAL_UART_Transmit(&huart2, &incorrect_pass_msg, sizeof(incorrect_pass_msg),1000);
 8000bd2:	f107 010c 	add.w	r1, r7, #12
 8000bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bda:	2226      	movs	r2, #38	; 0x26
 8000bdc:	4815      	ldr	r0, [pc, #84]	; (8000c34 <set_wait+0x104>)
 8000bde:	f004 fd79 	bl	80056d4 <HAL_UART_Transmit>
}
 8000be2:	e01c      	b.n	8000c1e <set_wait+0xee>
		} else if(wait > 5000){
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bea:	4293      	cmp	r3, r2
 8000bec:	dd17      	ble.n	8000c1e <set_wait+0xee>
			char incorrect_pass_msg[39] = "\nWaiting time should be less than 5000\n" ;
 8000bee:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <set_wait+0x10c>)
 8000bf0:	f107 040c 	add.w	r4, r7, #12
 8000bf4:	461d      	mov	r5, r3
 8000bf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bfe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c02:	6020      	str	r0, [r4, #0]
 8000c04:	3404      	adds	r4, #4
 8000c06:	8021      	strh	r1, [r4, #0]
 8000c08:	3402      	adds	r4, #2
 8000c0a:	0c0b      	lsrs	r3, r1, #16
 8000c0c:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, &incorrect_pass_msg, sizeof(incorrect_pass_msg),1000);
 8000c0e:	f107 010c 	add.w	r1, r7, #12
 8000c12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c16:	2227      	movs	r2, #39	; 0x27
 8000c18:	4806      	ldr	r0, [pc, #24]	; (8000c34 <set_wait+0x104>)
 8000c1a:	f004 fd5b 	bl	80056d4 <HAL_UART_Transmit>
}
 8000c1e:	bf00      	nop
 8000c20:	3738      	adds	r7, #56	; 0x38
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bdb0      	pop	{r4, r5, r7, pc}
 8000c26:	bf00      	nop
 8000c28:	51eb851f 	.word	0x51eb851f
 8000c2c:	20000068 	.word	0x20000068
 8000c30:	08007bb4 	.word	0x08007bb4
 8000c34:	20000380 	.word	0x20000380
 8000c38:	08007be0 	.word	0x08007be0
 8000c3c:	08007c08 	.word	0x08007c08

08000c40 <HAL_UART_RxCpltCallback>:
int r = 5 , i = 8 , j = 0;
int num = 0;
int numbers[4];
int count = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000c40:	b5b0      	push	{r4, r5, r7, lr}
 8000c42:	b08a      	sub	sp, #40	; 0x28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]

		if(huart->Instance == USART2){
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a97      	ldr	r2, [pc, #604]	; (8000eac <HAL_UART_RxCpltCallback+0x26c>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	f040 81a4 	bne.w	8000f9c <HAL_UART_RxCpltCallback+0x35c>
//			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
//			  HAL_UART_Transmit(&huart2, data, 20 , 1000);
			if(strstr(data , admin_cmd) && isEmpty){
 8000c54:	4996      	ldr	r1, [pc, #600]	; (8000eb0 <HAL_UART_RxCpltCallback+0x270>)
 8000c56:	4897      	ldr	r0, [pc, #604]	; (8000eb4 <HAL_UART_RxCpltCallback+0x274>)
 8000c58:	f005 ffe9 	bl	8006c2e <strstr>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d044      	beq.n	8000cec <HAL_UART_RxCpltCallback+0xac>
 8000c62:	4b95      	ldr	r3, [pc, #596]	; (8000eb8 <HAL_UART_RxCpltCallback+0x278>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d040      	beq.n	8000cec <HAL_UART_RxCpltCallback+0xac>
				  HAL_UART_Transmit(&huart2, hello, sizeof(hello) , 1000);
 8000c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c6e:	2207      	movs	r2, #7
 8000c70:	4992      	ldr	r1, [pc, #584]	; (8000ebc <HAL_UART_RxCpltCallback+0x27c>)
 8000c72:	4893      	ldr	r0, [pc, #588]	; (8000ec0 <HAL_UART_RxCpltCallback+0x280>)
 8000c74:	f004 fd2e 	bl	80056d4 <HAL_UART_Transmit>
				if(data[6] == pass[0] && data[7] == pass[1] && data[8] == pass[2] && data[9] == pass[3]){
 8000c78:	4b8e      	ldr	r3, [pc, #568]	; (8000eb4 <HAL_UART_RxCpltCallback+0x274>)
 8000c7a:	799a      	ldrb	r2, [r3, #6]
 8000c7c:	4b91      	ldr	r3, [pc, #580]	; (8000ec4 <HAL_UART_RxCpltCallback+0x284>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d121      	bne.n	8000cc8 <HAL_UART_RxCpltCallback+0x88>
 8000c84:	4b8b      	ldr	r3, [pc, #556]	; (8000eb4 <HAL_UART_RxCpltCallback+0x274>)
 8000c86:	79da      	ldrb	r2, [r3, #7]
 8000c88:	4b8e      	ldr	r3, [pc, #568]	; (8000ec4 <HAL_UART_RxCpltCallback+0x284>)
 8000c8a:	785b      	ldrb	r3, [r3, #1]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d11b      	bne.n	8000cc8 <HAL_UART_RxCpltCallback+0x88>
 8000c90:	4b88      	ldr	r3, [pc, #544]	; (8000eb4 <HAL_UART_RxCpltCallback+0x274>)
 8000c92:	7a1a      	ldrb	r2, [r3, #8]
 8000c94:	4b8b      	ldr	r3, [pc, #556]	; (8000ec4 <HAL_UART_RxCpltCallback+0x284>)
 8000c96:	789b      	ldrb	r3, [r3, #2]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d115      	bne.n	8000cc8 <HAL_UART_RxCpltCallback+0x88>
 8000c9c:	4b85      	ldr	r3, [pc, #532]	; (8000eb4 <HAL_UART_RxCpltCallback+0x274>)
 8000c9e:	7a5a      	ldrb	r2, [r3, #9]
 8000ca0:	4b88      	ldr	r3, [pc, #544]	; (8000ec4 <HAL_UART_RxCpltCallback+0x284>)
 8000ca2:	78db      	ldrb	r3, [r3, #3]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d10f      	bne.n	8000cc8 <HAL_UART_RxCpltCallback+0x88>
					  HAL_UART_Transmit(&huart2, hello, sizeof(hello) , 1000);
 8000ca8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cac:	2207      	movs	r2, #7
 8000cae:	4983      	ldr	r1, [pc, #524]	; (8000ebc <HAL_UART_RxCpltCallback+0x27c>)
 8000cb0:	4883      	ldr	r0, [pc, #524]	; (8000ec0 <HAL_UART_RxCpltCallback+0x280>)
 8000cb2:	f004 fd0f 	bl	80056d4 <HAL_UART_Transmit>
					  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);
 8000cb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cba:	4883      	ldr	r0, [pc, #524]	; (8000ec8 <HAL_UART_RxCpltCallback+0x288>)
 8000cbc:	f001 fc62 	bl	8002584 <HAL_GPIO_TogglePin>
					  admin_mode = 1;
 8000cc0:	4b82      	ldr	r3, [pc, #520]	; (8000ecc <HAL_UART_RxCpltCallback+0x28c>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	e011      	b.n	8000cec <HAL_UART_RxCpltCallback+0xac>
				}
				else{
					char incorrect_pass_msg[24] = "\nPassword is Incorrect!\n" ;
 8000cc8:	4b81      	ldr	r3, [pc, #516]	; (8000ed0 <HAL_UART_RxCpltCallback+0x290>)
 8000cca:	f107 0410 	add.w	r4, r7, #16
 8000cce:	461d      	mov	r5, r3
 8000cd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cd4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000cd8:	e884 0003 	stmia.w	r4, {r0, r1}
					HAL_UART_Transmit(&huart2, &incorrect_pass_msg, sizeof(incorrect_pass_msg),1000);
 8000cdc:	f107 0110 	add.w	r1, r7, #16
 8000ce0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce4:	2218      	movs	r2, #24
 8000ce6:	4876      	ldr	r0, [pc, #472]	; (8000ec0 <HAL_UART_RxCpltCallback+0x280>)
 8000ce8:	f004 fcf4 	bl	80056d4 <HAL_UART_Transmit>
				}
			}

			if(admin_mode){
 8000cec:	4b77      	ldr	r3, [pc, #476]	; (8000ecc <HAL_UART_RxCpltCallback+0x28c>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	f000 8153 	beq.w	8000f9c <HAL_UART_RxCpltCallback+0x35c>
				if(strstr(data , max_level_cmd)){
 8000cf6:	4977      	ldr	r1, [pc, #476]	; (8000ed4 <HAL_UART_RxCpltCallback+0x294>)
 8000cf8:	486e      	ldr	r0, [pc, #440]	; (8000eb4 <HAL_UART_RxCpltCallback+0x274>)
 8000cfa:	f005 ff98 	bl	8006c2e <strstr>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d019      	beq.n	8000d38 <HAL_UART_RxCpltCallback+0xf8>
					HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 8000d04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d08:	486f      	ldr	r0, [pc, #444]	; (8000ec8 <HAL_UART_RxCpltCallback+0x288>)
 8000d0a:	f001 fc3b 	bl	8002584 <HAL_GPIO_TogglePin>
					set_max_level(data[13]-48);
 8000d0e:	4b69      	ldr	r3, [pc, #420]	; (8000eb4 <HAL_UART_RxCpltCallback+0x274>)
 8000d10:	7b5b      	ldrb	r3, [r3, #13]
 8000d12:	3b30      	subs	r3, #48	; 0x30
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fe3f 	bl	8000998 <set_max_level>
					char x = max_floor + 48;
 8000d1a:	4b6f      	ldr	r3, [pc, #444]	; (8000ed8 <HAL_UART_RxCpltCallback+0x298>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	3330      	adds	r3, #48	; 0x30
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	73fb      	strb	r3, [r7, #15]
					HAL_UART_Transmit(&huart2, &x, sizeof(x) , 1000);
 8000d26:	f107 010f 	add.w	r1, r7, #15
 8000d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2e:	2201      	movs	r2, #1
 8000d30:	4863      	ldr	r0, [pc, #396]	; (8000ec0 <HAL_UART_RxCpltCallback+0x280>)
 8000d32:	f004 fccf 	bl	80056d4 <HAL_UART_Transmit>
 8000d36:	e131      	b.n	8000f9c <HAL_UART_RxCpltCallback+0x35c>
				}
				else if(strstr(data , level_cmd)){
 8000d38:	4968      	ldr	r1, [pc, #416]	; (8000edc <HAL_UART_RxCpltCallback+0x29c>)
 8000d3a:	485e      	ldr	r0, [pc, #376]	; (8000eb4 <HAL_UART_RxCpltCallback+0x274>)
 8000d3c:	f005 ff77 	bl	8006c2e <strstr>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d014      	beq.n	8000d70 <HAL_UART_RxCpltCallback+0x130>
					set_level(data[9]-48);
 8000d46:	4b5b      	ldr	r3, [pc, #364]	; (8000eb4 <HAL_UART_RxCpltCallback+0x274>)
 8000d48:	7a5b      	ldrb	r3, [r3, #9]
 8000d4a:	3b30      	subs	r3, #48	; 0x30
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fe51 	bl	80009f4 <set_level>
					char x = current_floor + 48;
 8000d52:	4b63      	ldr	r3, [pc, #396]	; (8000ee0 <HAL_UART_RxCpltCallback+0x2a0>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	3330      	adds	r3, #48	; 0x30
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	73bb      	strb	r3, [r7, #14]
					HAL_UART_Transmit(&huart2, &x, sizeof(x) , 1000);
 8000d5e:	f107 010e 	add.w	r1, r7, #14
 8000d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d66:	2201      	movs	r2, #1
 8000d68:	4855      	ldr	r0, [pc, #340]	; (8000ec0 <HAL_UART_RxCpltCallback+0x280>)
 8000d6a:	f004 fcb3 	bl	80056d4 <HAL_UART_Transmit>
 8000d6e:	e115      	b.n	8000f9c <HAL_UART_RxCpltCallback+0x35c>
				}
				else if(strstr(data , wait_cmd)){
 8000d70:	495c      	ldr	r1, [pc, #368]	; (8000ee4 <HAL_UART_RxCpltCallback+0x2a4>)
 8000d72:	4850      	ldr	r0, [pc, #320]	; (8000eb4 <HAL_UART_RxCpltCallback+0x274>)
 8000d74:	f005 ff5b 	bl	8006c2e <strstr>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d076      	beq.n	8000e6c <HAL_UART_RxCpltCallback+0x22c>
					while((data[i] != ' ') && i < 12 && j< 4){
 8000d7e:	e01e      	b.n	8000dbe <HAL_UART_RxCpltCallback+0x17e>
						numbers[j] = (data[i]-48);
 8000d80:	4b59      	ldr	r3, [pc, #356]	; (8000ee8 <HAL_UART_RxCpltCallback+0x2a8>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a4b      	ldr	r2, [pc, #300]	; (8000eb4 <HAL_UART_RxCpltCallback+0x274>)
 8000d86:	5cd3      	ldrb	r3, [r2, r3]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4b58      	ldr	r3, [pc, #352]	; (8000eec <HAL_UART_RxCpltCallback+0x2ac>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	3a30      	subs	r2, #48	; 0x30
 8000d90:	4957      	ldr	r1, [pc, #348]	; (8000ef0 <HAL_UART_RxCpltCallback+0x2b0>)
 8000d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						HAL_UART_Transmit(&huart2, &data[i], 1 , 1000);
 8000d96:	4b54      	ldr	r3, [pc, #336]	; (8000ee8 <HAL_UART_RxCpltCallback+0x2a8>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a46      	ldr	r2, [pc, #280]	; (8000eb4 <HAL_UART_RxCpltCallback+0x274>)
 8000d9c:	1899      	adds	r1, r3, r2
 8000d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da2:	2201      	movs	r2, #1
 8000da4:	4846      	ldr	r0, [pc, #280]	; (8000ec0 <HAL_UART_RxCpltCallback+0x280>)
 8000da6:	f004 fc95 	bl	80056d4 <HAL_UART_Transmit>
						i++;
 8000daa:	4b4f      	ldr	r3, [pc, #316]	; (8000ee8 <HAL_UART_RxCpltCallback+0x2a8>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	3301      	adds	r3, #1
 8000db0:	4a4d      	ldr	r2, [pc, #308]	; (8000ee8 <HAL_UART_RxCpltCallback+0x2a8>)
 8000db2:	6013      	str	r3, [r2, #0]
						j++;
 8000db4:	4b4d      	ldr	r3, [pc, #308]	; (8000eec <HAL_UART_RxCpltCallback+0x2ac>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	3301      	adds	r3, #1
 8000dba:	4a4c      	ldr	r2, [pc, #304]	; (8000eec <HAL_UART_RxCpltCallback+0x2ac>)
 8000dbc:	6013      	str	r3, [r2, #0]
					while((data[i] != ' ') && i < 12 && j< 4){
 8000dbe:	4b4a      	ldr	r3, [pc, #296]	; (8000ee8 <HAL_UART_RxCpltCallback+0x2a8>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a3c      	ldr	r2, [pc, #240]	; (8000eb4 <HAL_UART_RxCpltCallback+0x274>)
 8000dc4:	5cd3      	ldrb	r3, [r2, r3]
 8000dc6:	2b20      	cmp	r3, #32
 8000dc8:	d007      	beq.n	8000dda <HAL_UART_RxCpltCallback+0x19a>
 8000dca:	4b47      	ldr	r3, [pc, #284]	; (8000ee8 <HAL_UART_RxCpltCallback+0x2a8>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2b0b      	cmp	r3, #11
 8000dd0:	dc03      	bgt.n	8000dda <HAL_UART_RxCpltCallback+0x19a>
 8000dd2:	4b46      	ldr	r3, [pc, #280]	; (8000eec <HAL_UART_RxCpltCallback+0x2ac>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2b03      	cmp	r3, #3
 8000dd8:	ddd2      	ble.n	8000d80 <HAL_UART_RxCpltCallback+0x140>
					}
					if(j == 3){
 8000dda:	4b44      	ldr	r3, [pc, #272]	; (8000eec <HAL_UART_RxCpltCallback+0x2ac>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2b03      	cmp	r3, #3
 8000de0:	d116      	bne.n	8000e10 <HAL_UART_RxCpltCallback+0x1d0>
						HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_11);
 8000de2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000de6:	4838      	ldr	r0, [pc, #224]	; (8000ec8 <HAL_UART_RxCpltCallback+0x288>)
 8000de8:	f001 fbcc 	bl	8002584 <HAL_GPIO_TogglePin>
						count = (numbers[0]*100) + (numbers[1]*10) + (numbers[2]);
 8000dec:	4b40      	ldr	r3, [pc, #256]	; (8000ef0 <HAL_UART_RxCpltCallback+0x2b0>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2264      	movs	r2, #100	; 0x64
 8000df2:	fb02 f103 	mul.w	r1, r2, r3
 8000df6:	4b3e      	ldr	r3, [pc, #248]	; (8000ef0 <HAL_UART_RxCpltCallback+0x2b0>)
 8000df8:	685a      	ldr	r2, [r3, #4]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	4413      	add	r3, r2
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	18ca      	adds	r2, r1, r3
 8000e04:	4b3a      	ldr	r3, [pc, #232]	; (8000ef0 <HAL_UART_RxCpltCallback+0x2b0>)
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	4413      	add	r3, r2
 8000e0a:	4a3a      	ldr	r2, [pc, #232]	; (8000ef4 <HAL_UART_RxCpltCallback+0x2b4>)
 8000e0c:	6013      	str	r3, [r2, #0]
 8000e0e:	e020      	b.n	8000e52 <HAL_UART_RxCpltCallback+0x212>
					}else if(j==4){
 8000e10:	4b36      	ldr	r3, [pc, #216]	; (8000eec <HAL_UART_RxCpltCallback+0x2ac>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b04      	cmp	r3, #4
 8000e16:	d11c      	bne.n	8000e52 <HAL_UART_RxCpltCallback+0x212>
						HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_12);
 8000e18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e1c:	482a      	ldr	r0, [pc, #168]	; (8000ec8 <HAL_UART_RxCpltCallback+0x288>)
 8000e1e:	f001 fbb1 	bl	8002584 <HAL_GPIO_TogglePin>
						count = (numbers[0]*1000) + (numbers[1]*100) + (numbers[2]*10) + numbers[3];
 8000e22:	4b33      	ldr	r3, [pc, #204]	; (8000ef0 <HAL_UART_RxCpltCallback+0x2b0>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e2a:	fb02 f203 	mul.w	r2, r2, r3
 8000e2e:	4b30      	ldr	r3, [pc, #192]	; (8000ef0 <HAL_UART_RxCpltCallback+0x2b0>)
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	2164      	movs	r1, #100	; 0x64
 8000e34:	fb01 f303 	mul.w	r3, r1, r3
 8000e38:	18d1      	adds	r1, r2, r3
 8000e3a:	4b2d      	ldr	r3, [pc, #180]	; (8000ef0 <HAL_UART_RxCpltCallback+0x2b0>)
 8000e3c:	689a      	ldr	r2, [r3, #8]
 8000e3e:	4613      	mov	r3, r2
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	4413      	add	r3, r2
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	18ca      	adds	r2, r1, r3
 8000e48:	4b29      	ldr	r3, [pc, #164]	; (8000ef0 <HAL_UART_RxCpltCallback+0x2b0>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	4a29      	ldr	r2, [pc, #164]	; (8000ef4 <HAL_UART_RxCpltCallback+0x2b4>)
 8000e50:	6013      	str	r3, [r2, #0]
					}
					HAL_UART_Transmit(&huart2, &j, sizeof(j) , 1000);
 8000e52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e56:	2204      	movs	r2, #4
 8000e58:	4924      	ldr	r1, [pc, #144]	; (8000eec <HAL_UART_RxCpltCallback+0x2ac>)
 8000e5a:	4819      	ldr	r0, [pc, #100]	; (8000ec0 <HAL_UART_RxCpltCallback+0x280>)
 8000e5c:	f004 fc3a 	bl	80056d4 <HAL_UART_Transmit>
					set_wait(count);
 8000e60:	4b24      	ldr	r3, [pc, #144]	; (8000ef4 <HAL_UART_RxCpltCallback+0x2b4>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff fe63 	bl	8000b30 <set_wait>
 8000e6a:	e097      	b.n	8000f9c <HAL_UART_RxCpltCallback+0x35c>
				}
				else if(strstr(data , led_cmd)){
 8000e6c:	4922      	ldr	r1, [pc, #136]	; (8000ef8 <HAL_UART_RxCpltCallback+0x2b8>)
 8000e6e:	4811      	ldr	r0, [pc, #68]	; (8000eb4 <HAL_UART_RxCpltCallback+0x274>)
 8000e70:	f005 fedd 	bl	8006c2e <strstr>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d010      	beq.n	8000e9c <HAL_UART_RxCpltCallback+0x25c>
					strncpy(y , data+7 , 3);
 8000e7a:	4b20      	ldr	r3, [pc, #128]	; (8000efc <HAL_UART_RxCpltCallback+0x2bc>)
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	4619      	mov	r1, r3
 8000e80:	481f      	ldr	r0, [pc, #124]	; (8000f00 <HAL_UART_RxCpltCallback+0x2c0>)
 8000e82:	f005 fec1 	bl	8006c08 <strncpy>
					HAL_UART_Transmit(&huart2, y, 3 , 1000);
 8000e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	491c      	ldr	r1, [pc, #112]	; (8000f00 <HAL_UART_RxCpltCallback+0x2c0>)
 8000e8e:	480c      	ldr	r0, [pc, #48]	; (8000ec0 <HAL_UART_RxCpltCallback+0x280>)
 8000e90:	f004 fc20 	bl	80056d4 <HAL_UART_Transmit>
					set_led(y);
 8000e94:	481a      	ldr	r0, [pc, #104]	; (8000f00 <HAL_UART_RxCpltCallback+0x2c0>)
 8000e96:	f7ff fdf9 	bl	8000a8c <set_led>
 8000e9a:	e07f      	b.n	8000f9c <HAL_UART_RxCpltCallback+0x35c>
				}
				else if(strstr(data , test_cmd)){
 8000e9c:	4919      	ldr	r1, [pc, #100]	; (8000f04 <HAL_UART_RxCpltCallback+0x2c4>)
 8000e9e:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <HAL_UART_RxCpltCallback+0x274>)
 8000ea0:	f005 fec5 	bl	8006c2e <strstr>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d054      	beq.n	8000f54 <HAL_UART_RxCpltCallback+0x314>
//					enQueue()
					while((data[r] != ' ') && r < 10){
 8000eaa:	e048      	b.n	8000f3e <HAL_UART_RxCpltCallback+0x2fe>
 8000eac:	40004400 	.word	0x40004400
 8000eb0:	20000018 	.word	0x20000018
 8000eb4:	200002b4 	.word	0x200002b4
 8000eb8:	20000000 	.word	0x20000000
 8000ebc:	20000004 	.word	0x20000004
 8000ec0:	20000380 	.word	0x20000380
 8000ec4:	20000020 	.word	0x20000020
 8000ec8:	48001000 	.word	0x48001000
 8000ecc:	2000012c 	.word	0x2000012c
 8000ed0:	08007c30 	.word	0x08007c30
 8000ed4:	20000028 	.word	0x20000028
 8000ed8:	2000000c 	.word	0x2000000c
 8000edc:	20000038 	.word	0x20000038
 8000ee0:	2000011c 	.word	0x2000011c
 8000ee4:	20000044 	.word	0x20000044
 8000ee8:	20000078 	.word	0x20000078
 8000eec:	20000134 	.word	0x20000134
 8000ef0:	20000404 	.word	0x20000404
 8000ef4:	2000013c 	.word	0x2000013c
 8000ef8:	20000050 	.word	0x20000050
 8000efc:	200002bb 	.word	0x200002bb
 8000f00:	200002c8 	.word	0x200002c8
 8000f04:	20000060 	.word	0x20000060
						num = data[r]-48;
 8000f08:	4b29      	ldr	r3, [pc, #164]	; (8000fb0 <HAL_UART_RxCpltCallback+0x370>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a29      	ldr	r2, [pc, #164]	; (8000fb4 <HAL_UART_RxCpltCallback+0x374>)
 8000f0e:	5cd3      	ldrb	r3, [r2, r3]
 8000f10:	3b30      	subs	r3, #48	; 0x30
 8000f12:	4a29      	ldr	r2, [pc, #164]	; (8000fb8 <HAL_UART_RxCpltCallback+0x378>)
 8000f14:	6013      	str	r3, [r2, #0]
						enQueue(num);
 8000f16:	4b28      	ldr	r3, [pc, #160]	; (8000fb8 <HAL_UART_RxCpltCallback+0x378>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff fa6a 	bl	80003f4 <enQueue>
						HAL_UART_Transmit(&huart2, &data[r], 1 , 1000);
 8000f20:	4b23      	ldr	r3, [pc, #140]	; (8000fb0 <HAL_UART_RxCpltCallback+0x370>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a23      	ldr	r2, [pc, #140]	; (8000fb4 <HAL_UART_RxCpltCallback+0x374>)
 8000f26:	1899      	adds	r1, r3, r2
 8000f28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	4823      	ldr	r0, [pc, #140]	; (8000fbc <HAL_UART_RxCpltCallback+0x37c>)
 8000f30:	f004 fbd0 	bl	80056d4 <HAL_UART_Transmit>
						r++;
 8000f34:	4b1e      	ldr	r3, [pc, #120]	; (8000fb0 <HAL_UART_RxCpltCallback+0x370>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	4a1d      	ldr	r2, [pc, #116]	; (8000fb0 <HAL_UART_RxCpltCallback+0x370>)
 8000f3c:	6013      	str	r3, [r2, #0]
					while((data[r] != ' ') && r < 10){
 8000f3e:	4b1c      	ldr	r3, [pc, #112]	; (8000fb0 <HAL_UART_RxCpltCallback+0x370>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a1c      	ldr	r2, [pc, #112]	; (8000fb4 <HAL_UART_RxCpltCallback+0x374>)
 8000f44:	5cd3      	ldrb	r3, [r2, r3]
 8000f46:	2b20      	cmp	r3, #32
 8000f48:	d028      	beq.n	8000f9c <HAL_UART_RxCpltCallback+0x35c>
 8000f4a:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <HAL_UART_RxCpltCallback+0x370>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2b09      	cmp	r3, #9
 8000f50:	ddda      	ble.n	8000f08 <HAL_UART_RxCpltCallback+0x2c8>
 8000f52:	e023      	b.n	8000f9c <HAL_UART_RxCpltCallback+0x35c>
					}
				}
				else if(strstr(data , start_cmd)){
 8000f54:	491a      	ldr	r1, [pc, #104]	; (8000fc0 <HAL_UART_RxCpltCallback+0x380>)
 8000f56:	4817      	ldr	r0, [pc, #92]	; (8000fb4 <HAL_UART_RxCpltCallback+0x374>)
 8000f58:	f005 fe69 	bl	8006c2e <strstr>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d01c      	beq.n	8000f9c <HAL_UART_RxCpltCallback+0x35c>
					admin_mode = 0;
 8000f62:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <HAL_UART_RxCpltCallback+0x384>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
					HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 8000f68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f6c:	4816      	ldr	r0, [pc, #88]	; (8000fc8 <HAL_UART_RxCpltCallback+0x388>)
 8000f6e:	f001 fb09 	bl	8002584 <HAL_GPIO_TogglePin>
//					  HAL_UART_Transmit(&huart2, "mmmmm", sizeof("mmmmm") , 1000);
					if(!isEmpty && goto_floor+1 != current_floor){
 8000f72:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <HAL_UART_RxCpltCallback+0x38c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d110      	bne.n	8000f9c <HAL_UART_RxCpltCallback+0x35c>
 8000f7a:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <HAL_UART_RxCpltCallback+0x390>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	1c5a      	adds	r2, r3, #1
 8000f80:	4b14      	ldr	r3, [pc, #80]	; (8000fd4 <HAL_UART_RxCpltCallback+0x394>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d009      	beq.n	8000f9c <HAL_UART_RxCpltCallback+0x35c>
						HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_12);
 8000f88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f8c:	480e      	ldr	r0, [pc, #56]	; (8000fc8 <HAL_UART_RxCpltCallback+0x388>)
 8000f8e:	f001 faf9 	bl	8002584 <HAL_GPIO_TogglePin>
						deQueue();
 8000f92:	f7ff fa5f 	bl	8000454 <deQueue>
						counter_flag = 1;
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <HAL_UART_RxCpltCallback+0x398>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	601a      	str	r2, [r3, #0]


		}


			HAL_UART_Receive_IT(&huart2,data,20);
 8000f9c:	2214      	movs	r2, #20
 8000f9e:	4905      	ldr	r1, [pc, #20]	; (8000fb4 <HAL_UART_RxCpltCallback+0x374>)
 8000fa0:	4806      	ldr	r0, [pc, #24]	; (8000fbc <HAL_UART_RxCpltCallback+0x37c>)
 8000fa2:	f004 fc2b 	bl	80057fc <HAL_UART_Receive_IT>

}
 8000fa6:	bf00      	nop
 8000fa8:	3728      	adds	r7, #40	; 0x28
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bdb0      	pop	{r4, r5, r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000074 	.word	0x20000074
 8000fb4:	200002b4 	.word	0x200002b4
 8000fb8:	20000138 	.word	0x20000138
 8000fbc:	20000380 	.word	0x20000380
 8000fc0:	20000058 	.word	0x20000058
 8000fc4:	2000012c 	.word	0x2000012c
 8000fc8:	48001000 	.word	0x48001000
 8000fcc:	20000000 	.word	0x20000000
 8000fd0:	20000124 	.word	0x20000124
 8000fd4:	2000011c 	.word	0x2000011c
 8000fd8:	20000108 	.word	0x20000108

08000fdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe0:	f000 ff2c 	bl	8001e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fe4:	f000 f834 	bl	8001050 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe8:	f000 fb00 	bl	80015ec <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fec:	f000 f896 	bl	800111c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000ff0:	f000 f8d4 	bl	800119c <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000ff4:	f000 fad8 	bl	80015a8 <MX_USB_PCD_Init>
  MX_TIM3_Init();
 8000ff8:	f000 f95c 	bl	80012b4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ffc:	f000 f9a8 	bl	8001350 <MX_TIM4_Init>
  MX_TIM8_Init();
 8001000:	f000 f9f6 	bl	80013f0 <MX_TIM8_Init>
  MX_TIM2_Init();
 8001004:	f000 f908 	bl	8001218 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001008:	f000 fa9e 	bl	8001548 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 800100c:	480a      	ldr	r0, [pc, #40]	; (8001038 <main+0x5c>)
 800100e:	f003 f8df 	bl	80041d0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8001012:	480a      	ldr	r0, [pc, #40]	; (800103c <main+0x60>)
 8001014:	f003 f8dc 	bl	80041d0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8001018:	4809      	ldr	r0, [pc, #36]	; (8001040 <main+0x64>)
 800101a:	f003 f8d9 	bl	80041d0 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2,data,20);
 800101e:	2214      	movs	r2, #20
 8001020:	4908      	ldr	r1, [pc, #32]	; (8001044 <main+0x68>)
 8001022:	4809      	ldr	r0, [pc, #36]	; (8001048 <main+0x6c>)
 8001024:	f004 fbea 	bl	80057fc <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart2, hello, sizeof(hello) , 1000);
 8001028:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102c:	2207      	movs	r2, #7
 800102e:	4907      	ldr	r1, [pc, #28]	; (800104c <main+0x70>)
 8001030:	4805      	ldr	r0, [pc, #20]	; (8001048 <main+0x6c>)
 8001032:	f004 fb4f 	bl	80056d4 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001036:	e7fe      	b.n	8001036 <main+0x5a>
 8001038:	20000264 	.word	0x20000264
 800103c:	20000198 	.word	0x20000198
 8001040:	20000334 	.word	0x20000334
 8001044:	200002b4 	.word	0x200002b4
 8001048:	20000380 	.word	0x20000380
 800104c:	20000004 	.word	0x20000004

08001050 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b09e      	sub	sp, #120	; 0x78
 8001054:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001056:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800105a:	2228      	movs	r2, #40	; 0x28
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f005 fdb2 	bl	8006bc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001064:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001074:	463b      	mov	r3, r7
 8001076:	223c      	movs	r2, #60	; 0x3c
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f005 fda4 	bl	8006bc8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001080:	2303      	movs	r3, #3
 8001082:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001084:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001088:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800108a:	2300      	movs	r3, #0
 800108c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800108e:	2301      	movs	r3, #1
 8001090:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001092:	2310      	movs	r3, #16
 8001094:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001096:	2302      	movs	r3, #2
 8001098:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800109a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800109e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80010a0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80010a4:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80010aa:	4618      	mov	r0, r3
 80010ac:	f001 fca0 	bl	80029f0 <HAL_RCC_OscConfig>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80010b6:	f000 fb8b 	bl	80017d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ba:	230f      	movs	r3, #15
 80010bc:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010be:	2302      	movs	r3, #2
 80010c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c2:	2300      	movs	r3, #0
 80010c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010cc:	2300      	movs	r3, #0
 80010ce:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80010d4:	2101      	movs	r1, #1
 80010d6:	4618      	mov	r0, r3
 80010d8:	f002 fb92 	bl	8003800 <HAL_RCC_ClockConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010e2:	f000 fb75 	bl	80017d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <SystemClock_Config+0xc8>)
 80010e8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM8;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80010f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010f6:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 80010f8:	2300      	movs	r3, #0
 80010fa:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010fc:	463b      	mov	r3, r7
 80010fe:	4618      	mov	r0, r3
 8001100:	f002 fdb4 	bl	8003c6c <HAL_RCCEx_PeriphCLKConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800110a:	f000 fb61 	bl	80017d0 <Error_Handler>
  }
}
 800110e:	bf00      	nop
 8001110:	3778      	adds	r7, #120	; 0x78
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	00022022 	.word	0x00022022

0800111c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001120:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <MX_I2C1_Init+0x74>)
 8001122:	4a1c      	ldr	r2, [pc, #112]	; (8001194 <MX_I2C1_Init+0x78>)
 8001124:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001126:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <MX_I2C1_Init+0x74>)
 8001128:	4a1b      	ldr	r2, [pc, #108]	; (8001198 <MX_I2C1_Init+0x7c>)
 800112a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800112c:	4b18      	ldr	r3, [pc, #96]	; (8001190 <MX_I2C1_Init+0x74>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001132:	4b17      	ldr	r3, [pc, #92]	; (8001190 <MX_I2C1_Init+0x74>)
 8001134:	2201      	movs	r2, #1
 8001136:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001138:	4b15      	ldr	r3, [pc, #84]	; (8001190 <MX_I2C1_Init+0x74>)
 800113a:	2200      	movs	r2, #0
 800113c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800113e:	4b14      	ldr	r3, [pc, #80]	; (8001190 <MX_I2C1_Init+0x74>)
 8001140:	2200      	movs	r2, #0
 8001142:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001144:	4b12      	ldr	r3, [pc, #72]	; (8001190 <MX_I2C1_Init+0x74>)
 8001146:	2200      	movs	r2, #0
 8001148:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800114a:	4b11      	ldr	r3, [pc, #68]	; (8001190 <MX_I2C1_Init+0x74>)
 800114c:	2200      	movs	r2, #0
 800114e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001150:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <MX_I2C1_Init+0x74>)
 8001152:	2200      	movs	r2, #0
 8001154:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001156:	480e      	ldr	r0, [pc, #56]	; (8001190 <MX_I2C1_Init+0x74>)
 8001158:	f001 fa46 	bl	80025e8 <HAL_I2C_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001162:	f000 fb35 	bl	80017d0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001166:	2100      	movs	r1, #0
 8001168:	4809      	ldr	r0, [pc, #36]	; (8001190 <MX_I2C1_Init+0x74>)
 800116a:	f001 facc 	bl	8002706 <HAL_I2CEx_ConfigAnalogFilter>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001174:	f000 fb2c 	bl	80017d0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001178:	2100      	movs	r1, #0
 800117a:	4805      	ldr	r0, [pc, #20]	; (8001190 <MX_I2C1_Init+0x74>)
 800117c:	f001 fb0e 	bl	800279c <HAL_I2CEx_ConfigDigitalFilter>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001186:	f000 fb23 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200001e4 	.word	0x200001e4
 8001194:	40005400 	.word	0x40005400
 8001198:	2000090e 	.word	0x2000090e

0800119c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011a0:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <MX_SPI1_Init+0x74>)
 80011a2:	4a1c      	ldr	r2, [pc, #112]	; (8001214 <MX_SPI1_Init+0x78>)
 80011a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011a6:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <MX_SPI1_Init+0x74>)
 80011a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ae:	4b18      	ldr	r3, [pc, #96]	; (8001210 <MX_SPI1_Init+0x74>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80011b4:	4b16      	ldr	r3, [pc, #88]	; (8001210 <MX_SPI1_Init+0x74>)
 80011b6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80011ba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011bc:	4b14      	ldr	r3, [pc, #80]	; (8001210 <MX_SPI1_Init+0x74>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011c2:	4b13      	ldr	r3, [pc, #76]	; (8001210 <MX_SPI1_Init+0x74>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011c8:	4b11      	ldr	r3, [pc, #68]	; (8001210 <MX_SPI1_Init+0x74>)
 80011ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011ce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80011d0:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <MX_SPI1_Init+0x74>)
 80011d2:	2208      	movs	r2, #8
 80011d4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <MX_SPI1_Init+0x74>)
 80011d8:	2200      	movs	r2, #0
 80011da:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <MX_SPI1_Init+0x74>)
 80011de:	2200      	movs	r2, #0
 80011e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011e2:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <MX_SPI1_Init+0x74>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80011e8:	4b09      	ldr	r3, [pc, #36]	; (8001210 <MX_SPI1_Init+0x74>)
 80011ea:	2207      	movs	r2, #7
 80011ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011ee:	4b08      	ldr	r3, [pc, #32]	; (8001210 <MX_SPI1_Init+0x74>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <MX_SPI1_Init+0x74>)
 80011f6:	2208      	movs	r2, #8
 80011f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011fa:	4805      	ldr	r0, [pc, #20]	; (8001210 <MX_SPI1_Init+0x74>)
 80011fc:	f002 fee6 	bl	8003fcc <HAL_SPI_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001206:	f000 fae3 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	200002d0 	.word	0x200002d0
 8001214:	40013000 	.word	0x40013000

08001218 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b088      	sub	sp, #32
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800121e:	f107 0310 	add.w	r3, r7, #16
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001236:	4b1e      	ldr	r3, [pc, #120]	; (80012b0 <MX_TIM2_Init+0x98>)
 8001238:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800123c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1199;
 800123e:	4b1c      	ldr	r3, [pc, #112]	; (80012b0 <MX_TIM2_Init+0x98>)
 8001240:	f240 42af 	movw	r2, #1199	; 0x4af
 8001244:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001246:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <MX_TIM2_Init+0x98>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 800124c:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <MX_TIM2_Init+0x98>)
 800124e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001252:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001254:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <MX_TIM2_Init+0x98>)
 8001256:	2200      	movs	r2, #0
 8001258:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800125a:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <MX_TIM2_Init+0x98>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001260:	4813      	ldr	r0, [pc, #76]	; (80012b0 <MX_TIM2_Init+0x98>)
 8001262:	f002 ff5e 	bl	8004122 <HAL_TIM_Base_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800126c:	f000 fab0 	bl	80017d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001270:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001274:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001276:	f107 0310 	add.w	r3, r7, #16
 800127a:	4619      	mov	r1, r3
 800127c:	480c      	ldr	r0, [pc, #48]	; (80012b0 <MX_TIM2_Init+0x98>)
 800127e:	f003 fba7 	bl	80049d0 <HAL_TIM_ConfigClockSource>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001288:	f000 faa2 	bl	80017d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800128c:	2300      	movs	r3, #0
 800128e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001290:	2300      	movs	r3, #0
 8001292:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	4619      	mov	r1, r3
 8001298:	4805      	ldr	r0, [pc, #20]	; (80012b0 <MX_TIM2_Init+0x98>)
 800129a:	f004 f8b1 	bl	8005400 <HAL_TIMEx_MasterConfigSynchronization>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80012a4:	f000 fa94 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012a8:	bf00      	nop
 80012aa:	3720      	adds	r7, #32
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000334 	.word	0x20000334

080012b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ba:	f107 0310 	add.w	r3, r7, #16
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012d2:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <MX_TIM3_Init+0x94>)
 80012d4:	4a1d      	ldr	r2, [pc, #116]	; (800134c <MX_TIM3_Init+0x98>)
 80012d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 80012d8:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <MX_TIM3_Init+0x94>)
 80012da:	220f      	movs	r2, #15
 80012dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012de:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <MX_TIM3_Init+0x94>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80012e4:	4b18      	ldr	r3, [pc, #96]	; (8001348 <MX_TIM3_Init+0x94>)
 80012e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ec:	4b16      	ldr	r3, [pc, #88]	; (8001348 <MX_TIM3_Init+0x94>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <MX_TIM3_Init+0x94>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012f8:	4813      	ldr	r0, [pc, #76]	; (8001348 <MX_TIM3_Init+0x94>)
 80012fa:	f002 ff12 	bl	8004122 <HAL_TIM_Base_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001304:	f000 fa64 	bl	80017d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800130c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800130e:	f107 0310 	add.w	r3, r7, #16
 8001312:	4619      	mov	r1, r3
 8001314:	480c      	ldr	r0, [pc, #48]	; (8001348 <MX_TIM3_Init+0x94>)
 8001316:	f003 fb5b 	bl	80049d0 <HAL_TIM_ConfigClockSource>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001320:	f000 fa56 	bl	80017d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001324:	2300      	movs	r3, #0
 8001326:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	4619      	mov	r1, r3
 8001330:	4805      	ldr	r0, [pc, #20]	; (8001348 <MX_TIM3_Init+0x94>)
 8001332:	f004 f865 	bl	8005400 <HAL_TIMEx_MasterConfigSynchronization>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800133c:	f000 fa48 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001340:	bf00      	nop
 8001342:	3720      	adds	r7, #32
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000264 	.word	0x20000264
 800134c:	40000400 	.word	0x40000400

08001350 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001356:	f107 0310 	add.w	r3, r7, #16
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800136e:	4b1e      	ldr	r3, [pc, #120]	; (80013e8 <MX_TIM4_Init+0x98>)
 8001370:	4a1e      	ldr	r2, [pc, #120]	; (80013ec <MX_TIM4_Init+0x9c>)
 8001372:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4799;
 8001374:	4b1c      	ldr	r3, [pc, #112]	; (80013e8 <MX_TIM4_Init+0x98>)
 8001376:	f241 22bf 	movw	r2, #4799	; 0x12bf
 800137a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137c:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <MX_TIM4_Init+0x98>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 8001382:	4b19      	ldr	r3, [pc, #100]	; (80013e8 <MX_TIM4_Init+0x98>)
 8001384:	f242 7210 	movw	r2, #10000	; 0x2710
 8001388:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138a:	4b17      	ldr	r3, [pc, #92]	; (80013e8 <MX_TIM4_Init+0x98>)
 800138c:	2200      	movs	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001390:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <MX_TIM4_Init+0x98>)
 8001392:	2200      	movs	r2, #0
 8001394:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001396:	4814      	ldr	r0, [pc, #80]	; (80013e8 <MX_TIM4_Init+0x98>)
 8001398:	f002 fec3 	bl	8004122 <HAL_TIM_Base_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80013a2:	f000 fa15 	bl	80017d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80013ac:	f107 0310 	add.w	r3, r7, #16
 80013b0:	4619      	mov	r1, r3
 80013b2:	480d      	ldr	r0, [pc, #52]	; (80013e8 <MX_TIM4_Init+0x98>)
 80013b4:	f003 fb0c 	bl	80049d0 <HAL_TIM_ConfigClockSource>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80013be:	f000 fa07 	bl	80017d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c2:	2300      	movs	r3, #0
 80013c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	4619      	mov	r1, r3
 80013ce:	4806      	ldr	r0, [pc, #24]	; (80013e8 <MX_TIM4_Init+0x98>)
 80013d0:	f004 f816 	bl	8005400 <HAL_TIMEx_MasterConfigSynchronization>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80013da:	f000 f9f9 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	3720      	adds	r7, #32
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000198 	.word	0x20000198
 80013ec:	40000800 	.word	0x40000800

080013f0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b09a      	sub	sp, #104	; 0x68
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001404:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001410:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
 8001420:	615a      	str	r2, [r3, #20]
 8001422:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001424:	1d3b      	adds	r3, r7, #4
 8001426:	222c      	movs	r2, #44	; 0x2c
 8001428:	2100      	movs	r1, #0
 800142a:	4618      	mov	r0, r3
 800142c:	f005 fbcc 	bl	8006bc8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001430:	4b43      	ldr	r3, [pc, #268]	; (8001540 <MX_TIM8_Init+0x150>)
 8001432:	4a44      	ldr	r2, [pc, #272]	; (8001544 <MX_TIM8_Init+0x154>)
 8001434:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001436:	4b42      	ldr	r3, [pc, #264]	; (8001540 <MX_TIM8_Init+0x150>)
 8001438:	2200      	movs	r2, #0
 800143a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143c:	4b40      	ldr	r3, [pc, #256]	; (8001540 <MX_TIM8_Init+0x150>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001442:	4b3f      	ldr	r3, [pc, #252]	; (8001540 <MX_TIM8_Init+0x150>)
 8001444:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001448:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800144a:	4b3d      	ldr	r3, [pc, #244]	; (8001540 <MX_TIM8_Init+0x150>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001450:	4b3b      	ldr	r3, [pc, #236]	; (8001540 <MX_TIM8_Init+0x150>)
 8001452:	2200      	movs	r2, #0
 8001454:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001456:	4b3a      	ldr	r3, [pc, #232]	; (8001540 <MX_TIM8_Init+0x150>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800145c:	4838      	ldr	r0, [pc, #224]	; (8001540 <MX_TIM8_Init+0x150>)
 800145e:	f002 fe60 	bl	8004122 <HAL_TIM_Base_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001468:	f000 f9b2 	bl	80017d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800146c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001470:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001472:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001476:	4619      	mov	r1, r3
 8001478:	4831      	ldr	r0, [pc, #196]	; (8001540 <MX_TIM8_Init+0x150>)
 800147a:	f003 faa9 	bl	80049d0 <HAL_TIM_ConfigClockSource>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001484:	f000 f9a4 	bl	80017d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001488:	482d      	ldr	r0, [pc, #180]	; (8001540 <MX_TIM8_Init+0x150>)
 800148a:	f002 ff0b 	bl	80042a4 <HAL_TIM_PWM_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001494:	f000 f99c 	bl	80017d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001498:	2300      	movs	r3, #0
 800149a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800149c:	2300      	movs	r3, #0
 800149e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80014a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014a8:	4619      	mov	r1, r3
 80014aa:	4825      	ldr	r0, [pc, #148]	; (8001540 <MX_TIM8_Init+0x150>)
 80014ac:	f003 ffa8 	bl	8005400 <HAL_TIMEx_MasterConfigSynchronization>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80014b6:	f000 f98b 	bl	80017d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ba:	2360      	movs	r3, #96	; 0x60
 80014bc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014c2:	2300      	movs	r3, #0
 80014c4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014c6:	2300      	movs	r3, #0
 80014c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ca:	2300      	movs	r3, #0
 80014cc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014ce:	2300      	movs	r3, #0
 80014d0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014d2:	2300      	movs	r3, #0
 80014d4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014da:	2204      	movs	r2, #4
 80014dc:	4619      	mov	r1, r3
 80014de:	4818      	ldr	r0, [pc, #96]	; (8001540 <MX_TIM8_Init+0x150>)
 80014e0:	f003 f962 	bl	80047a8 <HAL_TIM_PWM_ConfigChannel>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 80014ea:	f000 f971 	bl	80017d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014ee:	2300      	movs	r3, #0
 80014f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001502:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001506:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800150c:	2300      	movs	r3, #0
 800150e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001510:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800151a:	2300      	movs	r3, #0
 800151c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	4619      	mov	r1, r3
 8001522:	4807      	ldr	r0, [pc, #28]	; (8001540 <MX_TIM8_Init+0x150>)
 8001524:	f003 ffec 	bl	8005500 <HAL_TIMEx_ConfigBreakDeadTime>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 800152e:	f000 f94f 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001532:	4803      	ldr	r0, [pc, #12]	; (8001540 <MX_TIM8_Init+0x150>)
 8001534:	f000 fa6c 	bl	8001a10 <HAL_TIM_MspPostInit>

}
 8001538:	bf00      	nop
 800153a:	3768      	adds	r7, #104	; 0x68
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	2000014c 	.word	0x2000014c
 8001544:	40013400 	.word	0x40013400

08001548 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800154c:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <MX_USART2_UART_Init+0x58>)
 800154e:	4a15      	ldr	r2, [pc, #84]	; (80015a4 <MX_USART2_UART_Init+0x5c>)
 8001550:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001552:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <MX_USART2_UART_Init+0x58>)
 8001554:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001558:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800155a:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <MX_USART2_UART_Init+0x58>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001560:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <MX_USART2_UART_Init+0x58>)
 8001562:	2200      	movs	r2, #0
 8001564:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001566:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <MX_USART2_UART_Init+0x58>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <MX_USART2_UART_Init+0x58>)
 800156e:	220c      	movs	r2, #12
 8001570:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001572:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <MX_USART2_UART_Init+0x58>)
 8001574:	2200      	movs	r2, #0
 8001576:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001578:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <MX_USART2_UART_Init+0x58>)
 800157a:	2200      	movs	r2, #0
 800157c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800157e:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <MX_USART2_UART_Init+0x58>)
 8001580:	2200      	movs	r2, #0
 8001582:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <MX_USART2_UART_Init+0x58>)
 8001586:	2200      	movs	r2, #0
 8001588:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800158a:	4805      	ldr	r0, [pc, #20]	; (80015a0 <MX_USART2_UART_Init+0x58>)
 800158c:	f004 f854 	bl	8005638 <HAL_UART_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001596:	f000 f91b 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000380 	.word	0x20000380
 80015a4:	40004400 	.word	0x40004400

080015a8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80015ac:	4b0d      	ldr	r3, [pc, #52]	; (80015e4 <MX_USB_PCD_Init+0x3c>)
 80015ae:	4a0e      	ldr	r2, [pc, #56]	; (80015e8 <MX_USB_PCD_Init+0x40>)
 80015b0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80015b2:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <MX_USB_PCD_Init+0x3c>)
 80015b4:	2208      	movs	r2, #8
 80015b6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80015b8:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <MX_USB_PCD_Init+0x3c>)
 80015ba:	2202      	movs	r2, #2
 80015bc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80015be:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <MX_USB_PCD_Init+0x3c>)
 80015c0:	2202      	movs	r2, #2
 80015c2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80015c4:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <MX_USB_PCD_Init+0x3c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80015ca:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <MX_USB_PCD_Init+0x3c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80015d0:	4804      	ldr	r0, [pc, #16]	; (80015e4 <MX_USB_PCD_Init+0x3c>)
 80015d2:	f001 f92f 	bl	8002834 <HAL_PCD_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80015dc:	f000 f8f8 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000414 	.word	0x20000414
 80015e8:	40005c00 	.word	0x40005c00

080015ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08c      	sub	sp, #48	; 0x30
 80015f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f2:	f107 031c 	add.w	r3, r7, #28
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]
 8001600:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001602:	4b6e      	ldr	r3, [pc, #440]	; (80017bc <MX_GPIO_Init+0x1d0>)
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	4a6d      	ldr	r2, [pc, #436]	; (80017bc <MX_GPIO_Init+0x1d0>)
 8001608:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800160c:	6153      	str	r3, [r2, #20]
 800160e:	4b6b      	ldr	r3, [pc, #428]	; (80017bc <MX_GPIO_Init+0x1d0>)
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001616:	61bb      	str	r3, [r7, #24]
 8001618:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800161a:	4b68      	ldr	r3, [pc, #416]	; (80017bc <MX_GPIO_Init+0x1d0>)
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	4a67      	ldr	r2, [pc, #412]	; (80017bc <MX_GPIO_Init+0x1d0>)
 8001620:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001624:	6153      	str	r3, [r2, #20]
 8001626:	4b65      	ldr	r3, [pc, #404]	; (80017bc <MX_GPIO_Init+0x1d0>)
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800162e:	617b      	str	r3, [r7, #20]
 8001630:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001632:	4b62      	ldr	r3, [pc, #392]	; (80017bc <MX_GPIO_Init+0x1d0>)
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	4a61      	ldr	r2, [pc, #388]	; (80017bc <MX_GPIO_Init+0x1d0>)
 8001638:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800163c:	6153      	str	r3, [r2, #20]
 800163e:	4b5f      	ldr	r3, [pc, #380]	; (80017bc <MX_GPIO_Init+0x1d0>)
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001646:	613b      	str	r3, [r7, #16]
 8001648:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800164a:	4b5c      	ldr	r3, [pc, #368]	; (80017bc <MX_GPIO_Init+0x1d0>)
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	4a5b      	ldr	r2, [pc, #364]	; (80017bc <MX_GPIO_Init+0x1d0>)
 8001650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001654:	6153      	str	r3, [r2, #20]
 8001656:	4b59      	ldr	r3, [pc, #356]	; (80017bc <MX_GPIO_Init+0x1d0>)
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001662:	4b56      	ldr	r3, [pc, #344]	; (80017bc <MX_GPIO_Init+0x1d0>)
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	4a55      	ldr	r2, [pc, #340]	; (80017bc <MX_GPIO_Init+0x1d0>)
 8001668:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800166c:	6153      	str	r3, [r2, #20]
 800166e:	4b53      	ldr	r3, [pc, #332]	; (80017bc <MX_GPIO_Init+0x1d0>)
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800167a:	4b50      	ldr	r3, [pc, #320]	; (80017bc <MX_GPIO_Init+0x1d0>)
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	4a4f      	ldr	r2, [pc, #316]	; (80017bc <MX_GPIO_Init+0x1d0>)
 8001680:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001684:	6153      	str	r3, [r2, #20]
 8001686:	4b4d      	ldr	r3, [pc, #308]	; (80017bc <MX_GPIO_Init+0x1d0>)
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001692:	2200      	movs	r2, #0
 8001694:	f64f 7108 	movw	r1, #65288	; 0xff08
 8001698:	4849      	ldr	r0, [pc, #292]	; (80017c0 <MX_GPIO_Init+0x1d4>)
 800169a:	f000 ff5b 	bl	8002554 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800169e:	2200      	movs	r2, #0
 80016a0:	210f      	movs	r1, #15
 80016a2:	4848      	ldr	r0, [pc, #288]	; (80017c4 <MX_GPIO_Init+0x1d8>)
 80016a4:	f000 ff56 	bl	8002554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80016a8:	2200      	movs	r2, #0
 80016aa:	210f      	movs	r1, #15
 80016ac:	4846      	ldr	r0, [pc, #280]	; (80017c8 <MX_GPIO_Init+0x1dc>)
 80016ae:	f000 ff51 	bl	8002554 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT4_Pin MEMS_INT1_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin;
 80016b2:	2325      	movs	r3, #37	; 0x25
 80016b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80016b6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80016ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016c0:	f107 031c 	add.w	r3, r7, #28
 80016c4:	4619      	mov	r1, r3
 80016c6:	483e      	ldr	r0, [pc, #248]	; (80017c0 <MX_GPIO_Init+0x1d4>)
 80016c8:	f000 fdca 	bl	8002260 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80016cc:	f64f 7308 	movw	r3, #65288	; 0xff08
 80016d0:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d2:	2301      	movs	r3, #1
 80016d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016da:	2300      	movs	r3, #0
 80016dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016de:	f107 031c 	add.w	r3, r7, #28
 80016e2:	4619      	mov	r1, r3
 80016e4:	4836      	ldr	r0, [pc, #216]	; (80017c0 <MX_GPIO_Init+0x1d4>)
 80016e6:	f000 fdbb 	bl	8002260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80016ea:	230f      	movs	r3, #15
 80016ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ee:	2301      	movs	r3, #1
 80016f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f6:	2300      	movs	r3, #0
 80016f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016fa:	f107 031c 	add.w	r3, r7, #28
 80016fe:	4619      	mov	r1, r3
 8001700:	4830      	ldr	r0, [pc, #192]	; (80017c4 <MX_GPIO_Init+0x1d8>)
 8001702:	f000 fdad 	bl	8002260 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001706:	2301      	movs	r3, #1
 8001708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800170a:	2300      	movs	r3, #0
 800170c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001712:	f107 031c 	add.w	r3, r7, #28
 8001716:	4619      	mov	r1, r3
 8001718:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800171c:	f000 fda0 	bl	8002260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC6 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_12;
 8001720:	f241 0350 	movw	r3, #4176	; 0x1050
 8001724:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001726:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800172a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800172c:	2302      	movs	r3, #2
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001730:	f107 031c 	add.w	r3, r7, #28
 8001734:	4619      	mov	r1, r3
 8001736:	4823      	ldr	r0, [pc, #140]	; (80017c4 <MX_GPIO_Init+0x1d8>)
 8001738:	f000 fd92 	bl	8002260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800173c:	2302      	movs	r3, #2
 800173e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001740:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001744:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001746:	2302      	movs	r3, #2
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174a:	f107 031c 	add.w	r3, r7, #28
 800174e:	4619      	mov	r1, r3
 8001750:	481e      	ldr	r0, [pc, #120]	; (80017cc <MX_GPIO_Init+0x1e0>)
 8001752:	f000 fd85 	bl	8002260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001756:	230f      	movs	r3, #15
 8001758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175a:	2301      	movs	r3, #1
 800175c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001762:	2300      	movs	r3, #0
 8001764:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001766:	f107 031c 	add.w	r3, r7, #28
 800176a:	4619      	mov	r1, r3
 800176c:	4816      	ldr	r0, [pc, #88]	; (80017c8 <MX_GPIO_Init+0x1dc>)
 800176e:	f000 fd77 	bl	8002260 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	2101      	movs	r1, #1
 8001776:	2007      	movs	r0, #7
 8001778:	f000 fcc5 	bl	8002106 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800177c:	2007      	movs	r0, #7
 800177e:	f000 fcde 	bl	800213e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8001782:	2200      	movs	r2, #0
 8001784:	2101      	movs	r1, #1
 8001786:	200a      	movs	r0, #10
 8001788:	f000 fcbd 	bl	8002106 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800178c:	200a      	movs	r0, #10
 800178e:	f000 fcd6 	bl	800213e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001792:	2200      	movs	r2, #0
 8001794:	2101      	movs	r1, #1
 8001796:	2017      	movs	r0, #23
 8001798:	f000 fcb5 	bl	8002106 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800179c:	2017      	movs	r0, #23
 800179e:	f000 fcce 	bl	800213e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80017a2:	2200      	movs	r2, #0
 80017a4:	2101      	movs	r1, #1
 80017a6:	2028      	movs	r0, #40	; 0x28
 80017a8:	f000 fcad 	bl	8002106 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017ac:	2028      	movs	r0, #40	; 0x28
 80017ae:	f000 fcc6 	bl	800213e <HAL_NVIC_EnableIRQ>

}
 80017b2:	bf00      	nop
 80017b4:	3730      	adds	r7, #48	; 0x30
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40021000 	.word	0x40021000
 80017c0:	48001000 	.word	0x48001000
 80017c4:	48000800 	.word	0x48000800
 80017c8:	48000c00 	.word	0x48000c00
 80017cc:	48000400 	.word	0x48000400

080017d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d4:	b672      	cpsid	i
}
 80017d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <Error_Handler+0x8>
	...

080017dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e2:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <HAL_MspInit+0x44>)
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	4a0e      	ldr	r2, [pc, #56]	; (8001820 <HAL_MspInit+0x44>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6193      	str	r3, [r2, #24]
 80017ee:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <HAL_MspInit+0x44>)
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fa:	4b09      	ldr	r3, [pc, #36]	; (8001820 <HAL_MspInit+0x44>)
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	4a08      	ldr	r2, [pc, #32]	; (8001820 <HAL_MspInit+0x44>)
 8001800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001804:	61d3      	str	r3, [r2, #28]
 8001806:	4b06      	ldr	r3, [pc, #24]	; (8001820 <HAL_MspInit+0x44>)
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180e:	603b      	str	r3, [r7, #0]
 8001810:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8001812:	2006      	movs	r0, #6
 8001814:	f000 fc6c 	bl	80020f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40021000 	.word	0x40021000

08001824 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08a      	sub	sp, #40	; 0x28
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a17      	ldr	r2, [pc, #92]	; (80018a0 <HAL_I2C_MspInit+0x7c>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d127      	bne.n	8001896 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001846:	4b17      	ldr	r3, [pc, #92]	; (80018a4 <HAL_I2C_MspInit+0x80>)
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	4a16      	ldr	r2, [pc, #88]	; (80018a4 <HAL_I2C_MspInit+0x80>)
 800184c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001850:	6153      	str	r3, [r2, #20]
 8001852:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <HAL_I2C_MspInit+0x80>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800185e:	23c0      	movs	r3, #192	; 0xc0
 8001860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001862:	2312      	movs	r3, #18
 8001864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001866:	2301      	movs	r3, #1
 8001868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800186a:	2303      	movs	r3, #3
 800186c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800186e:	2304      	movs	r3, #4
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001872:	f107 0314 	add.w	r3, r7, #20
 8001876:	4619      	mov	r1, r3
 8001878:	480b      	ldr	r0, [pc, #44]	; (80018a8 <HAL_I2C_MspInit+0x84>)
 800187a:	f000 fcf1 	bl	8002260 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800187e:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <HAL_I2C_MspInit+0x80>)
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	4a08      	ldr	r2, [pc, #32]	; (80018a4 <HAL_I2C_MspInit+0x80>)
 8001884:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001888:	61d3      	str	r3, [r2, #28]
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_I2C_MspInit+0x80>)
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001896:	bf00      	nop
 8001898:	3728      	adds	r7, #40	; 0x28
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40005400 	.word	0x40005400
 80018a4:	40021000 	.word	0x40021000
 80018a8:	48000400 	.word	0x48000400

080018ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08a      	sub	sp, #40	; 0x28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a17      	ldr	r2, [pc, #92]	; (8001928 <HAL_SPI_MspInit+0x7c>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d128      	bne.n	8001920 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018ce:	4b17      	ldr	r3, [pc, #92]	; (800192c <HAL_SPI_MspInit+0x80>)
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	4a16      	ldr	r2, [pc, #88]	; (800192c <HAL_SPI_MspInit+0x80>)
 80018d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018d8:	6193      	str	r3, [r2, #24]
 80018da:	4b14      	ldr	r3, [pc, #80]	; (800192c <HAL_SPI_MspInit+0x80>)
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018e2:	613b      	str	r3, [r7, #16]
 80018e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e6:	4b11      	ldr	r3, [pc, #68]	; (800192c <HAL_SPI_MspInit+0x80>)
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	4a10      	ldr	r2, [pc, #64]	; (800192c <HAL_SPI_MspInit+0x80>)
 80018ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f0:	6153      	str	r3, [r2, #20]
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <HAL_SPI_MspInit+0x80>)
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80018fe:	23e0      	movs	r3, #224	; 0xe0
 8001900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2302      	movs	r3, #2
 8001904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800190a:	2303      	movs	r3, #3
 800190c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800190e:	2305      	movs	r3, #5
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	4619      	mov	r1, r3
 8001918:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800191c:	f000 fca0 	bl	8002260 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001920:	bf00      	nop
 8001922:	3728      	adds	r7, #40	; 0x28
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40013000 	.word	0x40013000
 800192c:	40021000 	.word	0x40021000

08001930 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001940:	d114      	bne.n	800196c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001942:	4b2f      	ldr	r3, [pc, #188]	; (8001a00 <HAL_TIM_Base_MspInit+0xd0>)
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	4a2e      	ldr	r2, [pc, #184]	; (8001a00 <HAL_TIM_Base_MspInit+0xd0>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	61d3      	str	r3, [r2, #28]
 800194e:	4b2c      	ldr	r3, [pc, #176]	; (8001a00 <HAL_TIM_Base_MspInit+0xd0>)
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800195a:	2200      	movs	r2, #0
 800195c:	2101      	movs	r1, #1
 800195e:	201c      	movs	r0, #28
 8001960:	f000 fbd1 	bl	8002106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001964:	201c      	movs	r0, #28
 8001966:	f000 fbea 	bl	800213e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800196a:	e044      	b.n	80019f6 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM3)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a24      	ldr	r2, [pc, #144]	; (8001a04 <HAL_TIM_Base_MspInit+0xd4>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d114      	bne.n	80019a0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001976:	4b22      	ldr	r3, [pc, #136]	; (8001a00 <HAL_TIM_Base_MspInit+0xd0>)
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	4a21      	ldr	r2, [pc, #132]	; (8001a00 <HAL_TIM_Base_MspInit+0xd0>)
 800197c:	f043 0302 	orr.w	r3, r3, #2
 8001980:	61d3      	str	r3, [r2, #28]
 8001982:	4b1f      	ldr	r3, [pc, #124]	; (8001a00 <HAL_TIM_Base_MspInit+0xd0>)
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800198e:	2200      	movs	r2, #0
 8001990:	2101      	movs	r1, #1
 8001992:	201d      	movs	r0, #29
 8001994:	f000 fbb7 	bl	8002106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001998:	201d      	movs	r0, #29
 800199a:	f000 fbd0 	bl	800213e <HAL_NVIC_EnableIRQ>
}
 800199e:	e02a      	b.n	80019f6 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a18      	ldr	r2, [pc, #96]	; (8001a08 <HAL_TIM_Base_MspInit+0xd8>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d114      	bne.n	80019d4 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019aa:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <HAL_TIM_Base_MspInit+0xd0>)
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	4a14      	ldr	r2, [pc, #80]	; (8001a00 <HAL_TIM_Base_MspInit+0xd0>)
 80019b0:	f043 0304 	orr.w	r3, r3, #4
 80019b4:	61d3      	str	r3, [r2, #28]
 80019b6:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <HAL_TIM_Base_MspInit+0xd0>)
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	f003 0304 	and.w	r3, r3, #4
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2101      	movs	r1, #1
 80019c6:	201e      	movs	r0, #30
 80019c8:	f000 fb9d 	bl	8002106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80019cc:	201e      	movs	r0, #30
 80019ce:	f000 fbb6 	bl	800213e <HAL_NVIC_EnableIRQ>
}
 80019d2:	e010      	b.n	80019f6 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM8)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a0c      	ldr	r2, [pc, #48]	; (8001a0c <HAL_TIM_Base_MspInit+0xdc>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d10b      	bne.n	80019f6 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80019de:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <HAL_TIM_Base_MspInit+0xd0>)
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	4a07      	ldr	r2, [pc, #28]	; (8001a00 <HAL_TIM_Base_MspInit+0xd0>)
 80019e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019e8:	6193      	str	r3, [r2, #24]
 80019ea:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <HAL_TIM_Base_MspInit+0xd0>)
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019f2:	60bb      	str	r3, [r7, #8]
 80019f4:	68bb      	ldr	r3, [r7, #8]
}
 80019f6:	bf00      	nop
 80019f8:	3718      	adds	r7, #24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40021000 	.word	0x40021000
 8001a04:	40000400 	.word	0x40000400
 8001a08:	40000800 	.word	0x40000800
 8001a0c:	40013400 	.word	0x40013400

08001a10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b088      	sub	sp, #32
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a18:	f107 030c 	add.w	r3, r7, #12
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a11      	ldr	r2, [pc, #68]	; (8001a74 <HAL_TIM_MspPostInit+0x64>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d11b      	bne.n	8001a6a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a32:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <HAL_TIM_MspPostInit+0x68>)
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	4a10      	ldr	r2, [pc, #64]	; (8001a78 <HAL_TIM_MspPostInit+0x68>)
 8001a38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a3c:	6153      	str	r3, [r2, #20]
 8001a3e:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <HAL_TIM_MspPostInit+0x68>)
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a46:	60bb      	str	r3, [r7, #8]
 8001a48:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001a5a:	2304      	movs	r3, #4
 8001a5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a5e:	f107 030c 	add.w	r3, r7, #12
 8001a62:	4619      	mov	r1, r3
 8001a64:	4805      	ldr	r0, [pc, #20]	; (8001a7c <HAL_TIM_MspPostInit+0x6c>)
 8001a66:	f000 fbfb 	bl	8002260 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001a6a:	bf00      	nop
 8001a6c:	3720      	adds	r7, #32
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40013400 	.word	0x40013400
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	48000800 	.word	0x48000800

08001a80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08a      	sub	sp, #40	; 0x28
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 0314 	add.w	r3, r7, #20
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a1b      	ldr	r2, [pc, #108]	; (8001b0c <HAL_UART_MspInit+0x8c>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d130      	bne.n	8001b04 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aa2:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <HAL_UART_MspInit+0x90>)
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	4a1a      	ldr	r2, [pc, #104]	; (8001b10 <HAL_UART_MspInit+0x90>)
 8001aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aac:	61d3      	str	r3, [r2, #28]
 8001aae:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <HAL_UART_MspInit+0x90>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab6:	613b      	str	r3, [r7, #16]
 8001ab8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aba:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <HAL_UART_MspInit+0x90>)
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	4a14      	ldr	r2, [pc, #80]	; (8001b10 <HAL_UART_MspInit+0x90>)
 8001ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac4:	6153      	str	r3, [r2, #20]
 8001ac6:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <HAL_UART_MspInit+0x90>)
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ad2:	230c      	movs	r3, #12
 8001ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ae2:	2307      	movs	r3, #7
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae6:	f107 0314 	add.w	r3, r7, #20
 8001aea:	4619      	mov	r1, r3
 8001aec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af0:	f000 fbb6 	bl	8002260 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8001af4:	2200      	movs	r2, #0
 8001af6:	2101      	movs	r1, #1
 8001af8:	2026      	movs	r0, #38	; 0x26
 8001afa:	f000 fb04 	bl	8002106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001afe:	2026      	movs	r0, #38	; 0x26
 8001b00:	f000 fb1d 	bl	800213e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b04:	bf00      	nop
 8001b06:	3728      	adds	r7, #40	; 0x28
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40004400 	.word	0x40004400
 8001b10:	40021000 	.word	0x40021000

08001b14 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08a      	sub	sp, #40	; 0x28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a18      	ldr	r2, [pc, #96]	; (8001b94 <HAL_PCD_MspInit+0x80>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d129      	bne.n	8001b8a <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b36:	4b18      	ldr	r3, [pc, #96]	; (8001b98 <HAL_PCD_MspInit+0x84>)
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	4a17      	ldr	r2, [pc, #92]	; (8001b98 <HAL_PCD_MspInit+0x84>)
 8001b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b40:	6153      	str	r3, [r2, #20]
 8001b42:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <HAL_PCD_MspInit+0x84>)
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4a:	613b      	str	r3, [r7, #16]
 8001b4c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001b4e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b54:	2302      	movs	r3, #2
 8001b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001b60:	230e      	movs	r3, #14
 8001b62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b6e:	f000 fb77 	bl	8002260 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001b72:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <HAL_PCD_MspInit+0x84>)
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	4a08      	ldr	r2, [pc, #32]	; (8001b98 <HAL_PCD_MspInit+0x84>)
 8001b78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b7c:	61d3      	str	r3, [r2, #28]
 8001b7e:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <HAL_PCD_MspInit+0x84>)
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001b8a:	bf00      	nop
 8001b8c:	3728      	adds	r7, #40	; 0x28
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40005c00 	.word	0x40005c00
 8001b98:	40021000 	.word	0x40021000

08001b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ba0:	e7fe      	b.n	8001ba0 <NMI_Handler+0x4>

08001ba2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ba6:	e7fe      	b.n	8001ba6 <HardFault_Handler+0x4>

08001ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bac:	e7fe      	b.n	8001bac <MemManage_Handler+0x4>

08001bae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bb2:	e7fe      	b.n	8001bb2 <BusFault_Handler+0x4>

08001bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb8:	e7fe      	b.n	8001bb8 <UsageFault_Handler+0x4>

08001bba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001be8:	f000 f96e 	bl	8001ec8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001bf4:	2002      	movs	r0, #2
 8001bf6:	f000 fcdf 	bl	80025b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001c02:	2010      	movs	r0, #16
 8001c04:	f000 fcd8 	bl	80025b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001c08:	bf00      	nop
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001c10:	2040      	movs	r0, #64	; 0x40
 8001c12:	f000 fcd1 	bl	80025b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
	...

08001c1c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c20:	4802      	ldr	r0, [pc, #8]	; (8001c2c <TIM2_IRQHandler+0x10>)
 8001c22:	f002 fca1 	bl	8004568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000334 	.word	0x20000334

08001c30 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c34:	4802      	ldr	r0, [pc, #8]	; (8001c40 <TIM3_IRQHandler+0x10>)
 8001c36:	f002 fc97 	bl	8004568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000264 	.word	0x20000264

08001c44 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001c48:	4802      	ldr	r0, [pc, #8]	; (8001c54 <TIM4_IRQHandler+0x10>)
 8001c4a:	f002 fc8d 	bl	8004568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000198 	.word	0x20000198

08001c58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c5c:	4802      	ldr	r0, [pc, #8]	; (8001c68 <USART2_IRQHandler+0x10>)
 8001c5e:	f003 fe1b 	bl	8005898 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000380 	.word	0x20000380

08001c6c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001c70:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001c74:	f000 fca0 	bl	80025b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c78:	bf00      	nop
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	e00a      	b.n	8001ca4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c8e:	f3af 8000 	nop.w
 8001c92:	4601      	mov	r1, r0
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	60ba      	str	r2, [r7, #8]
 8001c9a:	b2ca      	uxtb	r2, r1
 8001c9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	617b      	str	r3, [r7, #20]
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	dbf0      	blt.n	8001c8e <_read+0x12>
	}

return len;
 8001cac:	687b      	ldr	r3, [r7, #4]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b086      	sub	sp, #24
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	60f8      	str	r0, [r7, #12]
 8001cbe:	60b9      	str	r1, [r7, #8]
 8001cc0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
 8001cc6:	e009      	b.n	8001cdc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	1c5a      	adds	r2, r3, #1
 8001ccc:	60ba      	str	r2, [r7, #8]
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	dbf1      	blt.n	8001cc8 <_write+0x12>
	}
	return len;
 8001ce4:	687b      	ldr	r3, [r7, #4]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <_close>:

int _close(int file)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
	return -1;
 8001cf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
 8001d0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d16:	605a      	str	r2, [r3, #4]
	return 0;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <_isatty>:

int _isatty(int file)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
	return 1;
 8001d2e:	2301      	movs	r3, #1
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
	return 0;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
	...

08001d58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d60:	4a14      	ldr	r2, [pc, #80]	; (8001db4 <_sbrk+0x5c>)
 8001d62:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <_sbrk+0x60>)
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d6c:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <_sbrk+0x64>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d102      	bne.n	8001d7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d74:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <_sbrk+0x64>)
 8001d76:	4a12      	ldr	r2, [pc, #72]	; (8001dc0 <_sbrk+0x68>)
 8001d78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d7a:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <_sbrk+0x64>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4413      	add	r3, r2
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d207      	bcs.n	8001d98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d88:	f004 fee6 	bl	8006b58 <__errno>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	220c      	movs	r2, #12
 8001d90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d92:	f04f 33ff 	mov.w	r3, #4294967295
 8001d96:	e009      	b.n	8001dac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d98:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <_sbrk+0x64>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d9e:	4b07      	ldr	r3, [pc, #28]	; (8001dbc <_sbrk+0x64>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4413      	add	r3, r2
 8001da6:	4a05      	ldr	r2, [pc, #20]	; (8001dbc <_sbrk+0x64>)
 8001da8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001daa:	68fb      	ldr	r3, [r7, #12]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	2000a000 	.word	0x2000a000
 8001db8:	00000400 	.word	0x00000400
 8001dbc:	20000140 	.word	0x20000140
 8001dc0:	20000740 	.word	0x20000740

08001dc4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <SystemInit+0x20>)
 8001dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dce:	4a05      	ldr	r2, [pc, #20]	; (8001de4 <SystemInit+0x20>)
 8001dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001de8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e20 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dec:	480d      	ldr	r0, [pc, #52]	; (8001e24 <LoopForever+0x6>)
  ldr r1, =_edata
 8001dee:	490e      	ldr	r1, [pc, #56]	; (8001e28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001df0:	4a0e      	ldr	r2, [pc, #56]	; (8001e2c <LoopForever+0xe>)
  movs r3, #0
 8001df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001df4:	e002      	b.n	8001dfc <LoopCopyDataInit>

08001df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dfa:	3304      	adds	r3, #4

08001dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e00:	d3f9      	bcc.n	8001df6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e02:	4a0b      	ldr	r2, [pc, #44]	; (8001e30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e04:	4c0b      	ldr	r4, [pc, #44]	; (8001e34 <LoopForever+0x16>)
  movs r3, #0
 8001e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e08:	e001      	b.n	8001e0e <LoopFillZerobss>

08001e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e0c:	3204      	adds	r2, #4

08001e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e10:	d3fb      	bcc.n	8001e0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e12:	f7ff ffd7 	bl	8001dc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e16:	f004 fea5 	bl	8006b64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e1a:	f7ff f8df 	bl	8000fdc <main>

08001e1e <LoopForever>:

LoopForever:
    b LoopForever
 8001e1e:	e7fe      	b.n	8001e1e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e20:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e28:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8001e2c:	08007d20 	.word	0x08007d20
  ldr r2, =_sbss
 8001e30:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 8001e34:	20000740 	.word	0x20000740

08001e38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e38:	e7fe      	b.n	8001e38 <ADC1_2_IRQHandler>
	...

08001e3c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e40:	4b08      	ldr	r3, [pc, #32]	; (8001e64 <HAL_Init+0x28>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a07      	ldr	r2, [pc, #28]	; (8001e64 <HAL_Init+0x28>)
 8001e46:	f043 0310 	orr.w	r3, r3, #16
 8001e4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e4c:	2003      	movs	r0, #3
 8001e4e:	f000 f94f 	bl	80020f0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e52:	2000      	movs	r0, #0
 8001e54:	f000 f808 	bl	8001e68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e58:	f7ff fcc0 	bl	80017dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40022000 	.word	0x40022000

08001e68 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e70:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <HAL_InitTick+0x54>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <HAL_InitTick+0x58>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e86:	4618      	mov	r0, r3
 8001e88:	f000 f967 	bl	800215a <HAL_SYSTICK_Config>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e00e      	b.n	8001eb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b0f      	cmp	r3, #15
 8001e9a:	d80a      	bhi.n	8001eb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea4:	f000 f92f 	bl	8002106 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ea8:	4a06      	ldr	r2, [pc, #24]	; (8001ec4 <HAL_InitTick+0x5c>)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	e000      	b.n	8001eb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	2000007c 	.word	0x2000007c
 8001ec0:	20000084 	.word	0x20000084
 8001ec4:	20000080 	.word	0x20000080

08001ec8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ecc:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <HAL_IncTick+0x20>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4b06      	ldr	r3, [pc, #24]	; (8001eec <HAL_IncTick+0x24>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	4a04      	ldr	r2, [pc, #16]	; (8001eec <HAL_IncTick+0x24>)
 8001eda:	6013      	str	r3, [r2, #0]
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	20000084 	.word	0x20000084
 8001eec:	2000072c 	.word	0x2000072c

08001ef0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return uwTick;  
 8001ef4:	4b03      	ldr	r3, [pc, #12]	; (8001f04 <HAL_GetTick+0x14>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	2000072c 	.word	0x2000072c

08001f08 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f10:	f7ff ffee 	bl	8001ef0 <HAL_GetTick>
 8001f14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f20:	d005      	beq.n	8001f2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f22:	4b0a      	ldr	r3, [pc, #40]	; (8001f4c <HAL_Delay+0x44>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	461a      	mov	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001f2e:	bf00      	nop
 8001f30:	f7ff ffde 	bl	8001ef0 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d8f7      	bhi.n	8001f30 <HAL_Delay+0x28>
  {
  }
}
 8001f40:	bf00      	nop
 8001f42:	bf00      	nop
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20000084 	.word	0x20000084

08001f50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f60:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <__NVIC_SetPriorityGrouping+0x44>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f66:	68ba      	ldr	r2, [r7, #8]
 8001f68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f82:	4a04      	ldr	r2, [pc, #16]	; (8001f94 <__NVIC_SetPriorityGrouping+0x44>)
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	60d3      	str	r3, [r2, #12]
}
 8001f88:	bf00      	nop
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f9c:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	0a1b      	lsrs	r3, r3, #8
 8001fa2:	f003 0307 	and.w	r3, r3, #7
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	db0b      	blt.n	8001fde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	f003 021f 	and.w	r2, r3, #31
 8001fcc:	4907      	ldr	r1, [pc, #28]	; (8001fec <__NVIC_EnableIRQ+0x38>)
 8001fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd2:	095b      	lsrs	r3, r3, #5
 8001fd4:	2001      	movs	r0, #1
 8001fd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	e000e100 	.word	0xe000e100

08001ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	6039      	str	r1, [r7, #0]
 8001ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002000:	2b00      	cmp	r3, #0
 8002002:	db0a      	blt.n	800201a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	b2da      	uxtb	r2, r3
 8002008:	490c      	ldr	r1, [pc, #48]	; (800203c <__NVIC_SetPriority+0x4c>)
 800200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200e:	0112      	lsls	r2, r2, #4
 8002010:	b2d2      	uxtb	r2, r2
 8002012:	440b      	add	r3, r1
 8002014:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002018:	e00a      	b.n	8002030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	b2da      	uxtb	r2, r3
 800201e:	4908      	ldr	r1, [pc, #32]	; (8002040 <__NVIC_SetPriority+0x50>)
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	3b04      	subs	r3, #4
 8002028:	0112      	lsls	r2, r2, #4
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	440b      	add	r3, r1
 800202e:	761a      	strb	r2, [r3, #24]
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	e000e100 	.word	0xe000e100
 8002040:	e000ed00 	.word	0xe000ed00

08002044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002044:	b480      	push	{r7}
 8002046:	b089      	sub	sp, #36	; 0x24
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f1c3 0307 	rsb	r3, r3, #7
 800205e:	2b04      	cmp	r3, #4
 8002060:	bf28      	it	cs
 8002062:	2304      	movcs	r3, #4
 8002064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	3304      	adds	r3, #4
 800206a:	2b06      	cmp	r3, #6
 800206c:	d902      	bls.n	8002074 <NVIC_EncodePriority+0x30>
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	3b03      	subs	r3, #3
 8002072:	e000      	b.n	8002076 <NVIC_EncodePriority+0x32>
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002078:	f04f 32ff 	mov.w	r2, #4294967295
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	43da      	mvns	r2, r3
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	401a      	ands	r2, r3
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800208c:	f04f 31ff 	mov.w	r1, #4294967295
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	fa01 f303 	lsl.w	r3, r1, r3
 8002096:	43d9      	mvns	r1, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800209c:	4313      	orrs	r3, r2
         );
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3724      	adds	r7, #36	; 0x24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
	...

080020ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020bc:	d301      	bcc.n	80020c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020be:	2301      	movs	r3, #1
 80020c0:	e00f      	b.n	80020e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020c2:	4a0a      	ldr	r2, [pc, #40]	; (80020ec <SysTick_Config+0x40>)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ca:	210f      	movs	r1, #15
 80020cc:	f04f 30ff 	mov.w	r0, #4294967295
 80020d0:	f7ff ff8e 	bl	8001ff0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020d4:	4b05      	ldr	r3, [pc, #20]	; (80020ec <SysTick_Config+0x40>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020da:	4b04      	ldr	r3, [pc, #16]	; (80020ec <SysTick_Config+0x40>)
 80020dc:	2207      	movs	r2, #7
 80020de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	e000e010 	.word	0xe000e010

080020f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7ff ff29 	bl	8001f50 <__NVIC_SetPriorityGrouping>
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b086      	sub	sp, #24
 800210a:	af00      	add	r7, sp, #0
 800210c:	4603      	mov	r3, r0
 800210e:	60b9      	str	r1, [r7, #8]
 8002110:	607a      	str	r2, [r7, #4]
 8002112:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002118:	f7ff ff3e 	bl	8001f98 <__NVIC_GetPriorityGrouping>
 800211c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	68b9      	ldr	r1, [r7, #8]
 8002122:	6978      	ldr	r0, [r7, #20]
 8002124:	f7ff ff8e 	bl	8002044 <NVIC_EncodePriority>
 8002128:	4602      	mov	r2, r0
 800212a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800212e:	4611      	mov	r1, r2
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff ff5d 	bl	8001ff0 <__NVIC_SetPriority>
}
 8002136:	bf00      	nop
 8002138:	3718      	adds	r7, #24
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b082      	sub	sp, #8
 8002142:	af00      	add	r7, sp, #0
 8002144:	4603      	mov	r3, r0
 8002146:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff ff31 	bl	8001fb4 <__NVIC_EnableIRQ>
}
 8002152:	bf00      	nop
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b082      	sub	sp, #8
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7ff ffa2 	bl	80020ac <SysTick_Config>
 8002168:	4603      	mov	r3, r0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002180:	2b02      	cmp	r3, #2
 8002182:	d008      	beq.n	8002196 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2204      	movs	r2, #4
 8002188:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e020      	b.n	80021d8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 020e 	bic.w	r2, r2, #14
 80021a4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 0201 	bic.w	r2, r2, #1
 80021b4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021be:	2101      	movs	r1, #1
 80021c0:	fa01 f202 	lsl.w	r2, r1, r2
 80021c4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021ec:	2300      	movs	r3, #0
 80021ee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d005      	beq.n	8002206 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2204      	movs	r2, #4
 80021fe:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	73fb      	strb	r3, [r7, #15]
 8002204:	e027      	b.n	8002256 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 020e 	bic.w	r2, r2, #14
 8002214:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 0201 	bic.w	r2, r2, #1
 8002224:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800222e:	2101      	movs	r1, #1
 8002230:	fa01 f202 	lsl.w	r2, r1, r2
 8002234:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	4798      	blx	r3
    } 
  }
  return status;
 8002256:	7bfb      	ldrb	r3, [r7, #15]
}
 8002258:	4618      	mov	r0, r3
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002260:	b480      	push	{r7}
 8002262:	b087      	sub	sp, #28
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800226e:	e154      	b.n	800251a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	2101      	movs	r1, #1
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	fa01 f303 	lsl.w	r3, r1, r3
 800227c:	4013      	ands	r3, r2
 800227e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 8146 	beq.w	8002514 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	2b01      	cmp	r3, #1
 8002292:	d005      	beq.n	80022a0 <HAL_GPIO_Init+0x40>
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 0303 	and.w	r3, r3, #3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d130      	bne.n	8002302 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	2203      	movs	r2, #3
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4013      	ands	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	68da      	ldr	r2, [r3, #12]
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022d6:	2201      	movs	r2, #1
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	43db      	mvns	r3, r3
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	4013      	ands	r3, r2
 80022e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	091b      	lsrs	r3, r3, #4
 80022ec:	f003 0201 	and.w	r2, r3, #1
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 0303 	and.w	r3, r3, #3
 800230a:	2b03      	cmp	r3, #3
 800230c:	d017      	beq.n	800233e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	2203      	movs	r2, #3
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43db      	mvns	r3, r3
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4013      	ands	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	689a      	ldr	r2, [r3, #8]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4313      	orrs	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d123      	bne.n	8002392 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	08da      	lsrs	r2, r3, #3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3208      	adds	r2, #8
 8002352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002356:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	220f      	movs	r2, #15
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	4013      	ands	r3, r2
 800236c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	691a      	ldr	r2, [r3, #16]
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	08da      	lsrs	r2, r3, #3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3208      	adds	r2, #8
 800238c:	6939      	ldr	r1, [r7, #16]
 800238e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	2203      	movs	r2, #3
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43db      	mvns	r3, r3
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	4013      	ands	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 0203 	and.w	r2, r3, #3
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f000 80a0 	beq.w	8002514 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023d4:	4b58      	ldr	r3, [pc, #352]	; (8002538 <HAL_GPIO_Init+0x2d8>)
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	4a57      	ldr	r2, [pc, #348]	; (8002538 <HAL_GPIO_Init+0x2d8>)
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	6193      	str	r3, [r2, #24]
 80023e0:	4b55      	ldr	r3, [pc, #340]	; (8002538 <HAL_GPIO_Init+0x2d8>)
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	60bb      	str	r3, [r7, #8]
 80023ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023ec:	4a53      	ldr	r2, [pc, #332]	; (800253c <HAL_GPIO_Init+0x2dc>)
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	089b      	lsrs	r3, r3, #2
 80023f2:	3302      	adds	r3, #2
 80023f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f003 0303 	and.w	r3, r3, #3
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	220f      	movs	r2, #15
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	43db      	mvns	r3, r3
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	4013      	ands	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002416:	d019      	beq.n	800244c <HAL_GPIO_Init+0x1ec>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a49      	ldr	r2, [pc, #292]	; (8002540 <HAL_GPIO_Init+0x2e0>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d013      	beq.n	8002448 <HAL_GPIO_Init+0x1e8>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a48      	ldr	r2, [pc, #288]	; (8002544 <HAL_GPIO_Init+0x2e4>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d00d      	beq.n	8002444 <HAL_GPIO_Init+0x1e4>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a47      	ldr	r2, [pc, #284]	; (8002548 <HAL_GPIO_Init+0x2e8>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d007      	beq.n	8002440 <HAL_GPIO_Init+0x1e0>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a46      	ldr	r2, [pc, #280]	; (800254c <HAL_GPIO_Init+0x2ec>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d101      	bne.n	800243c <HAL_GPIO_Init+0x1dc>
 8002438:	2304      	movs	r3, #4
 800243a:	e008      	b.n	800244e <HAL_GPIO_Init+0x1ee>
 800243c:	2305      	movs	r3, #5
 800243e:	e006      	b.n	800244e <HAL_GPIO_Init+0x1ee>
 8002440:	2303      	movs	r3, #3
 8002442:	e004      	b.n	800244e <HAL_GPIO_Init+0x1ee>
 8002444:	2302      	movs	r3, #2
 8002446:	e002      	b.n	800244e <HAL_GPIO_Init+0x1ee>
 8002448:	2301      	movs	r3, #1
 800244a:	e000      	b.n	800244e <HAL_GPIO_Init+0x1ee>
 800244c:	2300      	movs	r3, #0
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	f002 0203 	and.w	r2, r2, #3
 8002454:	0092      	lsls	r2, r2, #2
 8002456:	4093      	lsls	r3, r2
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	4313      	orrs	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800245e:	4937      	ldr	r1, [pc, #220]	; (800253c <HAL_GPIO_Init+0x2dc>)
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	089b      	lsrs	r3, r3, #2
 8002464:	3302      	adds	r3, #2
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800246c:	4b38      	ldr	r3, [pc, #224]	; (8002550 <HAL_GPIO_Init+0x2f0>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	43db      	mvns	r3, r3
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	4013      	ands	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	4313      	orrs	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002490:	4a2f      	ldr	r2, [pc, #188]	; (8002550 <HAL_GPIO_Init+0x2f0>)
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002496:	4b2e      	ldr	r3, [pc, #184]	; (8002550 <HAL_GPIO_Init+0x2f0>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	43db      	mvns	r3, r3
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	4013      	ands	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80024ba:	4a25      	ldr	r2, [pc, #148]	; (8002550 <HAL_GPIO_Init+0x2f0>)
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024c0:	4b23      	ldr	r3, [pc, #140]	; (8002550 <HAL_GPIO_Init+0x2f0>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	43db      	mvns	r3, r3
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	4013      	ands	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80024e4:	4a1a      	ldr	r2, [pc, #104]	; (8002550 <HAL_GPIO_Init+0x2f0>)
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024ea:	4b19      	ldr	r3, [pc, #100]	; (8002550 <HAL_GPIO_Init+0x2f0>)
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	43db      	mvns	r3, r3
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	4013      	ands	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4313      	orrs	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800250e:	4a10      	ldr	r2, [pc, #64]	; (8002550 <HAL_GPIO_Init+0x2f0>)
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	3301      	adds	r3, #1
 8002518:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	fa22 f303 	lsr.w	r3, r2, r3
 8002524:	2b00      	cmp	r3, #0
 8002526:	f47f aea3 	bne.w	8002270 <HAL_GPIO_Init+0x10>
  }
}
 800252a:	bf00      	nop
 800252c:	bf00      	nop
 800252e:	371c      	adds	r7, #28
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	40021000 	.word	0x40021000
 800253c:	40010000 	.word	0x40010000
 8002540:	48000400 	.word	0x48000400
 8002544:	48000800 	.word	0x48000800
 8002548:	48000c00 	.word	0x48000c00
 800254c:	48001000 	.word	0x48001000
 8002550:	40010400 	.word	0x40010400

08002554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	807b      	strh	r3, [r7, #2]
 8002560:	4613      	mov	r3, r2
 8002562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002564:	787b      	ldrb	r3, [r7, #1]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800256a:	887a      	ldrh	r2, [r7, #2]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002570:	e002      	b.n	8002578 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002572:	887a      	ldrh	r2, [r7, #2]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	460b      	mov	r3, r1
 800258e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002596:	887a      	ldrh	r2, [r7, #2]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	4013      	ands	r3, r2
 800259c:	041a      	lsls	r2, r3, #16
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	43d9      	mvns	r1, r3
 80025a2:	887b      	ldrh	r3, [r7, #2]
 80025a4:	400b      	ands	r3, r1
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	619a      	str	r2, [r3, #24]
}
 80025ac:	bf00      	nop
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80025c2:	4b08      	ldr	r3, [pc, #32]	; (80025e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025c4:	695a      	ldr	r2, [r3, #20]
 80025c6:	88fb      	ldrh	r3, [r7, #6]
 80025c8:	4013      	ands	r3, r2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d006      	beq.n	80025dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025ce:	4a05      	ldr	r2, [pc, #20]	; (80025e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025d0:	88fb      	ldrh	r3, [r7, #6]
 80025d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025d4:	88fb      	ldrh	r3, [r7, #6]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fe f860 	bl	800069c <HAL_GPIO_EXTI_Callback>
  }
}
 80025dc:	bf00      	nop
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40010400 	.word	0x40010400

080025e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e081      	b.n	80026fe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d106      	bne.n	8002614 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f7ff f908 	bl	8001824 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2224      	movs	r2, #36	; 0x24
 8002618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 0201 	bic.w	r2, r2, #1
 800262a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002638:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002648:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d107      	bne.n	8002662 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689a      	ldr	r2, [r3, #8]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	e006      	b.n	8002670 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689a      	ldr	r2, [r3, #8]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800266e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	2b02      	cmp	r3, #2
 8002676:	d104      	bne.n	8002682 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002680:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	6812      	ldr	r2, [r2, #0]
 800268c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002690:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002694:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68da      	ldr	r2, [r3, #12]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	691a      	ldr	r2, [r3, #16]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	430a      	orrs	r2, r1
 80026be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	69d9      	ldr	r1, [r3, #28]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a1a      	ldr	r2, [r3, #32]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f042 0201 	orr.w	r2, r2, #1
 80026de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2220      	movs	r2, #32
 80026ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b20      	cmp	r3, #32
 800271a:	d138      	bne.n	800278e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002722:	2b01      	cmp	r3, #1
 8002724:	d101      	bne.n	800272a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002726:	2302      	movs	r3, #2
 8002728:	e032      	b.n	8002790 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2224      	movs	r2, #36	; 0x24
 8002736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 0201 	bic.w	r2, r2, #1
 8002748:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002758:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6819      	ldr	r1, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f042 0201 	orr.w	r2, r2, #1
 8002778:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2220      	movs	r2, #32
 800277e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800278a:	2300      	movs	r3, #0
 800278c:	e000      	b.n	8002790 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800278e:	2302      	movs	r3, #2
  }
}
 8002790:	4618      	mov	r0, r3
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b20      	cmp	r3, #32
 80027b0:	d139      	bne.n	8002826 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d101      	bne.n	80027c0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027bc:	2302      	movs	r3, #2
 80027be:	e033      	b.n	8002828 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2224      	movs	r2, #36	; 0x24
 80027cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 0201 	bic.w	r2, r2, #1
 80027de:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027ee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	021b      	lsls	r3, r3, #8
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f042 0201 	orr.w	r2, r2, #1
 8002810:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2220      	movs	r2, #32
 8002816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002822:	2300      	movs	r3, #0
 8002824:	e000      	b.n	8002828 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002826:	2302      	movs	r3, #2
  }
}
 8002828:	4618      	mov	r0, r3
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002836:	b08b      	sub	sp, #44	; 0x2c
 8002838:	af06      	add	r7, sp, #24
 800283a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e0d0      	b.n	80029e8 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d106      	bne.n	8002860 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7ff f95a 	bl	8001b14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2203      	movs	r2, #3
 8002864:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f004 f936 	bl	8006ade <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002872:	2300      	movs	r3, #0
 8002874:	73fb      	strb	r3, [r7, #15]
 8002876:	e04c      	b.n	8002912 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002878:	7bfb      	ldrb	r3, [r7, #15]
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	1c5a      	adds	r2, r3, #1
 800287e:	4613      	mov	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	440b      	add	r3, r1
 8002888:	3301      	adds	r3, #1
 800288a:	2201      	movs	r2, #1
 800288c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800288e:	7bfb      	ldrb	r3, [r7, #15]
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	1c5a      	adds	r2, r3, #1
 8002894:	4613      	mov	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	440b      	add	r3, r1
 800289e:	7bfa      	ldrb	r2, [r7, #15]
 80028a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028a2:	7bfa      	ldrb	r2, [r7, #15]
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
 80028a6:	b298      	uxth	r0, r3
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	4613      	mov	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	440b      	add	r3, r1
 80028b4:	3336      	adds	r3, #54	; 0x36
 80028b6:	4602      	mov	r2, r0
 80028b8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	1c5a      	adds	r2, r3, #1
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	440b      	add	r3, r1
 80028ca:	3303      	adds	r3, #3
 80028cc:	2200      	movs	r2, #0
 80028ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028d0:	7bfa      	ldrb	r2, [r7, #15]
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	440b      	add	r3, r1
 80028de:	3338      	adds	r3, #56	; 0x38
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028e4:	7bfa      	ldrb	r2, [r7, #15]
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	440b      	add	r3, r1
 80028f2:	333c      	adds	r3, #60	; 0x3c
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80028f8:	7bfa      	ldrb	r2, [r7, #15]
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	4613      	mov	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	440b      	add	r3, r1
 8002906:	3340      	adds	r3, #64	; 0x40
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800290c:	7bfb      	ldrb	r3, [r7, #15]
 800290e:	3301      	adds	r3, #1
 8002910:	73fb      	strb	r3, [r7, #15]
 8002912:	7bfa      	ldrb	r2, [r7, #15]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	429a      	cmp	r2, r3
 800291a:	d3ad      	bcc.n	8002878 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800291c:	2300      	movs	r3, #0
 800291e:	73fb      	strb	r3, [r7, #15]
 8002920:	e044      	b.n	80029ac <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002922:	7bfa      	ldrb	r2, [r7, #15]
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	4613      	mov	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	440b      	add	r3, r1
 8002930:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002934:	2200      	movs	r2, #0
 8002936:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002938:	7bfa      	ldrb	r2, [r7, #15]
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	440b      	add	r3, r1
 8002946:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800294a:	7bfa      	ldrb	r2, [r7, #15]
 800294c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800294e:	7bfa      	ldrb	r2, [r7, #15]
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	440b      	add	r3, r1
 800295c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002964:	7bfa      	ldrb	r2, [r7, #15]
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	4613      	mov	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	440b      	add	r3, r1
 8002972:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800297a:	7bfa      	ldrb	r2, [r7, #15]
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	4613      	mov	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	4413      	add	r3, r2
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	440b      	add	r3, r1
 8002988:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002990:	7bfa      	ldrb	r2, [r7, #15]
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	4613      	mov	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	440b      	add	r3, r1
 800299e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
 80029a8:	3301      	adds	r3, #1
 80029aa:	73fb      	strb	r3, [r7, #15]
 80029ac:	7bfa      	ldrb	r2, [r7, #15]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d3b5      	bcc.n	8002922 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	603b      	str	r3, [r7, #0]
 80029bc:	687e      	ldr	r6, [r7, #4]
 80029be:	466d      	mov	r5, sp
 80029c0:	f106 0410 	add.w	r4, r6, #16
 80029c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029c8:	6823      	ldr	r3, [r4, #0]
 80029ca:	602b      	str	r3, [r5, #0]
 80029cc:	1d33      	adds	r3, r6, #4
 80029ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029d0:	6838      	ldr	r0, [r7, #0]
 80029d2:	f004 f89f 	bl	8006b14 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3714      	adds	r7, #20
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	1d3b      	adds	r3, r7, #4
 80029fa:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029fc:	1d3b      	adds	r3, r7, #4
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d102      	bne.n	8002a0a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	f000 bef4 	b.w	80037f2 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a0a:	1d3b      	adds	r3, r7, #4
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f000 816a 	beq.w	8002cee <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002a1a:	4bb3      	ldr	r3, [pc, #716]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f003 030c 	and.w	r3, r3, #12
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d00c      	beq.n	8002a40 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a26:	4bb0      	ldr	r3, [pc, #704]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f003 030c 	and.w	r3, r3, #12
 8002a2e:	2b08      	cmp	r3, #8
 8002a30:	d159      	bne.n	8002ae6 <HAL_RCC_OscConfig+0xf6>
 8002a32:	4bad      	ldr	r3, [pc, #692]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a3e:	d152      	bne.n	8002ae6 <HAL_RCC_OscConfig+0xf6>
 8002a40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a44:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a48:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002a4c:	fa93 f3a3 	rbit	r3, r3
 8002a50:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a54:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a58:	fab3 f383 	clz	r3, r3
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	095b      	lsrs	r3, r3, #5
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	f043 0301 	orr.w	r3, r3, #1
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d102      	bne.n	8002a72 <HAL_RCC_OscConfig+0x82>
 8002a6c:	4b9e      	ldr	r3, [pc, #632]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	e015      	b.n	8002a9e <HAL_RCC_OscConfig+0xae>
 8002a72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a76:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002a7e:	fa93 f3a3 	rbit	r3, r3
 8002a82:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002a86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a8a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002a8e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002a92:	fa93 f3a3 	rbit	r3, r3
 8002a96:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002a9a:	4b93      	ldr	r3, [pc, #588]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002aa2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002aa6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002aaa:	fa92 f2a2 	rbit	r2, r2
 8002aae:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002ab2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002ab6:	fab2 f282 	clz	r2, r2
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	f042 0220 	orr.w	r2, r2, #32
 8002ac0:	b2d2      	uxtb	r2, r2
 8002ac2:	f002 021f 	and.w	r2, r2, #31
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8002acc:	4013      	ands	r3, r2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f000 810c 	beq.w	8002cec <HAL_RCC_OscConfig+0x2fc>
 8002ad4:	1d3b      	adds	r3, r7, #4
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f040 8106 	bne.w	8002cec <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	f000 be86 	b.w	80037f2 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ae6:	1d3b      	adds	r3, r7, #4
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af0:	d106      	bne.n	8002b00 <HAL_RCC_OscConfig+0x110>
 8002af2:	4b7d      	ldr	r3, [pc, #500]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a7c      	ldr	r2, [pc, #496]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002afc:	6013      	str	r3, [r2, #0]
 8002afe:	e030      	b.n	8002b62 <HAL_RCC_OscConfig+0x172>
 8002b00:	1d3b      	adds	r3, r7, #4
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10c      	bne.n	8002b24 <HAL_RCC_OscConfig+0x134>
 8002b0a:	4b77      	ldr	r3, [pc, #476]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a76      	ldr	r2, [pc, #472]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002b10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b14:	6013      	str	r3, [r2, #0]
 8002b16:	4b74      	ldr	r3, [pc, #464]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a73      	ldr	r2, [pc, #460]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002b1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	e01e      	b.n	8002b62 <HAL_RCC_OscConfig+0x172>
 8002b24:	1d3b      	adds	r3, r7, #4
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b2e:	d10c      	bne.n	8002b4a <HAL_RCC_OscConfig+0x15a>
 8002b30:	4b6d      	ldr	r3, [pc, #436]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a6c      	ldr	r2, [pc, #432]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002b36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b3a:	6013      	str	r3, [r2, #0]
 8002b3c:	4b6a      	ldr	r3, [pc, #424]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a69      	ldr	r2, [pc, #420]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b46:	6013      	str	r3, [r2, #0]
 8002b48:	e00b      	b.n	8002b62 <HAL_RCC_OscConfig+0x172>
 8002b4a:	4b67      	ldr	r3, [pc, #412]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a66      	ldr	r2, [pc, #408]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002b50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b54:	6013      	str	r3, [r2, #0]
 8002b56:	4b64      	ldr	r3, [pc, #400]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a63      	ldr	r2, [pc, #396]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002b5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b60:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b62:	4b61      	ldr	r3, [pc, #388]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b66:	f023 020f 	bic.w	r2, r3, #15
 8002b6a:	1d3b      	adds	r3, r7, #4
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	495d      	ldr	r1, [pc, #372]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b76:	1d3b      	adds	r3, r7, #4
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d059      	beq.n	8002c34 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b80:	f7ff f9b6 	bl	8001ef0 <HAL_GetTick>
 8002b84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b88:	e00a      	b.n	8002ba0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b8a:	f7ff f9b1 	bl	8001ef0 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b64      	cmp	r3, #100	; 0x64
 8002b98:	d902      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	f000 be29 	b.w	80037f2 <HAL_RCC_OscConfig+0xe02>
 8002ba0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ba4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002bac:	fa93 f3a3 	rbit	r3, r3
 8002bb0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002bb4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb8:	fab3 f383 	clz	r3, r3
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	095b      	lsrs	r3, r3, #5
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	f043 0301 	orr.w	r3, r3, #1
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d102      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x1e2>
 8002bcc:	4b46      	ldr	r3, [pc, #280]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	e015      	b.n	8002bfe <HAL_RCC_OscConfig+0x20e>
 8002bd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bd6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bda:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002bde:	fa93 f3a3 	rbit	r3, r3
 8002be2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002be6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bea:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002bee:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002bf2:	fa93 f3a3 	rbit	r3, r3
 8002bf6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002bfa:	4b3b      	ldr	r3, [pc, #236]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c02:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002c06:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002c0a:	fa92 f2a2 	rbit	r2, r2
 8002c0e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002c12:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002c16:	fab2 f282 	clz	r2, r2
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	f042 0220 	orr.w	r2, r2, #32
 8002c20:	b2d2      	uxtb	r2, r2
 8002c22:	f002 021f 	and.w	r2, r2, #31
 8002c26:	2101      	movs	r1, #1
 8002c28:	fa01 f202 	lsl.w	r2, r1, r2
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0ab      	beq.n	8002b8a <HAL_RCC_OscConfig+0x19a>
 8002c32:	e05c      	b.n	8002cee <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c34:	f7ff f95c 	bl	8001ef0 <HAL_GetTick>
 8002c38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c3c:	e00a      	b.n	8002c54 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c3e:	f7ff f957 	bl	8001ef0 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b64      	cmp	r3, #100	; 0x64
 8002c4c:	d902      	bls.n	8002c54 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	f000 bdcf 	b.w	80037f2 <HAL_RCC_OscConfig+0xe02>
 8002c54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c58:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002c60:	fa93 f3a3 	rbit	r3, r3
 8002c64:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002c68:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c6c:	fab3 f383 	clz	r3, r3
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	095b      	lsrs	r3, r3, #5
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	f043 0301 	orr.w	r3, r3, #1
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d102      	bne.n	8002c86 <HAL_RCC_OscConfig+0x296>
 8002c80:	4b19      	ldr	r3, [pc, #100]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	e015      	b.n	8002cb2 <HAL_RCC_OscConfig+0x2c2>
 8002c86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c8a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002c92:	fa93 f3a3 	rbit	r3, r3
 8002c96:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002c9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c9e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002ca2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002ca6:	fa93 f3a3 	rbit	r3, r3
 8002caa:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002cae:	4b0e      	ldr	r3, [pc, #56]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cb6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002cba:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002cbe:	fa92 f2a2 	rbit	r2, r2
 8002cc2:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002cc6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002cca:	fab2 f282 	clz	r2, r2
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	f042 0220 	orr.w	r2, r2, #32
 8002cd4:	b2d2      	uxtb	r2, r2
 8002cd6:	f002 021f 	and.w	r2, r2, #31
 8002cda:	2101      	movs	r1, #1
 8002cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1ab      	bne.n	8002c3e <HAL_RCC_OscConfig+0x24e>
 8002ce6:	e002      	b.n	8002cee <HAL_RCC_OscConfig+0x2fe>
 8002ce8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cee:	1d3b      	adds	r3, r7, #4
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 816f 	beq.w	8002fdc <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002cfe:	4bd0      	ldr	r3, [pc, #832]	; (8003040 <HAL_RCC_OscConfig+0x650>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f003 030c 	and.w	r3, r3, #12
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00b      	beq.n	8002d22 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002d0a:	4bcd      	ldr	r3, [pc, #820]	; (8003040 <HAL_RCC_OscConfig+0x650>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f003 030c 	and.w	r3, r3, #12
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d16c      	bne.n	8002df0 <HAL_RCC_OscConfig+0x400>
 8002d16:	4bca      	ldr	r3, [pc, #808]	; (8003040 <HAL_RCC_OscConfig+0x650>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d166      	bne.n	8002df0 <HAL_RCC_OscConfig+0x400>
 8002d22:	2302      	movs	r3, #2
 8002d24:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d28:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002d2c:	fa93 f3a3 	rbit	r3, r3
 8002d30:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002d34:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d38:	fab3 f383 	clz	r3, r3
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	095b      	lsrs	r3, r3, #5
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	f043 0301 	orr.w	r3, r3, #1
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d102      	bne.n	8002d52 <HAL_RCC_OscConfig+0x362>
 8002d4c:	4bbc      	ldr	r3, [pc, #752]	; (8003040 <HAL_RCC_OscConfig+0x650>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	e013      	b.n	8002d7a <HAL_RCC_OscConfig+0x38a>
 8002d52:	2302      	movs	r3, #2
 8002d54:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d58:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002d5c:	fa93 f3a3 	rbit	r3, r3
 8002d60:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002d64:	2302      	movs	r3, #2
 8002d66:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002d6a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d6e:	fa93 f3a3 	rbit	r3, r3
 8002d72:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002d76:	4bb2      	ldr	r3, [pc, #712]	; (8003040 <HAL_RCC_OscConfig+0x650>)
 8002d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002d80:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002d84:	fa92 f2a2 	rbit	r2, r2
 8002d88:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002d8c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002d90:	fab2 f282 	clz	r2, r2
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	f042 0220 	orr.w	r2, r2, #32
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	f002 021f 	and.w	r2, r2, #31
 8002da0:	2101      	movs	r1, #1
 8002da2:	fa01 f202 	lsl.w	r2, r1, r2
 8002da6:	4013      	ands	r3, r2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d007      	beq.n	8002dbc <HAL_RCC_OscConfig+0x3cc>
 8002dac:	1d3b      	adds	r3, r7, #4
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d002      	beq.n	8002dbc <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	f000 bd1b 	b.w	80037f2 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dbc:	4ba0      	ldr	r3, [pc, #640]	; (8003040 <HAL_RCC_OscConfig+0x650>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dc4:	1d3b      	adds	r3, r7, #4
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	21f8      	movs	r1, #248	; 0xf8
 8002dcc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002dd4:	fa91 f1a1 	rbit	r1, r1
 8002dd8:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002ddc:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002de0:	fab1 f181 	clz	r1, r1
 8002de4:	b2c9      	uxtb	r1, r1
 8002de6:	408b      	lsls	r3, r1
 8002de8:	4995      	ldr	r1, [pc, #596]	; (8003040 <HAL_RCC_OscConfig+0x650>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dee:	e0f5      	b.n	8002fdc <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002df0:	1d3b      	adds	r3, r7, #4
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 8085 	beq.w	8002f06 <HAL_RCC_OscConfig+0x516>
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e02:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002e06:	fa93 f3a3 	rbit	r3, r3
 8002e0a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002e0e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e12:	fab3 f383 	clz	r3, r3
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	461a      	mov	r2, r3
 8002e24:	2301      	movs	r3, #1
 8002e26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e28:	f7ff f862 	bl	8001ef0 <HAL_GetTick>
 8002e2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e30:	e00a      	b.n	8002e48 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e32:	f7ff f85d 	bl	8001ef0 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d902      	bls.n	8002e48 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	f000 bcd5 	b.w	80037f2 <HAL_RCC_OscConfig+0xe02>
 8002e48:	2302      	movs	r3, #2
 8002e4a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002e52:	fa93 f3a3 	rbit	r3, r3
 8002e56:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002e5a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e5e:	fab3 f383 	clz	r3, r3
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	095b      	lsrs	r3, r3, #5
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d102      	bne.n	8002e78 <HAL_RCC_OscConfig+0x488>
 8002e72:	4b73      	ldr	r3, [pc, #460]	; (8003040 <HAL_RCC_OscConfig+0x650>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	e013      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4b0>
 8002e78:	2302      	movs	r3, #2
 8002e7a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002e82:	fa93 f3a3 	rbit	r3, r3
 8002e86:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002e90:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002e94:	fa93 f3a3 	rbit	r3, r3
 8002e98:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002e9c:	4b68      	ldr	r3, [pc, #416]	; (8003040 <HAL_RCC_OscConfig+0x650>)
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002ea6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002eaa:	fa92 f2a2 	rbit	r2, r2
 8002eae:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002eb2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002eb6:	fab2 f282 	clz	r2, r2
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	f042 0220 	orr.w	r2, r2, #32
 8002ec0:	b2d2      	uxtb	r2, r2
 8002ec2:	f002 021f 	and.w	r2, r2, #31
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ecc:	4013      	ands	r3, r2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0af      	beq.n	8002e32 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed2:	4b5b      	ldr	r3, [pc, #364]	; (8003040 <HAL_RCC_OscConfig+0x650>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eda:	1d3b      	adds	r3, r7, #4
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	21f8      	movs	r1, #248	; 0xf8
 8002ee2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002eea:	fa91 f1a1 	rbit	r1, r1
 8002eee:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002ef2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002ef6:	fab1 f181 	clz	r1, r1
 8002efa:	b2c9      	uxtb	r1, r1
 8002efc:	408b      	lsls	r3, r1
 8002efe:	4950      	ldr	r1, [pc, #320]	; (8003040 <HAL_RCC_OscConfig+0x650>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	600b      	str	r3, [r1, #0]
 8002f04:	e06a      	b.n	8002fdc <HAL_RCC_OscConfig+0x5ec>
 8002f06:	2301      	movs	r3, #1
 8002f08:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002f10:	fa93 f3a3 	rbit	r3, r3
 8002f14:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002f18:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f1c:	fab3 f383 	clz	r3, r3
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f26:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	2300      	movs	r3, #0
 8002f30:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f32:	f7fe ffdd 	bl	8001ef0 <HAL_GetTick>
 8002f36:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f3a:	e00a      	b.n	8002f52 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f3c:	f7fe ffd8 	bl	8001ef0 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d902      	bls.n	8002f52 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	f000 bc50 	b.w	80037f2 <HAL_RCC_OscConfig+0xe02>
 8002f52:	2302      	movs	r3, #2
 8002f54:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f58:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002f5c:	fa93 f3a3 	rbit	r3, r3
 8002f60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002f64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f68:	fab3 f383 	clz	r3, r3
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	095b      	lsrs	r3, r3, #5
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	f043 0301 	orr.w	r3, r3, #1
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d102      	bne.n	8002f82 <HAL_RCC_OscConfig+0x592>
 8002f7c:	4b30      	ldr	r3, [pc, #192]	; (8003040 <HAL_RCC_OscConfig+0x650>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	e013      	b.n	8002faa <HAL_RCC_OscConfig+0x5ba>
 8002f82:	2302      	movs	r3, #2
 8002f84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002f8c:	fa93 f3a3 	rbit	r3, r3
 8002f90:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002f94:	2302      	movs	r3, #2
 8002f96:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002f9a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002f9e:	fa93 f3a3 	rbit	r3, r3
 8002fa2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002fa6:	4b26      	ldr	r3, [pc, #152]	; (8003040 <HAL_RCC_OscConfig+0x650>)
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002faa:	2202      	movs	r2, #2
 8002fac:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002fb0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002fb4:	fa92 f2a2 	rbit	r2, r2
 8002fb8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002fbc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002fc0:	fab2 f282 	clz	r2, r2
 8002fc4:	b2d2      	uxtb	r2, r2
 8002fc6:	f042 0220 	orr.w	r2, r2, #32
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	f002 021f 	and.w	r2, r2, #31
 8002fd0:	2101      	movs	r1, #1
 8002fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1af      	bne.n	8002f3c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fdc:	1d3b      	adds	r3, r7, #4
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0308 	and.w	r3, r3, #8
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 80da 	beq.w	80031a0 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fec:	1d3b      	adds	r3, r7, #4
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d069      	beq.n	80030ca <HAL_RCC_OscConfig+0x6da>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003000:	fa93 f3a3 	rbit	r3, r3
 8003004:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003008:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800300c:	fab3 f383 	clz	r3, r3
 8003010:	b2db      	uxtb	r3, r3
 8003012:	461a      	mov	r2, r3
 8003014:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <HAL_RCC_OscConfig+0x654>)
 8003016:	4413      	add	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	461a      	mov	r2, r3
 800301c:	2301      	movs	r3, #1
 800301e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003020:	f7fe ff66 	bl	8001ef0 <HAL_GetTick>
 8003024:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003028:	e00e      	b.n	8003048 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800302a:	f7fe ff61 	bl	8001ef0 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d906      	bls.n	8003048 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e3d9      	b.n	80037f2 <HAL_RCC_OscConfig+0xe02>
 800303e:	bf00      	nop
 8003040:	40021000 	.word	0x40021000
 8003044:	10908120 	.word	0x10908120
 8003048:	2302      	movs	r3, #2
 800304a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003052:	fa93 f3a3 	rbit	r3, r3
 8003056:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800305a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800305e:	2202      	movs	r2, #2
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	fa93 f2a3 	rbit	r2, r3
 800306c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003076:	2202      	movs	r2, #2
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	fa93 f2a3 	rbit	r2, r3
 8003084:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003088:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800308a:	4ba5      	ldr	r3, [pc, #660]	; (8003320 <HAL_RCC_OscConfig+0x930>)
 800308c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800308e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003092:	2102      	movs	r1, #2
 8003094:	6019      	str	r1, [r3, #0]
 8003096:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	fa93 f1a3 	rbit	r1, r3
 80030a0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80030a4:	6019      	str	r1, [r3, #0]
  return result;
 80030a6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	fab3 f383 	clz	r3, r3
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	f003 031f 	and.w	r3, r3, #31
 80030bc:	2101      	movs	r1, #1
 80030be:	fa01 f303 	lsl.w	r3, r1, r3
 80030c2:	4013      	ands	r3, r2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0b0      	beq.n	800302a <HAL_RCC_OscConfig+0x63a>
 80030c8:	e06a      	b.n	80031a0 <HAL_RCC_OscConfig+0x7b0>
 80030ca:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80030ce:	2201      	movs	r2, #1
 80030d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	fa93 f2a3 	rbit	r2, r3
 80030dc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80030e0:	601a      	str	r2, [r3, #0]
  return result;
 80030e2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80030e6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030e8:	fab3 f383 	clz	r3, r3
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	461a      	mov	r2, r3
 80030f0:	4b8c      	ldr	r3, [pc, #560]	; (8003324 <HAL_RCC_OscConfig+0x934>)
 80030f2:	4413      	add	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	461a      	mov	r2, r3
 80030f8:	2300      	movs	r3, #0
 80030fa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030fc:	f7fe fef8 	bl	8001ef0 <HAL_GetTick>
 8003100:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003104:	e009      	b.n	800311a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003106:	f7fe fef3 	bl	8001ef0 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e36b      	b.n	80037f2 <HAL_RCC_OscConfig+0xe02>
 800311a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800311e:	2202      	movs	r2, #2
 8003120:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003122:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	fa93 f2a3 	rbit	r2, r3
 800312c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003130:	601a      	str	r2, [r3, #0]
 8003132:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003136:	2202      	movs	r2, #2
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	fa93 f2a3 	rbit	r2, r3
 8003144:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800314e:	2202      	movs	r2, #2
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	fa93 f2a3 	rbit	r2, r3
 800315c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003160:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003162:	4b6f      	ldr	r3, [pc, #444]	; (8003320 <HAL_RCC_OscConfig+0x930>)
 8003164:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003166:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800316a:	2102      	movs	r1, #2
 800316c:	6019      	str	r1, [r3, #0]
 800316e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	fa93 f1a3 	rbit	r1, r3
 8003178:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800317c:	6019      	str	r1, [r3, #0]
  return result;
 800317e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	fab3 f383 	clz	r3, r3
 8003188:	b2db      	uxtb	r3, r3
 800318a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800318e:	b2db      	uxtb	r3, r3
 8003190:	f003 031f 	and.w	r3, r3, #31
 8003194:	2101      	movs	r1, #1
 8003196:	fa01 f303 	lsl.w	r3, r1, r3
 800319a:	4013      	ands	r3, r2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1b2      	bne.n	8003106 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031a0:	1d3b      	adds	r3, r7, #4
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0304 	and.w	r3, r3, #4
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 8158 	beq.w	8003460 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031b0:	2300      	movs	r3, #0
 80031b2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031b6:	4b5a      	ldr	r3, [pc, #360]	; (8003320 <HAL_RCC_OscConfig+0x930>)
 80031b8:	69db      	ldr	r3, [r3, #28]
 80031ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d112      	bne.n	80031e8 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031c2:	4b57      	ldr	r3, [pc, #348]	; (8003320 <HAL_RCC_OscConfig+0x930>)
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	4a56      	ldr	r2, [pc, #344]	; (8003320 <HAL_RCC_OscConfig+0x930>)
 80031c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031cc:	61d3      	str	r3, [r2, #28]
 80031ce:	4b54      	ldr	r3, [pc, #336]	; (8003320 <HAL_RCC_OscConfig+0x930>)
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80031d6:	f107 0308 	add.w	r3, r7, #8
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	f107 0308 	add.w	r3, r7, #8
 80031e0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80031e2:	2301      	movs	r3, #1
 80031e4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e8:	4b4f      	ldr	r3, [pc, #316]	; (8003328 <HAL_RCC_OscConfig+0x938>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d11a      	bne.n	800322a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031f4:	4b4c      	ldr	r3, [pc, #304]	; (8003328 <HAL_RCC_OscConfig+0x938>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a4b      	ldr	r2, [pc, #300]	; (8003328 <HAL_RCC_OscConfig+0x938>)
 80031fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031fe:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003200:	f7fe fe76 	bl	8001ef0 <HAL_GetTick>
 8003204:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003208:	e009      	b.n	800321e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800320a:	f7fe fe71 	bl	8001ef0 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b64      	cmp	r3, #100	; 0x64
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e2e9      	b.n	80037f2 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321e:	4b42      	ldr	r3, [pc, #264]	; (8003328 <HAL_RCC_OscConfig+0x938>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0ef      	beq.n	800320a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800322a:	1d3b      	adds	r3, r7, #4
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d106      	bne.n	8003242 <HAL_RCC_OscConfig+0x852>
 8003234:	4b3a      	ldr	r3, [pc, #232]	; (8003320 <HAL_RCC_OscConfig+0x930>)
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	4a39      	ldr	r2, [pc, #228]	; (8003320 <HAL_RCC_OscConfig+0x930>)
 800323a:	f043 0301 	orr.w	r3, r3, #1
 800323e:	6213      	str	r3, [r2, #32]
 8003240:	e02f      	b.n	80032a2 <HAL_RCC_OscConfig+0x8b2>
 8003242:	1d3b      	adds	r3, r7, #4
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10c      	bne.n	8003266 <HAL_RCC_OscConfig+0x876>
 800324c:	4b34      	ldr	r3, [pc, #208]	; (8003320 <HAL_RCC_OscConfig+0x930>)
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	4a33      	ldr	r2, [pc, #204]	; (8003320 <HAL_RCC_OscConfig+0x930>)
 8003252:	f023 0301 	bic.w	r3, r3, #1
 8003256:	6213      	str	r3, [r2, #32]
 8003258:	4b31      	ldr	r3, [pc, #196]	; (8003320 <HAL_RCC_OscConfig+0x930>)
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	4a30      	ldr	r2, [pc, #192]	; (8003320 <HAL_RCC_OscConfig+0x930>)
 800325e:	f023 0304 	bic.w	r3, r3, #4
 8003262:	6213      	str	r3, [r2, #32]
 8003264:	e01d      	b.n	80032a2 <HAL_RCC_OscConfig+0x8b2>
 8003266:	1d3b      	adds	r3, r7, #4
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	2b05      	cmp	r3, #5
 800326e:	d10c      	bne.n	800328a <HAL_RCC_OscConfig+0x89a>
 8003270:	4b2b      	ldr	r3, [pc, #172]	; (8003320 <HAL_RCC_OscConfig+0x930>)
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	4a2a      	ldr	r2, [pc, #168]	; (8003320 <HAL_RCC_OscConfig+0x930>)
 8003276:	f043 0304 	orr.w	r3, r3, #4
 800327a:	6213      	str	r3, [r2, #32]
 800327c:	4b28      	ldr	r3, [pc, #160]	; (8003320 <HAL_RCC_OscConfig+0x930>)
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	4a27      	ldr	r2, [pc, #156]	; (8003320 <HAL_RCC_OscConfig+0x930>)
 8003282:	f043 0301 	orr.w	r3, r3, #1
 8003286:	6213      	str	r3, [r2, #32]
 8003288:	e00b      	b.n	80032a2 <HAL_RCC_OscConfig+0x8b2>
 800328a:	4b25      	ldr	r3, [pc, #148]	; (8003320 <HAL_RCC_OscConfig+0x930>)
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	4a24      	ldr	r2, [pc, #144]	; (8003320 <HAL_RCC_OscConfig+0x930>)
 8003290:	f023 0301 	bic.w	r3, r3, #1
 8003294:	6213      	str	r3, [r2, #32]
 8003296:	4b22      	ldr	r3, [pc, #136]	; (8003320 <HAL_RCC_OscConfig+0x930>)
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	4a21      	ldr	r2, [pc, #132]	; (8003320 <HAL_RCC_OscConfig+0x930>)
 800329c:	f023 0304 	bic.w	r3, r3, #4
 80032a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032a2:	1d3b      	adds	r3, r7, #4
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d06b      	beq.n	8003384 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ac:	f7fe fe20 	bl	8001ef0 <HAL_GetTick>
 80032b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032b4:	e00b      	b.n	80032ce <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032b6:	f7fe fe1b 	bl	8001ef0 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e291      	b.n	80037f2 <HAL_RCC_OscConfig+0xe02>
 80032ce:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80032d2:	2202      	movs	r2, #2
 80032d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	fa93 f2a3 	rbit	r2, r3
 80032e0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80032ea:	2202      	movs	r2, #2
 80032ec:	601a      	str	r2, [r3, #0]
 80032ee:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	fa93 f2a3 	rbit	r2, r3
 80032f8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80032fc:	601a      	str	r2, [r3, #0]
  return result;
 80032fe:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003302:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003304:	fab3 f383 	clz	r3, r3
 8003308:	b2db      	uxtb	r3, r3
 800330a:	095b      	lsrs	r3, r3, #5
 800330c:	b2db      	uxtb	r3, r3
 800330e:	f043 0302 	orr.w	r3, r3, #2
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d109      	bne.n	800332c <HAL_RCC_OscConfig+0x93c>
 8003318:	4b01      	ldr	r3, [pc, #4]	; (8003320 <HAL_RCC_OscConfig+0x930>)
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	e014      	b.n	8003348 <HAL_RCC_OscConfig+0x958>
 800331e:	bf00      	nop
 8003320:	40021000 	.word	0x40021000
 8003324:	10908120 	.word	0x10908120
 8003328:	40007000 	.word	0x40007000
 800332c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003330:	2202      	movs	r2, #2
 8003332:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003334:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	fa93 f2a3 	rbit	r2, r3
 800333e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	4bbb      	ldr	r3, [pc, #748]	; (8003634 <HAL_RCC_OscConfig+0xc44>)
 8003346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003348:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800334c:	2102      	movs	r1, #2
 800334e:	6011      	str	r1, [r2, #0]
 8003350:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003354:	6812      	ldr	r2, [r2, #0]
 8003356:	fa92 f1a2 	rbit	r1, r2
 800335a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800335e:	6011      	str	r1, [r2, #0]
  return result;
 8003360:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003364:	6812      	ldr	r2, [r2, #0]
 8003366:	fab2 f282 	clz	r2, r2
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	f002 021f 	and.w	r2, r2, #31
 8003376:	2101      	movs	r1, #1
 8003378:	fa01 f202 	lsl.w	r2, r1, r2
 800337c:	4013      	ands	r3, r2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d099      	beq.n	80032b6 <HAL_RCC_OscConfig+0x8c6>
 8003382:	e063      	b.n	800344c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003384:	f7fe fdb4 	bl	8001ef0 <HAL_GetTick>
 8003388:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800338c:	e00b      	b.n	80033a6 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800338e:	f7fe fdaf 	bl	8001ef0 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	f241 3288 	movw	r2, #5000	; 0x1388
 800339e:	4293      	cmp	r3, r2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e225      	b.n	80037f2 <HAL_RCC_OscConfig+0xe02>
 80033a6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80033aa:	2202      	movs	r2, #2
 80033ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	fa93 f2a3 	rbit	r2, r3
 80033b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80033c2:	2202      	movs	r2, #2
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	fa93 f2a3 	rbit	r2, r3
 80033d0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80033d4:	601a      	str	r2, [r3, #0]
  return result;
 80033d6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80033da:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033dc:	fab3 f383 	clz	r3, r3
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	095b      	lsrs	r3, r3, #5
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	f043 0302 	orr.w	r3, r3, #2
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d102      	bne.n	80033f6 <HAL_RCC_OscConfig+0xa06>
 80033f0:	4b90      	ldr	r3, [pc, #576]	; (8003634 <HAL_RCC_OscConfig+0xc44>)
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	e00d      	b.n	8003412 <HAL_RCC_OscConfig+0xa22>
 80033f6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80033fa:	2202      	movs	r2, #2
 80033fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fe:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	fa93 f2a3 	rbit	r2, r3
 8003408:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	4b89      	ldr	r3, [pc, #548]	; (8003634 <HAL_RCC_OscConfig+0xc44>)
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003416:	2102      	movs	r1, #2
 8003418:	6011      	str	r1, [r2, #0]
 800341a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800341e:	6812      	ldr	r2, [r2, #0]
 8003420:	fa92 f1a2 	rbit	r1, r2
 8003424:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003428:	6011      	str	r1, [r2, #0]
  return result;
 800342a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800342e:	6812      	ldr	r2, [r2, #0]
 8003430:	fab2 f282 	clz	r2, r2
 8003434:	b2d2      	uxtb	r2, r2
 8003436:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800343a:	b2d2      	uxtb	r2, r2
 800343c:	f002 021f 	and.w	r2, r2, #31
 8003440:	2101      	movs	r1, #1
 8003442:	fa01 f202 	lsl.w	r2, r1, r2
 8003446:	4013      	ands	r3, r2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1a0      	bne.n	800338e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800344c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003450:	2b01      	cmp	r3, #1
 8003452:	d105      	bne.n	8003460 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003454:	4b77      	ldr	r3, [pc, #476]	; (8003634 <HAL_RCC_OscConfig+0xc44>)
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	4a76      	ldr	r2, [pc, #472]	; (8003634 <HAL_RCC_OscConfig+0xc44>)
 800345a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800345e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003460:	1d3b      	adds	r3, r7, #4
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 81c2 	beq.w	80037f0 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800346c:	4b71      	ldr	r3, [pc, #452]	; (8003634 <HAL_RCC_OscConfig+0xc44>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 030c 	and.w	r3, r3, #12
 8003474:	2b08      	cmp	r3, #8
 8003476:	f000 819c 	beq.w	80037b2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800347a:	1d3b      	adds	r3, r7, #4
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	2b02      	cmp	r3, #2
 8003482:	f040 8114 	bne.w	80036ae <HAL_RCC_OscConfig+0xcbe>
 8003486:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800348a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800348e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003490:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	fa93 f2a3 	rbit	r2, r3
 800349a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800349e:	601a      	str	r2, [r3, #0]
  return result;
 80034a0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80034a4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034a6:	fab3 f383 	clz	r3, r3
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	461a      	mov	r2, r3
 80034b8:	2300      	movs	r3, #0
 80034ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034bc:	f7fe fd18 	bl	8001ef0 <HAL_GetTick>
 80034c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034c4:	e009      	b.n	80034da <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034c6:	f7fe fd13 	bl	8001ef0 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e18b      	b.n	80037f2 <HAL_RCC_OscConfig+0xe02>
 80034da:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80034de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	fa93 f2a3 	rbit	r2, r3
 80034ee:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80034f2:	601a      	str	r2, [r3, #0]
  return result;
 80034f4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80034f8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034fa:	fab3 f383 	clz	r3, r3
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	095b      	lsrs	r3, r3, #5
 8003502:	b2db      	uxtb	r3, r3
 8003504:	f043 0301 	orr.w	r3, r3, #1
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b01      	cmp	r3, #1
 800350c:	d102      	bne.n	8003514 <HAL_RCC_OscConfig+0xb24>
 800350e:	4b49      	ldr	r3, [pc, #292]	; (8003634 <HAL_RCC_OscConfig+0xc44>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	e01b      	b.n	800354c <HAL_RCC_OscConfig+0xb5c>
 8003514:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003518:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800351c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	fa93 f2a3 	rbit	r2, r3
 8003528:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003532:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	fa93 f2a3 	rbit	r2, r3
 8003542:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	4b3a      	ldr	r3, [pc, #232]	; (8003634 <HAL_RCC_OscConfig+0xc44>)
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003550:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003554:	6011      	str	r1, [r2, #0]
 8003556:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800355a:	6812      	ldr	r2, [r2, #0]
 800355c:	fa92 f1a2 	rbit	r1, r2
 8003560:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003564:	6011      	str	r1, [r2, #0]
  return result;
 8003566:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800356a:	6812      	ldr	r2, [r2, #0]
 800356c:	fab2 f282 	clz	r2, r2
 8003570:	b2d2      	uxtb	r2, r2
 8003572:	f042 0220 	orr.w	r2, r2, #32
 8003576:	b2d2      	uxtb	r2, r2
 8003578:	f002 021f 	and.w	r2, r2, #31
 800357c:	2101      	movs	r1, #1
 800357e:	fa01 f202 	lsl.w	r2, r1, r2
 8003582:	4013      	ands	r3, r2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d19e      	bne.n	80034c6 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003588:	4b2a      	ldr	r3, [pc, #168]	; (8003634 <HAL_RCC_OscConfig+0xc44>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003590:	1d3b      	adds	r3, r7, #4
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003596:	1d3b      	adds	r3, r7, #4
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	430b      	orrs	r3, r1
 800359e:	4925      	ldr	r1, [pc, #148]	; (8003634 <HAL_RCC_OscConfig+0xc44>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	604b      	str	r3, [r1, #4]
 80035a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80035a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80035ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	fa93 f2a3 	rbit	r2, r3
 80035b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80035bc:	601a      	str	r2, [r3, #0]
  return result;
 80035be:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80035c2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035c4:	fab3 f383 	clz	r3, r3
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035ce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	461a      	mov	r2, r3
 80035d6:	2301      	movs	r3, #1
 80035d8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035da:	f7fe fc89 	bl	8001ef0 <HAL_GetTick>
 80035de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035e2:	e009      	b.n	80035f8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035e4:	f7fe fc84 	bl	8001ef0 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e0fc      	b.n	80037f2 <HAL_RCC_OscConfig+0xe02>
 80035f8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80035fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003600:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003602:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	fa93 f2a3 	rbit	r2, r3
 800360c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003610:	601a      	str	r2, [r3, #0]
  return result;
 8003612:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003616:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003618:	fab3 f383 	clz	r3, r3
 800361c:	b2db      	uxtb	r3, r3
 800361e:	095b      	lsrs	r3, r3, #5
 8003620:	b2db      	uxtb	r3, r3
 8003622:	f043 0301 	orr.w	r3, r3, #1
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b01      	cmp	r3, #1
 800362a:	d105      	bne.n	8003638 <HAL_RCC_OscConfig+0xc48>
 800362c:	4b01      	ldr	r3, [pc, #4]	; (8003634 <HAL_RCC_OscConfig+0xc44>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	e01e      	b.n	8003670 <HAL_RCC_OscConfig+0xc80>
 8003632:	bf00      	nop
 8003634:	40021000 	.word	0x40021000
 8003638:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800363c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003640:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003642:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	fa93 f2a3 	rbit	r2, r3
 800364c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003656:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	fa93 f2a3 	rbit	r2, r3
 8003666:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	4b63      	ldr	r3, [pc, #396]	; (80037fc <HAL_RCC_OscConfig+0xe0c>)
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003674:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003678:	6011      	str	r1, [r2, #0]
 800367a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800367e:	6812      	ldr	r2, [r2, #0]
 8003680:	fa92 f1a2 	rbit	r1, r2
 8003684:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003688:	6011      	str	r1, [r2, #0]
  return result;
 800368a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800368e:	6812      	ldr	r2, [r2, #0]
 8003690:	fab2 f282 	clz	r2, r2
 8003694:	b2d2      	uxtb	r2, r2
 8003696:	f042 0220 	orr.w	r2, r2, #32
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	f002 021f 	and.w	r2, r2, #31
 80036a0:	2101      	movs	r1, #1
 80036a2:	fa01 f202 	lsl.w	r2, r1, r2
 80036a6:	4013      	ands	r3, r2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d09b      	beq.n	80035e4 <HAL_RCC_OscConfig+0xbf4>
 80036ac:	e0a0      	b.n	80037f0 <HAL_RCC_OscConfig+0xe00>
 80036ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80036b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80036b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	fa93 f2a3 	rbit	r2, r3
 80036c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036c6:	601a      	str	r2, [r3, #0]
  return result;
 80036c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036cc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ce:	fab3 f383 	clz	r3, r3
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	461a      	mov	r2, r3
 80036e0:	2300      	movs	r3, #0
 80036e2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e4:	f7fe fc04 	bl	8001ef0 <HAL_GetTick>
 80036e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ec:	e009      	b.n	8003702 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ee:	f7fe fbff 	bl	8001ef0 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e077      	b.n	80037f2 <HAL_RCC_OscConfig+0xe02>
 8003702:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003706:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800370a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	fa93 f2a3 	rbit	r2, r3
 8003716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800371a:	601a      	str	r2, [r3, #0]
  return result;
 800371c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003720:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003722:	fab3 f383 	clz	r3, r3
 8003726:	b2db      	uxtb	r3, r3
 8003728:	095b      	lsrs	r3, r3, #5
 800372a:	b2db      	uxtb	r3, r3
 800372c:	f043 0301 	orr.w	r3, r3, #1
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b01      	cmp	r3, #1
 8003734:	d102      	bne.n	800373c <HAL_RCC_OscConfig+0xd4c>
 8003736:	4b31      	ldr	r3, [pc, #196]	; (80037fc <HAL_RCC_OscConfig+0xe0c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	e01b      	b.n	8003774 <HAL_RCC_OscConfig+0xd84>
 800373c:	f107 0320 	add.w	r3, r7, #32
 8003740:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003744:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003746:	f107 0320 	add.w	r3, r7, #32
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	fa93 f2a3 	rbit	r2, r3
 8003750:	f107 031c 	add.w	r3, r7, #28
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	f107 0318 	add.w	r3, r7, #24
 800375a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	f107 0318 	add.w	r3, r7, #24
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	fa93 f2a3 	rbit	r2, r3
 800376a:	f107 0314 	add.w	r3, r7, #20
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	4b22      	ldr	r3, [pc, #136]	; (80037fc <HAL_RCC_OscConfig+0xe0c>)
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	f107 0210 	add.w	r2, r7, #16
 8003778:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800377c:	6011      	str	r1, [r2, #0]
 800377e:	f107 0210 	add.w	r2, r7, #16
 8003782:	6812      	ldr	r2, [r2, #0]
 8003784:	fa92 f1a2 	rbit	r1, r2
 8003788:	f107 020c 	add.w	r2, r7, #12
 800378c:	6011      	str	r1, [r2, #0]
  return result;
 800378e:	f107 020c 	add.w	r2, r7, #12
 8003792:	6812      	ldr	r2, [r2, #0]
 8003794:	fab2 f282 	clz	r2, r2
 8003798:	b2d2      	uxtb	r2, r2
 800379a:	f042 0220 	orr.w	r2, r2, #32
 800379e:	b2d2      	uxtb	r2, r2
 80037a0:	f002 021f 	and.w	r2, r2, #31
 80037a4:	2101      	movs	r1, #1
 80037a6:	fa01 f202 	lsl.w	r2, r1, r2
 80037aa:	4013      	ands	r3, r2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d19e      	bne.n	80036ee <HAL_RCC_OscConfig+0xcfe>
 80037b0:	e01e      	b.n	80037f0 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037b2:	1d3b      	adds	r3, r7, #4
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e018      	b.n	80037f2 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037c0:	4b0e      	ldr	r3, [pc, #56]	; (80037fc <HAL_RCC_OscConfig+0xe0c>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80037c8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80037cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037d0:	1d3b      	adds	r3, r7, #4
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d108      	bne.n	80037ec <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80037da:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80037de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80037e2:	1d3b      	adds	r3, r7, #4
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d001      	beq.n	80037f0 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e000      	b.n	80037f2 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40021000 	.word	0x40021000

08003800 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b09e      	sub	sp, #120	; 0x78
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800380a:	2300      	movs	r3, #0
 800380c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d101      	bne.n	8003818 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e162      	b.n	8003ade <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003818:	4b90      	ldr	r3, [pc, #576]	; (8003a5c <HAL_RCC_ClockConfig+0x25c>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	429a      	cmp	r2, r3
 8003824:	d910      	bls.n	8003848 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003826:	4b8d      	ldr	r3, [pc, #564]	; (8003a5c <HAL_RCC_ClockConfig+0x25c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f023 0207 	bic.w	r2, r3, #7
 800382e:	498b      	ldr	r1, [pc, #556]	; (8003a5c <HAL_RCC_ClockConfig+0x25c>)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	4313      	orrs	r3, r2
 8003834:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003836:	4b89      	ldr	r3, [pc, #548]	; (8003a5c <HAL_RCC_ClockConfig+0x25c>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0307 	and.w	r3, r3, #7
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	429a      	cmp	r2, r3
 8003842:	d001      	beq.n	8003848 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e14a      	b.n	8003ade <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d008      	beq.n	8003866 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003854:	4b82      	ldr	r3, [pc, #520]	; (8003a60 <HAL_RCC_ClockConfig+0x260>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	497f      	ldr	r1, [pc, #508]	; (8003a60 <HAL_RCC_ClockConfig+0x260>)
 8003862:	4313      	orrs	r3, r2
 8003864:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 80dc 	beq.w	8003a2c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d13c      	bne.n	80038f6 <HAL_RCC_ClockConfig+0xf6>
 800387c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003880:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003882:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003884:	fa93 f3a3 	rbit	r3, r3
 8003888:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800388a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388c:	fab3 f383 	clz	r3, r3
 8003890:	b2db      	uxtb	r3, r3
 8003892:	095b      	lsrs	r3, r3, #5
 8003894:	b2db      	uxtb	r3, r3
 8003896:	f043 0301 	orr.w	r3, r3, #1
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b01      	cmp	r3, #1
 800389e:	d102      	bne.n	80038a6 <HAL_RCC_ClockConfig+0xa6>
 80038a0:	4b6f      	ldr	r3, [pc, #444]	; (8003a60 <HAL_RCC_ClockConfig+0x260>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	e00f      	b.n	80038c6 <HAL_RCC_ClockConfig+0xc6>
 80038a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038ae:	fa93 f3a3 	rbit	r3, r3
 80038b2:	667b      	str	r3, [r7, #100]	; 0x64
 80038b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038b8:	663b      	str	r3, [r7, #96]	; 0x60
 80038ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038bc:	fa93 f3a3 	rbit	r3, r3
 80038c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038c2:	4b67      	ldr	r3, [pc, #412]	; (8003a60 <HAL_RCC_ClockConfig+0x260>)
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80038ca:	65ba      	str	r2, [r7, #88]	; 0x58
 80038cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038ce:	fa92 f2a2 	rbit	r2, r2
 80038d2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80038d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80038d6:	fab2 f282 	clz	r2, r2
 80038da:	b2d2      	uxtb	r2, r2
 80038dc:	f042 0220 	orr.w	r2, r2, #32
 80038e0:	b2d2      	uxtb	r2, r2
 80038e2:	f002 021f 	and.w	r2, r2, #31
 80038e6:	2101      	movs	r1, #1
 80038e8:	fa01 f202 	lsl.w	r2, r1, r2
 80038ec:	4013      	ands	r3, r2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d17b      	bne.n	80039ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e0f3      	b.n	8003ade <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d13c      	bne.n	8003978 <HAL_RCC_ClockConfig+0x178>
 80038fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003902:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003906:	fa93 f3a3 	rbit	r3, r3
 800390a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800390c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800390e:	fab3 f383 	clz	r3, r3
 8003912:	b2db      	uxtb	r3, r3
 8003914:	095b      	lsrs	r3, r3, #5
 8003916:	b2db      	uxtb	r3, r3
 8003918:	f043 0301 	orr.w	r3, r3, #1
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b01      	cmp	r3, #1
 8003920:	d102      	bne.n	8003928 <HAL_RCC_ClockConfig+0x128>
 8003922:	4b4f      	ldr	r3, [pc, #316]	; (8003a60 <HAL_RCC_ClockConfig+0x260>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	e00f      	b.n	8003948 <HAL_RCC_ClockConfig+0x148>
 8003928:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800392c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003930:	fa93 f3a3 	rbit	r3, r3
 8003934:	647b      	str	r3, [r7, #68]	; 0x44
 8003936:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800393a:	643b      	str	r3, [r7, #64]	; 0x40
 800393c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800393e:	fa93 f3a3 	rbit	r3, r3
 8003942:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003944:	4b46      	ldr	r3, [pc, #280]	; (8003a60 <HAL_RCC_ClockConfig+0x260>)
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800394c:	63ba      	str	r2, [r7, #56]	; 0x38
 800394e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003950:	fa92 f2a2 	rbit	r2, r2
 8003954:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003956:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003958:	fab2 f282 	clz	r2, r2
 800395c:	b2d2      	uxtb	r2, r2
 800395e:	f042 0220 	orr.w	r2, r2, #32
 8003962:	b2d2      	uxtb	r2, r2
 8003964:	f002 021f 	and.w	r2, r2, #31
 8003968:	2101      	movs	r1, #1
 800396a:	fa01 f202 	lsl.w	r2, r1, r2
 800396e:	4013      	ands	r3, r2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d13a      	bne.n	80039ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e0b2      	b.n	8003ade <HAL_RCC_ClockConfig+0x2de>
 8003978:	2302      	movs	r3, #2
 800397a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397e:	fa93 f3a3 	rbit	r3, r3
 8003982:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003986:	fab3 f383 	clz	r3, r3
 800398a:	b2db      	uxtb	r3, r3
 800398c:	095b      	lsrs	r3, r3, #5
 800398e:	b2db      	uxtb	r3, r3
 8003990:	f043 0301 	orr.w	r3, r3, #1
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b01      	cmp	r3, #1
 8003998:	d102      	bne.n	80039a0 <HAL_RCC_ClockConfig+0x1a0>
 800399a:	4b31      	ldr	r3, [pc, #196]	; (8003a60 <HAL_RCC_ClockConfig+0x260>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	e00d      	b.n	80039bc <HAL_RCC_ClockConfig+0x1bc>
 80039a0:	2302      	movs	r3, #2
 80039a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a6:	fa93 f3a3 	rbit	r3, r3
 80039aa:	627b      	str	r3, [r7, #36]	; 0x24
 80039ac:	2302      	movs	r3, #2
 80039ae:	623b      	str	r3, [r7, #32]
 80039b0:	6a3b      	ldr	r3, [r7, #32]
 80039b2:	fa93 f3a3 	rbit	r3, r3
 80039b6:	61fb      	str	r3, [r7, #28]
 80039b8:	4b29      	ldr	r3, [pc, #164]	; (8003a60 <HAL_RCC_ClockConfig+0x260>)
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039bc:	2202      	movs	r2, #2
 80039be:	61ba      	str	r2, [r7, #24]
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	fa92 f2a2 	rbit	r2, r2
 80039c6:	617a      	str	r2, [r7, #20]
  return result;
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	fab2 f282 	clz	r2, r2
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	f042 0220 	orr.w	r2, r2, #32
 80039d4:	b2d2      	uxtb	r2, r2
 80039d6:	f002 021f 	and.w	r2, r2, #31
 80039da:	2101      	movs	r1, #1
 80039dc:	fa01 f202 	lsl.w	r2, r1, r2
 80039e0:	4013      	ands	r3, r2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e079      	b.n	8003ade <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ea:	4b1d      	ldr	r3, [pc, #116]	; (8003a60 <HAL_RCC_ClockConfig+0x260>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f023 0203 	bic.w	r2, r3, #3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	491a      	ldr	r1, [pc, #104]	; (8003a60 <HAL_RCC_ClockConfig+0x260>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039fc:	f7fe fa78 	bl	8001ef0 <HAL_GetTick>
 8003a00:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a02:	e00a      	b.n	8003a1a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a04:	f7fe fa74 	bl	8001ef0 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e061      	b.n	8003ade <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a1a:	4b11      	ldr	r3, [pc, #68]	; (8003a60 <HAL_RCC_ClockConfig+0x260>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f003 020c 	and.w	r2, r3, #12
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d1eb      	bne.n	8003a04 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a2c:	4b0b      	ldr	r3, [pc, #44]	; (8003a5c <HAL_RCC_ClockConfig+0x25c>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d214      	bcs.n	8003a64 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3a:	4b08      	ldr	r3, [pc, #32]	; (8003a5c <HAL_RCC_ClockConfig+0x25c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f023 0207 	bic.w	r2, r3, #7
 8003a42:	4906      	ldr	r1, [pc, #24]	; (8003a5c <HAL_RCC_ClockConfig+0x25c>)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4a:	4b04      	ldr	r3, [pc, #16]	; (8003a5c <HAL_RCC_ClockConfig+0x25c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d005      	beq.n	8003a64 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e040      	b.n	8003ade <HAL_RCC_ClockConfig+0x2de>
 8003a5c:	40022000 	.word	0x40022000
 8003a60:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d008      	beq.n	8003a82 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a70:	4b1d      	ldr	r3, [pc, #116]	; (8003ae8 <HAL_RCC_ClockConfig+0x2e8>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	491a      	ldr	r1, [pc, #104]	; (8003ae8 <HAL_RCC_ClockConfig+0x2e8>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0308 	and.w	r3, r3, #8
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d009      	beq.n	8003aa2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a8e:	4b16      	ldr	r3, [pc, #88]	; (8003ae8 <HAL_RCC_ClockConfig+0x2e8>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	4912      	ldr	r1, [pc, #72]	; (8003ae8 <HAL_RCC_ClockConfig+0x2e8>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003aa2:	f000 f829 	bl	8003af8 <HAL_RCC_GetSysClockFreq>
 8003aa6:	4601      	mov	r1, r0
 8003aa8:	4b0f      	ldr	r3, [pc, #60]	; (8003ae8 <HAL_RCC_ClockConfig+0x2e8>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ab0:	22f0      	movs	r2, #240	; 0xf0
 8003ab2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	fa92 f2a2 	rbit	r2, r2
 8003aba:	60fa      	str	r2, [r7, #12]
  return result;
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	fab2 f282 	clz	r2, r2
 8003ac2:	b2d2      	uxtb	r2, r2
 8003ac4:	40d3      	lsrs	r3, r2
 8003ac6:	4a09      	ldr	r2, [pc, #36]	; (8003aec <HAL_RCC_ClockConfig+0x2ec>)
 8003ac8:	5cd3      	ldrb	r3, [r2, r3]
 8003aca:	fa21 f303 	lsr.w	r3, r1, r3
 8003ace:	4a08      	ldr	r2, [pc, #32]	; (8003af0 <HAL_RCC_ClockConfig+0x2f0>)
 8003ad0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003ad2:	4b08      	ldr	r3, [pc, #32]	; (8003af4 <HAL_RCC_ClockConfig+0x2f4>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fe f9c6 	bl	8001e68 <HAL_InitTick>
  
  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3778      	adds	r7, #120	; 0x78
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	08007c48 	.word	0x08007c48
 8003af0:	2000007c 	.word	0x2000007c
 8003af4:	20000080 	.word	0x20000080

08003af8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b08b      	sub	sp, #44	; 0x2c
 8003afc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	61fb      	str	r3, [r7, #28]
 8003b02:	2300      	movs	r3, #0
 8003b04:	61bb      	str	r3, [r7, #24]
 8003b06:	2300      	movs	r3, #0
 8003b08:	627b      	str	r3, [r7, #36]	; 0x24
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003b12:	4b29      	ldr	r3, [pc, #164]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	f003 030c 	and.w	r3, r3, #12
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	d002      	beq.n	8003b28 <HAL_RCC_GetSysClockFreq+0x30>
 8003b22:	2b08      	cmp	r3, #8
 8003b24:	d003      	beq.n	8003b2e <HAL_RCC_GetSysClockFreq+0x36>
 8003b26:	e03c      	b.n	8003ba2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b28:	4b24      	ldr	r3, [pc, #144]	; (8003bbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b2a:	623b      	str	r3, [r7, #32]
      break;
 8003b2c:	e03c      	b.n	8003ba8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003b34:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003b38:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	fa92 f2a2 	rbit	r2, r2
 8003b40:	607a      	str	r2, [r7, #4]
  return result;
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	fab2 f282 	clz	r2, r2
 8003b48:	b2d2      	uxtb	r2, r2
 8003b4a:	40d3      	lsrs	r3, r2
 8003b4c:	4a1c      	ldr	r2, [pc, #112]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003b4e:	5cd3      	ldrb	r3, [r2, r3]
 8003b50:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003b52:	4b19      	ldr	r3, [pc, #100]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b56:	f003 030f 	and.w	r3, r3, #15
 8003b5a:	220f      	movs	r2, #15
 8003b5c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	fa92 f2a2 	rbit	r2, r2
 8003b64:	60fa      	str	r2, [r7, #12]
  return result;
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	fab2 f282 	clz	r2, r2
 8003b6c:	b2d2      	uxtb	r2, r2
 8003b6e:	40d3      	lsrs	r3, r2
 8003b70:	4a14      	ldr	r2, [pc, #80]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003b72:	5cd3      	ldrb	r3, [r2, r3]
 8003b74:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d008      	beq.n	8003b92 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b80:	4a0e      	ldr	r2, [pc, #56]	; (8003bbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	fb02 f303 	mul.w	r3, r2, r3
 8003b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b90:	e004      	b.n	8003b9c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	4a0c      	ldr	r2, [pc, #48]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b96:	fb02 f303 	mul.w	r3, r2, r3
 8003b9a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9e:	623b      	str	r3, [r7, #32]
      break;
 8003ba0:	e002      	b.n	8003ba8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ba2:	4b06      	ldr	r3, [pc, #24]	; (8003bbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ba4:	623b      	str	r3, [r7, #32]
      break;
 8003ba6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ba8:	6a3b      	ldr	r3, [r7, #32]
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	372c      	adds	r7, #44	; 0x2c
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	007a1200 	.word	0x007a1200
 8003bc0:	08007c60 	.word	0x08007c60
 8003bc4:	08007c70 	.word	0x08007c70
 8003bc8:	003d0900 	.word	0x003d0900

08003bcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bd0:	4b03      	ldr	r3, [pc, #12]	; (8003be0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	2000007c 	.word	0x2000007c

08003be4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003bea:	f7ff ffef 	bl	8003bcc <HAL_RCC_GetHCLKFreq>
 8003bee:	4601      	mov	r1, r0
 8003bf0:	4b0b      	ldr	r3, [pc, #44]	; (8003c20 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003bf8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003bfc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	fa92 f2a2 	rbit	r2, r2
 8003c04:	603a      	str	r2, [r7, #0]
  return result;
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	fab2 f282 	clz	r2, r2
 8003c0c:	b2d2      	uxtb	r2, r2
 8003c0e:	40d3      	lsrs	r3, r2
 8003c10:	4a04      	ldr	r2, [pc, #16]	; (8003c24 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003c12:	5cd3      	ldrb	r3, [r2, r3]
 8003c14:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3708      	adds	r7, #8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40021000 	.word	0x40021000
 8003c24:	08007c58 	.word	0x08007c58

08003c28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003c2e:	f7ff ffcd 	bl	8003bcc <HAL_RCC_GetHCLKFreq>
 8003c32:	4601      	mov	r1, r0
 8003c34:	4b0b      	ldr	r3, [pc, #44]	; (8003c64 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003c3c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003c40:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	fa92 f2a2 	rbit	r2, r2
 8003c48:	603a      	str	r2, [r7, #0]
  return result;
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	fab2 f282 	clz	r2, r2
 8003c50:	b2d2      	uxtb	r2, r2
 8003c52:	40d3      	lsrs	r3, r2
 8003c54:	4a04      	ldr	r2, [pc, #16]	; (8003c68 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003c56:	5cd3      	ldrb	r3, [r2, r3]
 8003c58:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3708      	adds	r7, #8
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40021000 	.word	0x40021000
 8003c68:	08007c58 	.word	0x08007c58

08003c6c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b092      	sub	sp, #72	; 0x48
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c74:	2300      	movs	r3, #0
 8003c76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f000 80d4 	beq.w	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c90:	4b4e      	ldr	r3, [pc, #312]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c92:	69db      	ldr	r3, [r3, #28]
 8003c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10e      	bne.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c9c:	4b4b      	ldr	r3, [pc, #300]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	4a4a      	ldr	r2, [pc, #296]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ca2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ca6:	61d3      	str	r3, [r2, #28]
 8003ca8:	4b48      	ldr	r3, [pc, #288]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb0:	60bb      	str	r3, [r7, #8]
 8003cb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cba:	4b45      	ldr	r3, [pc, #276]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d118      	bne.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cc6:	4b42      	ldr	r3, [pc, #264]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a41      	ldr	r2, [pc, #260]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cd2:	f7fe f90d 	bl	8001ef0 <HAL_GetTick>
 8003cd6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd8:	e008      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cda:	f7fe f909 	bl	8001ef0 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b64      	cmp	r3, #100	; 0x64
 8003ce6:	d901      	bls.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e169      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cec:	4b38      	ldr	r3, [pc, #224]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d0f0      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cf8:	4b34      	ldr	r3, [pc, #208]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d00:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 8084 	beq.w	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d07c      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d18:	4b2c      	ldr	r3, [pc, #176]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d26:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2a:	fa93 f3a3 	rbit	r3, r3
 8003d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d32:	fab3 f383 	clz	r3, r3
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	461a      	mov	r2, r3
 8003d3a:	4b26      	ldr	r3, [pc, #152]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d3c:	4413      	add	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	461a      	mov	r2, r3
 8003d42:	2301      	movs	r3, #1
 8003d44:	6013      	str	r3, [r2, #0]
 8003d46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d4a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d4e:	fa93 f3a3 	rbit	r3, r3
 8003d52:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d56:	fab3 f383 	clz	r3, r3
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	4b1d      	ldr	r3, [pc, #116]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d60:	4413      	add	r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	461a      	mov	r2, r3
 8003d66:	2300      	movs	r3, #0
 8003d68:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d6a:	4a18      	ldr	r2, [pc, #96]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d6e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d04b      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d7a:	f7fe f8b9 	bl	8001ef0 <HAL_GetTick>
 8003d7e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d80:	e00a      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d82:	f7fe f8b5 	bl	8001ef0 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e113      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003d98:	2302      	movs	r3, #2
 8003d9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9e:	fa93 f3a3 	rbit	r3, r3
 8003da2:	627b      	str	r3, [r7, #36]	; 0x24
 8003da4:	2302      	movs	r3, #2
 8003da6:	623b      	str	r3, [r7, #32]
 8003da8:	6a3b      	ldr	r3, [r7, #32]
 8003daa:	fa93 f3a3 	rbit	r3, r3
 8003dae:	61fb      	str	r3, [r7, #28]
  return result;
 8003db0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db2:	fab3 f383 	clz	r3, r3
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	095b      	lsrs	r3, r3, #5
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	f043 0302 	orr.w	r3, r3, #2
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d108      	bne.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003dc6:	4b01      	ldr	r3, [pc, #4]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	e00d      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	40007000 	.word	0x40007000
 8003dd4:	10908100 	.word	0x10908100
 8003dd8:	2302      	movs	r3, #2
 8003dda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	fa93 f3a3 	rbit	r3, r3
 8003de2:	617b      	str	r3, [r7, #20]
 8003de4:	4b78      	ldr	r3, [pc, #480]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de8:	2202      	movs	r2, #2
 8003dea:	613a      	str	r2, [r7, #16]
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	fa92 f2a2 	rbit	r2, r2
 8003df2:	60fa      	str	r2, [r7, #12]
  return result;
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	fab2 f282 	clz	r2, r2
 8003dfa:	b2d2      	uxtb	r2, r2
 8003dfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e00:	b2d2      	uxtb	r2, r2
 8003e02:	f002 021f 	and.w	r2, r2, #31
 8003e06:	2101      	movs	r1, #1
 8003e08:	fa01 f202 	lsl.w	r2, r1, r2
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0b7      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003e12:	4b6d      	ldr	r3, [pc, #436]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	496a      	ldr	r1, [pc, #424]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e24:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d105      	bne.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e2c:	4b66      	ldr	r3, [pc, #408]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e2e:	69db      	ldr	r3, [r3, #28]
 8003e30:	4a65      	ldr	r2, [pc, #404]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e36:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d008      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e44:	4b60      	ldr	r3, [pc, #384]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e48:	f023 0203 	bic.w	r2, r3, #3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	495d      	ldr	r1, [pc, #372]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d008      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e62:	4b59      	ldr	r3, [pc, #356]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e66:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	4956      	ldr	r1, [pc, #344]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0304 	and.w	r3, r3, #4
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d008      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e80:	4b51      	ldr	r3, [pc, #324]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	494e      	ldr	r1, [pc, #312]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0320 	and.w	r3, r3, #32
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d008      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e9e:	4b4a      	ldr	r3, [pc, #296]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea2:	f023 0210 	bic.w	r2, r3, #16
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	4947      	ldr	r1, [pc, #284]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d008      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003ebc:	4b42      	ldr	r3, [pc, #264]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec8:	493f      	ldr	r1, [pc, #252]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d008      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003eda:	4b3b      	ldr	r3, [pc, #236]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ede:	f023 0220 	bic.w	r2, r3, #32
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	4938      	ldr	r1, [pc, #224]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0308 	and.w	r3, r3, #8
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d008      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ef8:	4b33      	ldr	r3, [pc, #204]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	4930      	ldr	r1, [pc, #192]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0310 	and.w	r3, r3, #16
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d008      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f16:	4b2c      	ldr	r3, [pc, #176]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	4929      	ldr	r1, [pc, #164]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d008      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f34:	4b24      	ldr	r3, [pc, #144]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f40:	4921      	ldr	r1, [pc, #132]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d008      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003f52:	4b1d      	ldr	r3, [pc, #116]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f56:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5e:	491a      	ldr	r1, [pc, #104]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d008      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003f70:	4b15      	ldr	r3, [pc, #84]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f74:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7c:	4912      	ldr	r1, [pc, #72]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d008      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003f8e:	4b0e      	ldr	r3, [pc, #56]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9a:	490b      	ldr	r1, [pc, #44]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d008      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003fac:	4b06      	ldr	r3, [pc, #24]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb8:	4903      	ldr	r1, [pc, #12]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3748      	adds	r7, #72	; 0x48
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	40021000 	.word	0x40021000

08003fcc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e09d      	b.n	800411a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d108      	bne.n	8003ff8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fee:	d009      	beq.n	8004004 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	61da      	str	r2, [r3, #28]
 8003ff6:	e005      	b.n	8004004 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d106      	bne.n	8004024 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7fd fc44 	bl	80018ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2202      	movs	r2, #2
 8004028:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800403a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004044:	d902      	bls.n	800404c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004046:	2300      	movs	r3, #0
 8004048:	60fb      	str	r3, [r7, #12]
 800404a:	e002      	b.n	8004052 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800404c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004050:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800405a:	d007      	beq.n	800406c <HAL_SPI_Init+0xa0>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004064:	d002      	beq.n	800406c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800407c:	431a      	orrs	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	431a      	orrs	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	431a      	orrs	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	69db      	ldr	r3, [r3, #28]
 80040a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040a4:	431a      	orrs	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ae:	ea42 0103 	orr.w	r1, r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	0c1b      	lsrs	r3, r3, #16
 80040c8:	f003 0204 	and.w	r2, r3, #4
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d0:	f003 0310 	and.w	r3, r3, #16
 80040d4:	431a      	orrs	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040da:	f003 0308 	and.w	r3, r3, #8
 80040de:	431a      	orrs	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80040e8:	ea42 0103 	orr.w	r1, r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	69da      	ldr	r2, [r3, #28]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004108:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004122:	b580      	push	{r7, lr}
 8004124:	b082      	sub	sp, #8
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e049      	b.n	80041c8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	d106      	bne.n	800414e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f7fd fbf1 	bl	8001930 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2202      	movs	r2, #2
 8004152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	3304      	adds	r3, #4
 800415e:	4619      	mov	r1, r3
 8004160:	4610      	mov	r0, r2
 8004162:	f000 fd27 	bl	8004bb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3708      	adds	r7, #8
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d001      	beq.n	80041e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e04a      	b.n	800427e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2202      	movs	r2, #2
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68da      	ldr	r2, [r3, #12]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f042 0201 	orr.w	r2, r2, #1
 80041fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a21      	ldr	r2, [pc, #132]	; (800428c <HAL_TIM_Base_Start_IT+0xbc>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d018      	beq.n	800423c <HAL_TIM_Base_Start_IT+0x6c>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004212:	d013      	beq.n	800423c <HAL_TIM_Base_Start_IT+0x6c>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a1d      	ldr	r2, [pc, #116]	; (8004290 <HAL_TIM_Base_Start_IT+0xc0>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d00e      	beq.n	800423c <HAL_TIM_Base_Start_IT+0x6c>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a1c      	ldr	r2, [pc, #112]	; (8004294 <HAL_TIM_Base_Start_IT+0xc4>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d009      	beq.n	800423c <HAL_TIM_Base_Start_IT+0x6c>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a1a      	ldr	r2, [pc, #104]	; (8004298 <HAL_TIM_Base_Start_IT+0xc8>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d004      	beq.n	800423c <HAL_TIM_Base_Start_IT+0x6c>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a19      	ldr	r2, [pc, #100]	; (800429c <HAL_TIM_Base_Start_IT+0xcc>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d115      	bne.n	8004268 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	689a      	ldr	r2, [r3, #8]
 8004242:	4b17      	ldr	r3, [pc, #92]	; (80042a0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004244:	4013      	ands	r3, r2
 8004246:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2b06      	cmp	r3, #6
 800424c:	d015      	beq.n	800427a <HAL_TIM_Base_Start_IT+0xaa>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004254:	d011      	beq.n	800427a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f042 0201 	orr.w	r2, r2, #1
 8004264:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004266:	e008      	b.n	800427a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0201 	orr.w	r2, r2, #1
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	e000      	b.n	800427c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800427a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3714      	adds	r7, #20
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	40012c00 	.word	0x40012c00
 8004290:	40000400 	.word	0x40000400
 8004294:	40000800 	.word	0x40000800
 8004298:	40013400 	.word	0x40013400
 800429c:	40014000 	.word	0x40014000
 80042a0:	00010007 	.word	0x00010007

080042a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e049      	b.n	800434a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d106      	bne.n	80042d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f841 	bl	8004352 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2202      	movs	r2, #2
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	3304      	adds	r3, #4
 80042e0:	4619      	mov	r1, r3
 80042e2:	4610      	mov	r0, r2
 80042e4:	f000 fc66 	bl	8004bb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004352:	b480      	push	{r7}
 8004354:	b083      	sub	sp, #12
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800435a:	bf00      	nop
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
	...

08004368 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d109      	bne.n	800438c <HAL_TIM_PWM_Start+0x24>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b01      	cmp	r3, #1
 8004382:	bf14      	ite	ne
 8004384:	2301      	movne	r3, #1
 8004386:	2300      	moveq	r3, #0
 8004388:	b2db      	uxtb	r3, r3
 800438a:	e03c      	b.n	8004406 <HAL_TIM_PWM_Start+0x9e>
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	2b04      	cmp	r3, #4
 8004390:	d109      	bne.n	80043a6 <HAL_TIM_PWM_Start+0x3e>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b01      	cmp	r3, #1
 800439c:	bf14      	ite	ne
 800439e:	2301      	movne	r3, #1
 80043a0:	2300      	moveq	r3, #0
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	e02f      	b.n	8004406 <HAL_TIM_PWM_Start+0x9e>
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	2b08      	cmp	r3, #8
 80043aa:	d109      	bne.n	80043c0 <HAL_TIM_PWM_Start+0x58>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	bf14      	ite	ne
 80043b8:	2301      	movne	r3, #1
 80043ba:	2300      	moveq	r3, #0
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	e022      	b.n	8004406 <HAL_TIM_PWM_Start+0x9e>
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	2b0c      	cmp	r3, #12
 80043c4:	d109      	bne.n	80043da <HAL_TIM_PWM_Start+0x72>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	bf14      	ite	ne
 80043d2:	2301      	movne	r3, #1
 80043d4:	2300      	moveq	r3, #0
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	e015      	b.n	8004406 <HAL_TIM_PWM_Start+0x9e>
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	2b10      	cmp	r3, #16
 80043de:	d109      	bne.n	80043f4 <HAL_TIM_PWM_Start+0x8c>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	bf14      	ite	ne
 80043ec:	2301      	movne	r3, #1
 80043ee:	2300      	moveq	r3, #0
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	e008      	b.n	8004406 <HAL_TIM_PWM_Start+0x9e>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	bf14      	ite	ne
 8004400:	2301      	movne	r3, #1
 8004402:	2300      	moveq	r3, #0
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e097      	b.n	800453e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d104      	bne.n	800441e <HAL_TIM_PWM_Start+0xb6>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800441c:	e023      	b.n	8004466 <HAL_TIM_PWM_Start+0xfe>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b04      	cmp	r3, #4
 8004422:	d104      	bne.n	800442e <HAL_TIM_PWM_Start+0xc6>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2202      	movs	r2, #2
 8004428:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800442c:	e01b      	b.n	8004466 <HAL_TIM_PWM_Start+0xfe>
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	2b08      	cmp	r3, #8
 8004432:	d104      	bne.n	800443e <HAL_TIM_PWM_Start+0xd6>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800443c:	e013      	b.n	8004466 <HAL_TIM_PWM_Start+0xfe>
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	2b0c      	cmp	r3, #12
 8004442:	d104      	bne.n	800444e <HAL_TIM_PWM_Start+0xe6>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2202      	movs	r2, #2
 8004448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800444c:	e00b      	b.n	8004466 <HAL_TIM_PWM_Start+0xfe>
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	2b10      	cmp	r3, #16
 8004452:	d104      	bne.n	800445e <HAL_TIM_PWM_Start+0xf6>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800445c:	e003      	b.n	8004466 <HAL_TIM_PWM_Start+0xfe>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2202      	movs	r2, #2
 8004462:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2201      	movs	r2, #1
 800446c:	6839      	ldr	r1, [r7, #0]
 800446e:	4618      	mov	r0, r3
 8004470:	f000 ffa0 	bl	80053b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a33      	ldr	r2, [pc, #204]	; (8004548 <HAL_TIM_PWM_Start+0x1e0>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d013      	beq.n	80044a6 <HAL_TIM_PWM_Start+0x13e>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a32      	ldr	r2, [pc, #200]	; (800454c <HAL_TIM_PWM_Start+0x1e4>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d00e      	beq.n	80044a6 <HAL_TIM_PWM_Start+0x13e>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a30      	ldr	r2, [pc, #192]	; (8004550 <HAL_TIM_PWM_Start+0x1e8>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d009      	beq.n	80044a6 <HAL_TIM_PWM_Start+0x13e>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a2f      	ldr	r2, [pc, #188]	; (8004554 <HAL_TIM_PWM_Start+0x1ec>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d004      	beq.n	80044a6 <HAL_TIM_PWM_Start+0x13e>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a2d      	ldr	r2, [pc, #180]	; (8004558 <HAL_TIM_PWM_Start+0x1f0>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d101      	bne.n	80044aa <HAL_TIM_PWM_Start+0x142>
 80044a6:	2301      	movs	r3, #1
 80044a8:	e000      	b.n	80044ac <HAL_TIM_PWM_Start+0x144>
 80044aa:	2300      	movs	r3, #0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d007      	beq.n	80044c0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044be:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a20      	ldr	r2, [pc, #128]	; (8004548 <HAL_TIM_PWM_Start+0x1e0>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d018      	beq.n	80044fc <HAL_TIM_PWM_Start+0x194>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044d2:	d013      	beq.n	80044fc <HAL_TIM_PWM_Start+0x194>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a20      	ldr	r2, [pc, #128]	; (800455c <HAL_TIM_PWM_Start+0x1f4>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d00e      	beq.n	80044fc <HAL_TIM_PWM_Start+0x194>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a1f      	ldr	r2, [pc, #124]	; (8004560 <HAL_TIM_PWM_Start+0x1f8>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d009      	beq.n	80044fc <HAL_TIM_PWM_Start+0x194>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a17      	ldr	r2, [pc, #92]	; (800454c <HAL_TIM_PWM_Start+0x1e4>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d004      	beq.n	80044fc <HAL_TIM_PWM_Start+0x194>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a16      	ldr	r2, [pc, #88]	; (8004550 <HAL_TIM_PWM_Start+0x1e8>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d115      	bne.n	8004528 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689a      	ldr	r2, [r3, #8]
 8004502:	4b18      	ldr	r3, [pc, #96]	; (8004564 <HAL_TIM_PWM_Start+0x1fc>)
 8004504:	4013      	ands	r3, r2
 8004506:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2b06      	cmp	r3, #6
 800450c:	d015      	beq.n	800453a <HAL_TIM_PWM_Start+0x1d2>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004514:	d011      	beq.n	800453a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f042 0201 	orr.w	r2, r2, #1
 8004524:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004526:	e008      	b.n	800453a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f042 0201 	orr.w	r2, r2, #1
 8004536:	601a      	str	r2, [r3, #0]
 8004538:	e000      	b.n	800453c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800453a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	40012c00 	.word	0x40012c00
 800454c:	40013400 	.word	0x40013400
 8004550:	40014000 	.word	0x40014000
 8004554:	40014400 	.word	0x40014400
 8004558:	40014800 	.word	0x40014800
 800455c:	40000400 	.word	0x40000400
 8004560:	40000800 	.word	0x40000800
 8004564:	00010007 	.word	0x00010007

08004568 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b02      	cmp	r3, #2
 800457c:	d122      	bne.n	80045c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b02      	cmp	r3, #2
 800458a:	d11b      	bne.n	80045c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f06f 0202 	mvn.w	r2, #2
 8004594:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	f003 0303 	and.w	r3, r3, #3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 fae3 	bl	8004b76 <HAL_TIM_IC_CaptureCallback>
 80045b0:	e005      	b.n	80045be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 fad5 	bl	8004b62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 fae6 	bl	8004b8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	f003 0304 	and.w	r3, r3, #4
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	d122      	bne.n	8004618 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	f003 0304 	and.w	r3, r3, #4
 80045dc:	2b04      	cmp	r3, #4
 80045de:	d11b      	bne.n	8004618 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f06f 0204 	mvn.w	r2, #4
 80045e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2202      	movs	r2, #2
 80045ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d003      	beq.n	8004606 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 fab9 	bl	8004b76 <HAL_TIM_IC_CaptureCallback>
 8004604:	e005      	b.n	8004612 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 faab 	bl	8004b62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 fabc 	bl	8004b8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	f003 0308 	and.w	r3, r3, #8
 8004622:	2b08      	cmp	r3, #8
 8004624:	d122      	bne.n	800466c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	f003 0308 	and.w	r3, r3, #8
 8004630:	2b08      	cmp	r3, #8
 8004632:	d11b      	bne.n	800466c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f06f 0208 	mvn.w	r2, #8
 800463c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2204      	movs	r2, #4
 8004642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	f003 0303 	and.w	r3, r3, #3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d003      	beq.n	800465a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 fa8f 	bl	8004b76 <HAL_TIM_IC_CaptureCallback>
 8004658:	e005      	b.n	8004666 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 fa81 	bl	8004b62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 fa92 	bl	8004b8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	f003 0310 	and.w	r3, r3, #16
 8004676:	2b10      	cmp	r3, #16
 8004678:	d122      	bne.n	80046c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	f003 0310 	and.w	r3, r3, #16
 8004684:	2b10      	cmp	r3, #16
 8004686:	d11b      	bne.n	80046c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f06f 0210 	mvn.w	r2, #16
 8004690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2208      	movs	r2, #8
 8004696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	69db      	ldr	r3, [r3, #28]
 800469e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 fa65 	bl	8004b76 <HAL_TIM_IC_CaptureCallback>
 80046ac:	e005      	b.n	80046ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 fa57 	bl	8004b62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 fa68 	bl	8004b8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d10e      	bne.n	80046ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d107      	bne.n	80046ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f06f 0201 	mvn.w	r2, #1
 80046e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f7fc f87e 	bl	80007e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f6:	2b80      	cmp	r3, #128	; 0x80
 80046f8:	d10e      	bne.n	8004718 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004704:	2b80      	cmp	r3, #128	; 0x80
 8004706:	d107      	bne.n	8004718 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 ff7c 	bl	8005610 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004726:	d10e      	bne.n	8004746 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004732:	2b80      	cmp	r3, #128	; 0x80
 8004734:	d107      	bne.n	8004746 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800473e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 ff6f 	bl	8005624 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004750:	2b40      	cmp	r3, #64	; 0x40
 8004752:	d10e      	bne.n	8004772 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800475e:	2b40      	cmp	r3, #64	; 0x40
 8004760:	d107      	bne.n	8004772 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800476a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 fa16 	bl	8004b9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	f003 0320 	and.w	r3, r3, #32
 800477c:	2b20      	cmp	r3, #32
 800477e:	d10e      	bne.n	800479e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	f003 0320 	and.w	r3, r3, #32
 800478a:	2b20      	cmp	r3, #32
 800478c:	d107      	bne.n	800479e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f06f 0220 	mvn.w	r2, #32
 8004796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 ff2f 	bl	80055fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800479e:	bf00      	nop
 80047a0:	3708      	adds	r7, #8
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
	...

080047a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047b4:	2300      	movs	r3, #0
 80047b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d101      	bne.n	80047c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80047c2:	2302      	movs	r3, #2
 80047c4:	e0ff      	b.n	80049c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2b14      	cmp	r3, #20
 80047d2:	f200 80f0 	bhi.w	80049b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80047d6:	a201      	add	r2, pc, #4	; (adr r2, 80047dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80047d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047dc:	08004831 	.word	0x08004831
 80047e0:	080049b7 	.word	0x080049b7
 80047e4:	080049b7 	.word	0x080049b7
 80047e8:	080049b7 	.word	0x080049b7
 80047ec:	08004871 	.word	0x08004871
 80047f0:	080049b7 	.word	0x080049b7
 80047f4:	080049b7 	.word	0x080049b7
 80047f8:	080049b7 	.word	0x080049b7
 80047fc:	080048b3 	.word	0x080048b3
 8004800:	080049b7 	.word	0x080049b7
 8004804:	080049b7 	.word	0x080049b7
 8004808:	080049b7 	.word	0x080049b7
 800480c:	080048f3 	.word	0x080048f3
 8004810:	080049b7 	.word	0x080049b7
 8004814:	080049b7 	.word	0x080049b7
 8004818:	080049b7 	.word	0x080049b7
 800481c:	08004935 	.word	0x08004935
 8004820:	080049b7 	.word	0x080049b7
 8004824:	080049b7 	.word	0x080049b7
 8004828:	080049b7 	.word	0x080049b7
 800482c:	08004975 	.word	0x08004975
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68b9      	ldr	r1, [r7, #8]
 8004836:	4618      	mov	r0, r3
 8004838:	f000 fa4c 	bl	8004cd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	699a      	ldr	r2, [r3, #24]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 0208 	orr.w	r2, r2, #8
 800484a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699a      	ldr	r2, [r3, #24]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 0204 	bic.w	r2, r2, #4
 800485a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6999      	ldr	r1, [r3, #24]
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	691a      	ldr	r2, [r3, #16]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	430a      	orrs	r2, r1
 800486c:	619a      	str	r2, [r3, #24]
      break;
 800486e:	e0a5      	b.n	80049bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68b9      	ldr	r1, [r7, #8]
 8004876:	4618      	mov	r0, r3
 8004878:	f000 fabc 	bl	8004df4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699a      	ldr	r2, [r3, #24]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800488a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	699a      	ldr	r2, [r3, #24]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800489a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6999      	ldr	r1, [r3, #24]
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	021a      	lsls	r2, r3, #8
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	619a      	str	r2, [r3, #24]
      break;
 80048b0:	e084      	b.n	80049bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68b9      	ldr	r1, [r7, #8]
 80048b8:	4618      	mov	r0, r3
 80048ba:	f000 fb25 	bl	8004f08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	69da      	ldr	r2, [r3, #28]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f042 0208 	orr.w	r2, r2, #8
 80048cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	69da      	ldr	r2, [r3, #28]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 0204 	bic.w	r2, r2, #4
 80048dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	69d9      	ldr	r1, [r3, #28]
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	691a      	ldr	r2, [r3, #16]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	430a      	orrs	r2, r1
 80048ee:	61da      	str	r2, [r3, #28]
      break;
 80048f0:	e064      	b.n	80049bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68b9      	ldr	r1, [r7, #8]
 80048f8:	4618      	mov	r0, r3
 80048fa:	f000 fb8d 	bl	8005018 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	69da      	ldr	r2, [r3, #28]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800490c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	69da      	ldr	r2, [r3, #28]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800491c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	69d9      	ldr	r1, [r3, #28]
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	021a      	lsls	r2, r3, #8
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	61da      	str	r2, [r3, #28]
      break;
 8004932:	e043      	b.n	80049bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68b9      	ldr	r1, [r7, #8]
 800493a:	4618      	mov	r0, r3
 800493c:	f000 fbd6 	bl	80050ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f042 0208 	orr.w	r2, r2, #8
 800494e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 0204 	bic.w	r2, r2, #4
 800495e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	691a      	ldr	r2, [r3, #16]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	430a      	orrs	r2, r1
 8004970:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004972:	e023      	b.n	80049bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68b9      	ldr	r1, [r7, #8]
 800497a:	4618      	mov	r0, r3
 800497c:	f000 fc1a 	bl	80051b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800498e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800499e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	021a      	lsls	r2, r3, #8
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	430a      	orrs	r2, r1
 80049b2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80049b4:	e002      	b.n	80049bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	75fb      	strb	r3, [r7, #23]
      break;
 80049ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3718      	adds	r7, #24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop

080049d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049da:	2300      	movs	r3, #0
 80049dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d101      	bne.n	80049ec <HAL_TIM_ConfigClockSource+0x1c>
 80049e8:	2302      	movs	r3, #2
 80049ea:	e0b6      	b.n	8004b5a <HAL_TIM_ConfigClockSource+0x18a>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a28:	d03e      	beq.n	8004aa8 <HAL_TIM_ConfigClockSource+0xd8>
 8004a2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a2e:	f200 8087 	bhi.w	8004b40 <HAL_TIM_ConfigClockSource+0x170>
 8004a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a36:	f000 8086 	beq.w	8004b46 <HAL_TIM_ConfigClockSource+0x176>
 8004a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a3e:	d87f      	bhi.n	8004b40 <HAL_TIM_ConfigClockSource+0x170>
 8004a40:	2b70      	cmp	r3, #112	; 0x70
 8004a42:	d01a      	beq.n	8004a7a <HAL_TIM_ConfigClockSource+0xaa>
 8004a44:	2b70      	cmp	r3, #112	; 0x70
 8004a46:	d87b      	bhi.n	8004b40 <HAL_TIM_ConfigClockSource+0x170>
 8004a48:	2b60      	cmp	r3, #96	; 0x60
 8004a4a:	d050      	beq.n	8004aee <HAL_TIM_ConfigClockSource+0x11e>
 8004a4c:	2b60      	cmp	r3, #96	; 0x60
 8004a4e:	d877      	bhi.n	8004b40 <HAL_TIM_ConfigClockSource+0x170>
 8004a50:	2b50      	cmp	r3, #80	; 0x50
 8004a52:	d03c      	beq.n	8004ace <HAL_TIM_ConfigClockSource+0xfe>
 8004a54:	2b50      	cmp	r3, #80	; 0x50
 8004a56:	d873      	bhi.n	8004b40 <HAL_TIM_ConfigClockSource+0x170>
 8004a58:	2b40      	cmp	r3, #64	; 0x40
 8004a5a:	d058      	beq.n	8004b0e <HAL_TIM_ConfigClockSource+0x13e>
 8004a5c:	2b40      	cmp	r3, #64	; 0x40
 8004a5e:	d86f      	bhi.n	8004b40 <HAL_TIM_ConfigClockSource+0x170>
 8004a60:	2b30      	cmp	r3, #48	; 0x30
 8004a62:	d064      	beq.n	8004b2e <HAL_TIM_ConfigClockSource+0x15e>
 8004a64:	2b30      	cmp	r3, #48	; 0x30
 8004a66:	d86b      	bhi.n	8004b40 <HAL_TIM_ConfigClockSource+0x170>
 8004a68:	2b20      	cmp	r3, #32
 8004a6a:	d060      	beq.n	8004b2e <HAL_TIM_ConfigClockSource+0x15e>
 8004a6c:	2b20      	cmp	r3, #32
 8004a6e:	d867      	bhi.n	8004b40 <HAL_TIM_ConfigClockSource+0x170>
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d05c      	beq.n	8004b2e <HAL_TIM_ConfigClockSource+0x15e>
 8004a74:	2b10      	cmp	r3, #16
 8004a76:	d05a      	beq.n	8004b2e <HAL_TIM_ConfigClockSource+0x15e>
 8004a78:	e062      	b.n	8004b40 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6818      	ldr	r0, [r3, #0]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	6899      	ldr	r1, [r3, #8]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	f000 fc73 	bl	8005374 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	609a      	str	r2, [r3, #8]
      break;
 8004aa6:	e04f      	b.n	8004b48 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6818      	ldr	r0, [r3, #0]
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	6899      	ldr	r1, [r3, #8]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	f000 fc5c 	bl	8005374 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689a      	ldr	r2, [r3, #8]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004aca:	609a      	str	r2, [r3, #8]
      break;
 8004acc:	e03c      	b.n	8004b48 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6818      	ldr	r0, [r3, #0]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	6859      	ldr	r1, [r3, #4]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	461a      	mov	r2, r3
 8004adc:	f000 fbd0 	bl	8005280 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2150      	movs	r1, #80	; 0x50
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 fc29 	bl	800533e <TIM_ITRx_SetConfig>
      break;
 8004aec:	e02c      	b.n	8004b48 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6818      	ldr	r0, [r3, #0]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	6859      	ldr	r1, [r3, #4]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	461a      	mov	r2, r3
 8004afc:	f000 fbef 	bl	80052de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2160      	movs	r1, #96	; 0x60
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 fc19 	bl	800533e <TIM_ITRx_SetConfig>
      break;
 8004b0c:	e01c      	b.n	8004b48 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6818      	ldr	r0, [r3, #0]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	6859      	ldr	r1, [r3, #4]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	f000 fbb0 	bl	8005280 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2140      	movs	r1, #64	; 0x40
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 fc09 	bl	800533e <TIM_ITRx_SetConfig>
      break;
 8004b2c:	e00c      	b.n	8004b48 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4619      	mov	r1, r3
 8004b38:	4610      	mov	r0, r2
 8004b3a:	f000 fc00 	bl	800533e <TIM_ITRx_SetConfig>
      break;
 8004b3e:	e003      	b.n	8004b48 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	73fb      	strb	r3, [r7, #15]
      break;
 8004b44:	e000      	b.n	8004b48 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004b46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b62:	b480      	push	{r7}
 8004b64:	b083      	sub	sp, #12
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b6a:	bf00      	nop
 8004b6c:	370c      	adds	r7, #12
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b083      	sub	sp, #12
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b7e:	bf00      	nop
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr

08004b8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	b083      	sub	sp, #12
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b92:	bf00      	nop
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr

08004b9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b083      	sub	sp, #12
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ba6:	bf00      	nop
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
	...

08004bb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a3c      	ldr	r2, [pc, #240]	; (8004cb8 <TIM_Base_SetConfig+0x104>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d00f      	beq.n	8004bec <TIM_Base_SetConfig+0x38>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bd2:	d00b      	beq.n	8004bec <TIM_Base_SetConfig+0x38>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a39      	ldr	r2, [pc, #228]	; (8004cbc <TIM_Base_SetConfig+0x108>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d007      	beq.n	8004bec <TIM_Base_SetConfig+0x38>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a38      	ldr	r2, [pc, #224]	; (8004cc0 <TIM_Base_SetConfig+0x10c>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d003      	beq.n	8004bec <TIM_Base_SetConfig+0x38>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a37      	ldr	r2, [pc, #220]	; (8004cc4 <TIM_Base_SetConfig+0x110>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d108      	bne.n	8004bfe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a2d      	ldr	r2, [pc, #180]	; (8004cb8 <TIM_Base_SetConfig+0x104>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d01b      	beq.n	8004c3e <TIM_Base_SetConfig+0x8a>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c0c:	d017      	beq.n	8004c3e <TIM_Base_SetConfig+0x8a>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a2a      	ldr	r2, [pc, #168]	; (8004cbc <TIM_Base_SetConfig+0x108>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d013      	beq.n	8004c3e <TIM_Base_SetConfig+0x8a>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a29      	ldr	r2, [pc, #164]	; (8004cc0 <TIM_Base_SetConfig+0x10c>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d00f      	beq.n	8004c3e <TIM_Base_SetConfig+0x8a>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a28      	ldr	r2, [pc, #160]	; (8004cc4 <TIM_Base_SetConfig+0x110>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d00b      	beq.n	8004c3e <TIM_Base_SetConfig+0x8a>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a27      	ldr	r2, [pc, #156]	; (8004cc8 <TIM_Base_SetConfig+0x114>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d007      	beq.n	8004c3e <TIM_Base_SetConfig+0x8a>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a26      	ldr	r2, [pc, #152]	; (8004ccc <TIM_Base_SetConfig+0x118>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d003      	beq.n	8004c3e <TIM_Base_SetConfig+0x8a>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a25      	ldr	r2, [pc, #148]	; (8004cd0 <TIM_Base_SetConfig+0x11c>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d108      	bne.n	8004c50 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	689a      	ldr	r2, [r3, #8]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a10      	ldr	r2, [pc, #64]	; (8004cb8 <TIM_Base_SetConfig+0x104>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d00f      	beq.n	8004c9c <TIM_Base_SetConfig+0xe8>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a11      	ldr	r2, [pc, #68]	; (8004cc4 <TIM_Base_SetConfig+0x110>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d00b      	beq.n	8004c9c <TIM_Base_SetConfig+0xe8>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a10      	ldr	r2, [pc, #64]	; (8004cc8 <TIM_Base_SetConfig+0x114>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d007      	beq.n	8004c9c <TIM_Base_SetConfig+0xe8>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a0f      	ldr	r2, [pc, #60]	; (8004ccc <TIM_Base_SetConfig+0x118>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d003      	beq.n	8004c9c <TIM_Base_SetConfig+0xe8>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a0e      	ldr	r2, [pc, #56]	; (8004cd0 <TIM_Base_SetConfig+0x11c>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d103      	bne.n	8004ca4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	691a      	ldr	r2, [r3, #16]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	615a      	str	r2, [r3, #20]
}
 8004caa:	bf00      	nop
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	40012c00 	.word	0x40012c00
 8004cbc:	40000400 	.word	0x40000400
 8004cc0:	40000800 	.word	0x40000800
 8004cc4:	40013400 	.word	0x40013400
 8004cc8:	40014000 	.word	0x40014000
 8004ccc:	40014400 	.word	0x40014400
 8004cd0:	40014800 	.word	0x40014800

08004cd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b087      	sub	sp, #28
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	f023 0201 	bic.w	r2, r3, #1
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f023 0303 	bic.w	r3, r3, #3
 8004d0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f023 0302 	bic.w	r3, r3, #2
 8004d20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a2c      	ldr	r2, [pc, #176]	; (8004de0 <TIM_OC1_SetConfig+0x10c>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d00f      	beq.n	8004d54 <TIM_OC1_SetConfig+0x80>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a2b      	ldr	r2, [pc, #172]	; (8004de4 <TIM_OC1_SetConfig+0x110>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d00b      	beq.n	8004d54 <TIM_OC1_SetConfig+0x80>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a2a      	ldr	r2, [pc, #168]	; (8004de8 <TIM_OC1_SetConfig+0x114>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d007      	beq.n	8004d54 <TIM_OC1_SetConfig+0x80>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a29      	ldr	r2, [pc, #164]	; (8004dec <TIM_OC1_SetConfig+0x118>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d003      	beq.n	8004d54 <TIM_OC1_SetConfig+0x80>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a28      	ldr	r2, [pc, #160]	; (8004df0 <TIM_OC1_SetConfig+0x11c>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d10c      	bne.n	8004d6e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	f023 0308 	bic.w	r3, r3, #8
 8004d5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f023 0304 	bic.w	r3, r3, #4
 8004d6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a1b      	ldr	r2, [pc, #108]	; (8004de0 <TIM_OC1_SetConfig+0x10c>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d00f      	beq.n	8004d96 <TIM_OC1_SetConfig+0xc2>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a1a      	ldr	r2, [pc, #104]	; (8004de4 <TIM_OC1_SetConfig+0x110>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d00b      	beq.n	8004d96 <TIM_OC1_SetConfig+0xc2>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a19      	ldr	r2, [pc, #100]	; (8004de8 <TIM_OC1_SetConfig+0x114>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d007      	beq.n	8004d96 <TIM_OC1_SetConfig+0xc2>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a18      	ldr	r2, [pc, #96]	; (8004dec <TIM_OC1_SetConfig+0x118>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d003      	beq.n	8004d96 <TIM_OC1_SetConfig+0xc2>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a17      	ldr	r2, [pc, #92]	; (8004df0 <TIM_OC1_SetConfig+0x11c>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d111      	bne.n	8004dba <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004da4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	621a      	str	r2, [r3, #32]
}
 8004dd4:	bf00      	nop
 8004dd6:	371c      	adds	r7, #28
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	40012c00 	.word	0x40012c00
 8004de4:	40013400 	.word	0x40013400
 8004de8:	40014000 	.word	0x40014000
 8004dec:	40014400 	.word	0x40014400
 8004df0:	40014800 	.word	0x40014800

08004df4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b087      	sub	sp, #28
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	f023 0210 	bic.w	r2, r3, #16
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	021b      	lsls	r3, r3, #8
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	f023 0320 	bic.w	r3, r3, #32
 8004e42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	011b      	lsls	r3, r3, #4
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a28      	ldr	r2, [pc, #160]	; (8004ef4 <TIM_OC2_SetConfig+0x100>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d003      	beq.n	8004e60 <TIM_OC2_SetConfig+0x6c>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a27      	ldr	r2, [pc, #156]	; (8004ef8 <TIM_OC2_SetConfig+0x104>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d10d      	bne.n	8004e7c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	011b      	lsls	r3, r3, #4
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a1d      	ldr	r2, [pc, #116]	; (8004ef4 <TIM_OC2_SetConfig+0x100>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d00f      	beq.n	8004ea4 <TIM_OC2_SetConfig+0xb0>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a1c      	ldr	r2, [pc, #112]	; (8004ef8 <TIM_OC2_SetConfig+0x104>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d00b      	beq.n	8004ea4 <TIM_OC2_SetConfig+0xb0>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a1b      	ldr	r2, [pc, #108]	; (8004efc <TIM_OC2_SetConfig+0x108>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d007      	beq.n	8004ea4 <TIM_OC2_SetConfig+0xb0>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a1a      	ldr	r2, [pc, #104]	; (8004f00 <TIM_OC2_SetConfig+0x10c>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d003      	beq.n	8004ea4 <TIM_OC2_SetConfig+0xb0>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a19      	ldr	r2, [pc, #100]	; (8004f04 <TIM_OC2_SetConfig+0x110>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d113      	bne.n	8004ecc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004eaa:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004eb2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	685a      	ldr	r2, [r3, #4]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	621a      	str	r2, [r3, #32]
}
 8004ee6:	bf00      	nop
 8004ee8:	371c      	adds	r7, #28
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	40012c00 	.word	0x40012c00
 8004ef8:	40013400 	.word	0x40013400
 8004efc:	40014000 	.word	0x40014000
 8004f00:	40014400 	.word	0x40014400
 8004f04:	40014800 	.word	0x40014800

08004f08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b087      	sub	sp, #28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	69db      	ldr	r3, [r3, #28]
 8004f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f023 0303 	bic.w	r3, r3, #3
 8004f42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	021b      	lsls	r3, r3, #8
 8004f5c:	697a      	ldr	r2, [r7, #20]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a27      	ldr	r2, [pc, #156]	; (8005004 <TIM_OC3_SetConfig+0xfc>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d003      	beq.n	8004f72 <TIM_OC3_SetConfig+0x6a>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a26      	ldr	r2, [pc, #152]	; (8005008 <TIM_OC3_SetConfig+0x100>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d10d      	bne.n	8004f8e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	021b      	lsls	r3, r3, #8
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f8c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a1c      	ldr	r2, [pc, #112]	; (8005004 <TIM_OC3_SetConfig+0xfc>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d00f      	beq.n	8004fb6 <TIM_OC3_SetConfig+0xae>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a1b      	ldr	r2, [pc, #108]	; (8005008 <TIM_OC3_SetConfig+0x100>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d00b      	beq.n	8004fb6 <TIM_OC3_SetConfig+0xae>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a1a      	ldr	r2, [pc, #104]	; (800500c <TIM_OC3_SetConfig+0x104>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d007      	beq.n	8004fb6 <TIM_OC3_SetConfig+0xae>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a19      	ldr	r2, [pc, #100]	; (8005010 <TIM_OC3_SetConfig+0x108>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d003      	beq.n	8004fb6 <TIM_OC3_SetConfig+0xae>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a18      	ldr	r2, [pc, #96]	; (8005014 <TIM_OC3_SetConfig+0x10c>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d113      	bne.n	8004fde <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	011b      	lsls	r3, r3, #4
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	011b      	lsls	r3, r3, #4
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	685a      	ldr	r2, [r3, #4]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	621a      	str	r2, [r3, #32]
}
 8004ff8:	bf00      	nop
 8004ffa:	371c      	adds	r7, #28
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr
 8005004:	40012c00 	.word	0x40012c00
 8005008:	40013400 	.word	0x40013400
 800500c:	40014000 	.word	0x40014000
 8005010:	40014400 	.word	0x40014400
 8005014:	40014800 	.word	0x40014800

08005018 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005018:	b480      	push	{r7}
 800501a:	b087      	sub	sp, #28
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	69db      	ldr	r3, [r3, #28]
 800503e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005046:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800504a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005052:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	021b      	lsls	r3, r3, #8
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	4313      	orrs	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005066:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	031b      	lsls	r3, r3, #12
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	4313      	orrs	r3, r2
 8005072:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a18      	ldr	r2, [pc, #96]	; (80050d8 <TIM_OC4_SetConfig+0xc0>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d00f      	beq.n	800509c <TIM_OC4_SetConfig+0x84>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a17      	ldr	r2, [pc, #92]	; (80050dc <TIM_OC4_SetConfig+0xc4>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d00b      	beq.n	800509c <TIM_OC4_SetConfig+0x84>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a16      	ldr	r2, [pc, #88]	; (80050e0 <TIM_OC4_SetConfig+0xc8>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d007      	beq.n	800509c <TIM_OC4_SetConfig+0x84>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a15      	ldr	r2, [pc, #84]	; (80050e4 <TIM_OC4_SetConfig+0xcc>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d003      	beq.n	800509c <TIM_OC4_SetConfig+0x84>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a14      	ldr	r2, [pc, #80]	; (80050e8 <TIM_OC4_SetConfig+0xd0>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d109      	bne.n	80050b0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	019b      	lsls	r3, r3, #6
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	685a      	ldr	r2, [r3, #4]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	621a      	str	r2, [r3, #32]
}
 80050ca:	bf00      	nop
 80050cc:	371c      	adds	r7, #28
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	40012c00 	.word	0x40012c00
 80050dc:	40013400 	.word	0x40013400
 80050e0:	40014000 	.word	0x40014000
 80050e4:	40014400 	.word	0x40014400
 80050e8:	40014800 	.word	0x40014800

080050ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b087      	sub	sp, #28
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800511a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800511e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	4313      	orrs	r3, r2
 8005128:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005130:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	041b      	lsls	r3, r3, #16
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	4313      	orrs	r3, r2
 800513c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a17      	ldr	r2, [pc, #92]	; (80051a0 <TIM_OC5_SetConfig+0xb4>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d00f      	beq.n	8005166 <TIM_OC5_SetConfig+0x7a>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a16      	ldr	r2, [pc, #88]	; (80051a4 <TIM_OC5_SetConfig+0xb8>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d00b      	beq.n	8005166 <TIM_OC5_SetConfig+0x7a>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a15      	ldr	r2, [pc, #84]	; (80051a8 <TIM_OC5_SetConfig+0xbc>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d007      	beq.n	8005166 <TIM_OC5_SetConfig+0x7a>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a14      	ldr	r2, [pc, #80]	; (80051ac <TIM_OC5_SetConfig+0xc0>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d003      	beq.n	8005166 <TIM_OC5_SetConfig+0x7a>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a13      	ldr	r2, [pc, #76]	; (80051b0 <TIM_OC5_SetConfig+0xc4>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d109      	bne.n	800517a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800516c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	021b      	lsls	r3, r3, #8
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	4313      	orrs	r3, r2
 8005178:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685a      	ldr	r2, [r3, #4]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	621a      	str	r2, [r3, #32]
}
 8005194:	bf00      	nop
 8005196:	371c      	adds	r7, #28
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	40012c00 	.word	0x40012c00
 80051a4:	40013400 	.word	0x40013400
 80051a8:	40014000 	.word	0x40014000
 80051ac:	40014400 	.word	0x40014400
 80051b0:	40014800 	.word	0x40014800

080051b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b087      	sub	sp, #28
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	021b      	lsls	r3, r3, #8
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80051fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	051b      	lsls	r3, r3, #20
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	4313      	orrs	r3, r2
 8005206:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a18      	ldr	r2, [pc, #96]	; (800526c <TIM_OC6_SetConfig+0xb8>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d00f      	beq.n	8005230 <TIM_OC6_SetConfig+0x7c>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a17      	ldr	r2, [pc, #92]	; (8005270 <TIM_OC6_SetConfig+0xbc>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d00b      	beq.n	8005230 <TIM_OC6_SetConfig+0x7c>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a16      	ldr	r2, [pc, #88]	; (8005274 <TIM_OC6_SetConfig+0xc0>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d007      	beq.n	8005230 <TIM_OC6_SetConfig+0x7c>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a15      	ldr	r2, [pc, #84]	; (8005278 <TIM_OC6_SetConfig+0xc4>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d003      	beq.n	8005230 <TIM_OC6_SetConfig+0x7c>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a14      	ldr	r2, [pc, #80]	; (800527c <TIM_OC6_SetConfig+0xc8>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d109      	bne.n	8005244 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005236:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	029b      	lsls	r3, r3, #10
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	4313      	orrs	r3, r2
 8005242:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	685a      	ldr	r2, [r3, #4]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	621a      	str	r2, [r3, #32]
}
 800525e:	bf00      	nop
 8005260:	371c      	adds	r7, #28
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	40012c00 	.word	0x40012c00
 8005270:	40013400 	.word	0x40013400
 8005274:	40014000 	.word	0x40014000
 8005278:	40014400 	.word	0x40014400
 800527c:	40014800 	.word	0x40014800

08005280 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005280:	b480      	push	{r7}
 8005282:	b087      	sub	sp, #28
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6a1b      	ldr	r3, [r3, #32]
 8005290:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	f023 0201 	bic.w	r2, r3, #1
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	699b      	ldr	r3, [r3, #24]
 80052a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	011b      	lsls	r3, r3, #4
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f023 030a 	bic.w	r3, r3, #10
 80052bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	621a      	str	r2, [r3, #32]
}
 80052d2:	bf00      	nop
 80052d4:	371c      	adds	r7, #28
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr

080052de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052de:	b480      	push	{r7}
 80052e0:	b087      	sub	sp, #28
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	60f8      	str	r0, [r7, #12]
 80052e6:	60b9      	str	r1, [r7, #8]
 80052e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	f023 0210 	bic.w	r2, r3, #16
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6a1b      	ldr	r3, [r3, #32]
 8005300:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005308:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	031b      	lsls	r3, r3, #12
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	4313      	orrs	r3, r2
 8005312:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800531a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	011b      	lsls	r3, r3, #4
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	4313      	orrs	r3, r2
 8005324:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	621a      	str	r2, [r3, #32]
}
 8005332:	bf00      	nop
 8005334:	371c      	adds	r7, #28
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr

0800533e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800533e:	b480      	push	{r7}
 8005340:	b085      	sub	sp, #20
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
 8005346:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005354:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005356:	683a      	ldr	r2, [r7, #0]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	4313      	orrs	r3, r2
 800535c:	f043 0307 	orr.w	r3, r3, #7
 8005360:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	609a      	str	r2, [r3, #8]
}
 8005368:	bf00      	nop
 800536a:	3714      	adds	r7, #20
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005374:	b480      	push	{r7}
 8005376:	b087      	sub	sp, #28
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]
 8005380:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800538e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	021a      	lsls	r2, r3, #8
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	431a      	orrs	r2, r3
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	4313      	orrs	r3, r2
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	4313      	orrs	r3, r2
 80053a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	609a      	str	r2, [r3, #8]
}
 80053a8:	bf00      	nop
 80053aa:	371c      	adds	r7, #28
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b087      	sub	sp, #28
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	f003 031f 	and.w	r3, r3, #31
 80053c6:	2201      	movs	r2, #1
 80053c8:	fa02 f303 	lsl.w	r3, r2, r3
 80053cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6a1a      	ldr	r2, [r3, #32]
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	43db      	mvns	r3, r3
 80053d6:	401a      	ands	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6a1a      	ldr	r2, [r3, #32]
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	f003 031f 	and.w	r3, r3, #31
 80053e6:	6879      	ldr	r1, [r7, #4]
 80053e8:	fa01 f303 	lsl.w	r3, r1, r3
 80053ec:	431a      	orrs	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	621a      	str	r2, [r3, #32]
}
 80053f2:	bf00      	nop
 80053f4:	371c      	adds	r7, #28
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
	...

08005400 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005410:	2b01      	cmp	r3, #1
 8005412:	d101      	bne.n	8005418 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005414:	2302      	movs	r3, #2
 8005416:	e063      	b.n	80054e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2202      	movs	r2, #2
 8005424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a2b      	ldr	r2, [pc, #172]	; (80054ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d004      	beq.n	800544c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a2a      	ldr	r2, [pc, #168]	; (80054f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d108      	bne.n	800545e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005452:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	4313      	orrs	r3, r2
 800545c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005464:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	4313      	orrs	r3, r2
 800546e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a1b      	ldr	r2, [pc, #108]	; (80054ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d018      	beq.n	80054b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800548a:	d013      	beq.n	80054b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a18      	ldr	r2, [pc, #96]	; (80054f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d00e      	beq.n	80054b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a17      	ldr	r2, [pc, #92]	; (80054f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d009      	beq.n	80054b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a12      	ldr	r2, [pc, #72]	; (80054f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d004      	beq.n	80054b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a13      	ldr	r2, [pc, #76]	; (80054fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d10c      	bne.n	80054ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3714      	adds	r7, #20
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr
 80054ec:	40012c00 	.word	0x40012c00
 80054f0:	40013400 	.word	0x40013400
 80054f4:	40000400 	.word	0x40000400
 80054f8:	40000800 	.word	0x40000800
 80054fc:	40014000 	.word	0x40014000

08005500 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800550a:	2300      	movs	r3, #0
 800550c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005514:	2b01      	cmp	r3, #1
 8005516:	d101      	bne.n	800551c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005518:	2302      	movs	r3, #2
 800551a:	e065      	b.n	80055e8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	4313      	orrs	r3, r2
 8005530:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	4313      	orrs	r3, r2
 800553e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	4313      	orrs	r3, r2
 800554c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4313      	orrs	r3, r2
 800555a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	4313      	orrs	r3, r2
 8005568:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	695b      	ldr	r3, [r3, #20]
 8005574:	4313      	orrs	r3, r2
 8005576:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005582:	4313      	orrs	r3, r2
 8005584:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	041b      	lsls	r3, r3, #16
 8005592:	4313      	orrs	r3, r2
 8005594:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a16      	ldr	r2, [pc, #88]	; (80055f4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d004      	beq.n	80055aa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a14      	ldr	r2, [pc, #80]	; (80055f8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d115      	bne.n	80055d6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b4:	051b      	lsls	r3, r3, #20
 80055b6:	4313      	orrs	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	69db      	ldr	r3, [r3, #28]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3714      	adds	r7, #20
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr
 80055f4:	40012c00 	.word	0x40012c00
 80055f8:	40013400 	.word	0x40013400

080055fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d101      	bne.n	800564a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e040      	b.n	80056cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800564e:	2b00      	cmp	r3, #0
 8005650:	d106      	bne.n	8005660 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f7fc fa10 	bl	8001a80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2224      	movs	r2, #36	; 0x24
 8005664:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f022 0201 	bic.w	r2, r2, #1
 8005674:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 fc0c 	bl	8005e94 <UART_SetConfig>
 800567c:	4603      	mov	r3, r0
 800567e:	2b01      	cmp	r3, #1
 8005680:	d101      	bne.n	8005686 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e022      	b.n	80056cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568a:	2b00      	cmp	r3, #0
 800568c:	d002      	beq.n	8005694 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 fdd4 	bl	800623c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689a      	ldr	r2, [r3, #8]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f042 0201 	orr.w	r2, r2, #1
 80056c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 fe5b 	bl	8006380 <UART_CheckIdleState>
 80056ca:	4603      	mov	r3, r0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3708      	adds	r7, #8
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b08a      	sub	sp, #40	; 0x28
 80056d8:	af02      	add	r7, sp, #8
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	603b      	str	r3, [r7, #0]
 80056e0:	4613      	mov	r3, r2
 80056e2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056e8:	2b20      	cmp	r3, #32
 80056ea:	f040 8082 	bne.w	80057f2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d002      	beq.n	80056fa <HAL_UART_Transmit+0x26>
 80056f4:	88fb      	ldrh	r3, [r7, #6]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d101      	bne.n	80056fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e07a      	b.n	80057f4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005704:	2b01      	cmp	r3, #1
 8005706:	d101      	bne.n	800570c <HAL_UART_Transmit+0x38>
 8005708:	2302      	movs	r3, #2
 800570a:	e073      	b.n	80057f4 <HAL_UART_Transmit+0x120>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2221      	movs	r2, #33	; 0x21
 8005720:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005722:	f7fc fbe5 	bl	8001ef0 <HAL_GetTick>
 8005726:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	88fa      	ldrh	r2, [r7, #6]
 800572c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	88fa      	ldrh	r2, [r7, #6]
 8005734:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005740:	d108      	bne.n	8005754 <HAL_UART_Transmit+0x80>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d104      	bne.n	8005754 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800574a:	2300      	movs	r3, #0
 800574c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	61bb      	str	r3, [r7, #24]
 8005752:	e003      	b.n	800575c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005758:	2300      	movs	r3, #0
 800575a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005764:	e02d      	b.n	80057c2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	9300      	str	r3, [sp, #0]
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	2200      	movs	r2, #0
 800576e:	2180      	movs	r1, #128	; 0x80
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f000 fe4e 	bl	8006412 <UART_WaitOnFlagUntilTimeout>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d001      	beq.n	8005780 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e039      	b.n	80057f4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10b      	bne.n	800579e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	881a      	ldrh	r2, [r3, #0]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005792:	b292      	uxth	r2, r2
 8005794:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	3302      	adds	r3, #2
 800579a:	61bb      	str	r3, [r7, #24]
 800579c:	e008      	b.n	80057b0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	781a      	ldrb	r2, [r3, #0]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	b292      	uxth	r2, r2
 80057a8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	3301      	adds	r3, #1
 80057ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	3b01      	subs	r3, #1
 80057ba:	b29a      	uxth	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1cb      	bne.n	8005766 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	9300      	str	r3, [sp, #0]
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	2200      	movs	r2, #0
 80057d6:	2140      	movs	r1, #64	; 0x40
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f000 fe1a 	bl	8006412 <UART_WaitOnFlagUntilTimeout>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d001      	beq.n	80057e8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e005      	b.n	80057f4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2220      	movs	r2, #32
 80057ec:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80057ee:	2300      	movs	r3, #0
 80057f0:	e000      	b.n	80057f4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80057f2:	2302      	movs	r3, #2
  }
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3720      	adds	r7, #32
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b08a      	sub	sp, #40	; 0x28
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	4613      	mov	r3, r2
 8005808:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800580e:	2b20      	cmp	r3, #32
 8005810:	d13d      	bne.n	800588e <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d002      	beq.n	800581e <HAL_UART_Receive_IT+0x22>
 8005818:	88fb      	ldrh	r3, [r7, #6]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e036      	b.n	8005890 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005828:	2b01      	cmp	r3, #1
 800582a:	d101      	bne.n	8005830 <HAL_UART_Receive_IT+0x34>
 800582c:	2302      	movs	r3, #2
 800582e:	e02f      	b.n	8005890 <HAL_UART_Receive_IT+0x94>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d018      	beq.n	800587e <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	e853 3f00 	ldrex	r3, [r3]
 8005858:	613b      	str	r3, [r7, #16]
   return(result);
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005860:	627b      	str	r3, [r7, #36]	; 0x24
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	461a      	mov	r2, r3
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586a:	623b      	str	r3, [r7, #32]
 800586c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586e:	69f9      	ldr	r1, [r7, #28]
 8005870:	6a3a      	ldr	r2, [r7, #32]
 8005872:	e841 2300 	strex	r3, r2, [r1]
 8005876:	61bb      	str	r3, [r7, #24]
   return(result);
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1e6      	bne.n	800584c <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800587e:	88fb      	ldrh	r3, [r7, #6]
 8005880:	461a      	mov	r2, r3
 8005882:	68b9      	ldr	r1, [r7, #8]
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f000 fe89 	bl	800659c <UART_Start_Receive_IT>
 800588a:	4603      	mov	r3, r0
 800588c:	e000      	b.n	8005890 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800588e:	2302      	movs	r3, #2
  }
}
 8005890:	4618      	mov	r0, r3
 8005892:	3728      	adds	r7, #40	; 0x28
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b0ba      	sub	sp, #232	; 0xe8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	69db      	ldr	r3, [r3, #28]
 80058a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80058be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80058c2:	f640 030f 	movw	r3, #2063	; 0x80f
 80058c6:	4013      	ands	r3, r2
 80058c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80058cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d115      	bne.n	8005900 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80058d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058d8:	f003 0320 	and.w	r3, r3, #32
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00f      	beq.n	8005900 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80058e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058e4:	f003 0320 	and.w	r3, r3, #32
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d009      	beq.n	8005900 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f000 82a3 	beq.w	8005e3c <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	4798      	blx	r3
      }
      return;
 80058fe:	e29d      	b.n	8005e3c <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005900:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005904:	2b00      	cmp	r3, #0
 8005906:	f000 8117 	beq.w	8005b38 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800590a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b00      	cmp	r3, #0
 8005914:	d106      	bne.n	8005924 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005916:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800591a:	4b85      	ldr	r3, [pc, #532]	; (8005b30 <HAL_UART_IRQHandler+0x298>)
 800591c:	4013      	ands	r3, r2
 800591e:	2b00      	cmp	r3, #0
 8005920:	f000 810a 	beq.w	8005b38 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005928:	f003 0301 	and.w	r3, r3, #1
 800592c:	2b00      	cmp	r3, #0
 800592e:	d011      	beq.n	8005954 <HAL_UART_IRQHandler+0xbc>
 8005930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00b      	beq.n	8005954 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2201      	movs	r2, #1
 8005942:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800594a:	f043 0201 	orr.w	r2, r3, #1
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005958:	f003 0302 	and.w	r3, r3, #2
 800595c:	2b00      	cmp	r3, #0
 800595e:	d011      	beq.n	8005984 <HAL_UART_IRQHandler+0xec>
 8005960:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005964:	f003 0301 	and.w	r3, r3, #1
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00b      	beq.n	8005984 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2202      	movs	r2, #2
 8005972:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800597a:	f043 0204 	orr.w	r2, r3, #4
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005988:	f003 0304 	and.w	r3, r3, #4
 800598c:	2b00      	cmp	r3, #0
 800598e:	d011      	beq.n	80059b4 <HAL_UART_IRQHandler+0x11c>
 8005990:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005994:	f003 0301 	and.w	r3, r3, #1
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00b      	beq.n	80059b4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2204      	movs	r2, #4
 80059a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059aa:	f043 0202 	orr.w	r2, r3, #2
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80059b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059b8:	f003 0308 	and.w	r3, r3, #8
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d017      	beq.n	80059f0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80059c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059c4:	f003 0320 	and.w	r3, r3, #32
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d105      	bne.n	80059d8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80059cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059d0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00b      	beq.n	80059f0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2208      	movs	r2, #8
 80059de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059e6:	f043 0208 	orr.w	r2, r3, #8
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80059f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d012      	beq.n	8005a22 <HAL_UART_IRQHandler+0x18a>
 80059fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00c      	beq.n	8005a22 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a18:	f043 0220 	orr.w	r2, r3, #32
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f000 8209 	beq.w	8005e40 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a32:	f003 0320 	and.w	r3, r3, #32
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00d      	beq.n	8005a56 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a3e:	f003 0320 	and.w	r3, r3, #32
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d007      	beq.n	8005a56 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d003      	beq.n	8005a56 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6a:	2b40      	cmp	r3, #64	; 0x40
 8005a6c:	d005      	beq.n	8005a7a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005a6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a72:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d04f      	beq.n	8005b1a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 fe26 	bl	80066cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a8a:	2b40      	cmp	r3, #64	; 0x40
 8005a8c:	d141      	bne.n	8005b12 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	3308      	adds	r3, #8
 8005a94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a9c:	e853 3f00 	ldrex	r3, [r3]
 8005aa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005aa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005aa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	3308      	adds	r3, #8
 8005ab6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005aba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005abe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005ac6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005aca:	e841 2300 	strex	r3, r2, [r1]
 8005ace:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005ad2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1d9      	bne.n	8005a8e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d013      	beq.n	8005b0a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae6:	4a13      	ldr	r2, [pc, #76]	; (8005b34 <HAL_UART_IRQHandler+0x29c>)
 8005ae8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7fc fb78 	bl	80021e4 <HAL_DMA_Abort_IT>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d017      	beq.n	8005b2a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005b04:	4610      	mov	r0, r2
 8005b06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b08:	e00f      	b.n	8005b2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f9ac 	bl	8005e68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b10:	e00b      	b.n	8005b2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f9a8 	bl	8005e68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b18:	e007      	b.n	8005b2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 f9a4 	bl	8005e68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005b28:	e18a      	b.n	8005e40 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b2a:	bf00      	nop
    return;
 8005b2c:	e188      	b.n	8005e40 <HAL_UART_IRQHandler+0x5a8>
 8005b2e:	bf00      	nop
 8005b30:	04000120 	.word	0x04000120
 8005b34:	08006793 	.word	0x08006793

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	f040 8143 	bne.w	8005dc8 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b46:	f003 0310 	and.w	r3, r3, #16
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	f000 813c 	beq.w	8005dc8 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b54:	f003 0310 	and.w	r3, r3, #16
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f000 8135 	beq.w	8005dc8 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2210      	movs	r2, #16
 8005b64:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b70:	2b40      	cmp	r3, #64	; 0x40
 8005b72:	f040 80b1 	bne.w	8005cd8 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b82:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f000 815c 	beq.w	8005e44 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005b92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b96:	429a      	cmp	r2, r3
 8005b98:	f080 8154 	bcs.w	8005e44 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ba2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005baa:	699b      	ldr	r3, [r3, #24]
 8005bac:	2b20      	cmp	r3, #32
 8005bae:	f000 8085 	beq.w	8005cbc <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005bbe:	e853 3f00 	ldrex	r3, [r3]
 8005bc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005bc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005bdc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005be0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005be8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005bec:	e841 2300 	strex	r3, r2, [r1]
 8005bf0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005bf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d1da      	bne.n	8005bb2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	3308      	adds	r3, #8
 8005c02:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c06:	e853 3f00 	ldrex	r3, [r3]
 8005c0a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c0e:	f023 0301 	bic.w	r3, r3, #1
 8005c12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	3308      	adds	r3, #8
 8005c1c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c20:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c24:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c26:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c28:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c2c:	e841 2300 	strex	r3, r2, [r1]
 8005c30:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1e1      	bne.n	8005bfc <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	3308      	adds	r3, #8
 8005c3e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c42:	e853 3f00 	ldrex	r3, [r3]
 8005c46:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	3308      	adds	r3, #8
 8005c58:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c5c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c5e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c60:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c62:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c64:	e841 2300 	strex	r3, r2, [r1]
 8005c68:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1e3      	bne.n	8005c38 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2220      	movs	r2, #32
 8005c74:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c84:	e853 3f00 	ldrex	r3, [r3]
 8005c88:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c8c:	f023 0310 	bic.w	r3, r3, #16
 8005c90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	461a      	mov	r2, r3
 8005c9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ca0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ca4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ca6:	e841 2300 	strex	r3, r2, [r1]
 8005caa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005cac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1e4      	bne.n	8005c7c <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7fc fa5b 	bl	8002172 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	4619      	mov	r1, r3
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 f8d3 	bl	8005e7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005cd6:	e0b5      	b.n	8005e44 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f000 80a7 	beq.w	8005e48 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8005cfa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	f000 80a2 	beq.w	8005e48 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0c:	e853 3f00 	ldrex	r3, [r3]
 8005d10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	461a      	mov	r2, r3
 8005d22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d26:	647b      	str	r3, [r7, #68]	; 0x44
 8005d28:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d2e:	e841 2300 	strex	r3, r2, [r1]
 8005d32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1e4      	bne.n	8005d04 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	3308      	adds	r3, #8
 8005d40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d44:	e853 3f00 	ldrex	r3, [r3]
 8005d48:	623b      	str	r3, [r7, #32]
   return(result);
 8005d4a:	6a3b      	ldr	r3, [r7, #32]
 8005d4c:	f023 0301 	bic.w	r3, r3, #1
 8005d50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	3308      	adds	r3, #8
 8005d5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d5e:	633a      	str	r2, [r7, #48]	; 0x30
 8005d60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d66:	e841 2300 	strex	r3, r2, [r1]
 8005d6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1e3      	bne.n	8005d3a <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2220      	movs	r2, #32
 8005d76:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	e853 3f00 	ldrex	r3, [r3]
 8005d90:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f023 0310 	bic.w	r3, r3, #16
 8005d98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	461a      	mov	r2, r3
 8005da2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005da6:	61fb      	str	r3, [r7, #28]
 8005da8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005daa:	69b9      	ldr	r1, [r7, #24]
 8005dac:	69fa      	ldr	r2, [r7, #28]
 8005dae:	e841 2300 	strex	r3, r2, [r1]
 8005db2:	617b      	str	r3, [r7, #20]
   return(result);
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1e4      	bne.n	8005d84 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005dba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 f85b 	bl	8005e7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005dc6:	e03f      	b.n	8005e48 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00e      	beq.n	8005df2 <HAL_UART_IRQHandler+0x55a>
 8005dd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d008      	beq.n	8005df2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005de8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 fe6d 	bl	8006aca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005df0:	e02d      	b.n	8005e4e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00e      	beq.n	8005e1c <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005dfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d008      	beq.n	8005e1c <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d01c      	beq.n	8005e4c <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	4798      	blx	r3
    }
    return;
 8005e1a:	e017      	b.n	8005e4c <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d012      	beq.n	8005e4e <HAL_UART_IRQHandler+0x5b6>
 8005e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00c      	beq.n	8005e4e <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 fcc2 	bl	80067be <UART_EndTransmit_IT>
    return;
 8005e3a:	e008      	b.n	8005e4e <HAL_UART_IRQHandler+0x5b6>
      return;
 8005e3c:	bf00      	nop
 8005e3e:	e006      	b.n	8005e4e <HAL_UART_IRQHandler+0x5b6>
    return;
 8005e40:	bf00      	nop
 8005e42:	e004      	b.n	8005e4e <HAL_UART_IRQHandler+0x5b6>
      return;
 8005e44:	bf00      	nop
 8005e46:	e002      	b.n	8005e4e <HAL_UART_IRQHandler+0x5b6>
      return;
 8005e48:	bf00      	nop
 8005e4a:	e000      	b.n	8005e4e <HAL_UART_IRQHandler+0x5b6>
    return;
 8005e4c:	bf00      	nop
  }

}
 8005e4e:	37e8      	adds	r7, #232	; 0xe8
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005e5c:	bf00      	nop
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	460b      	mov	r3, r1
 8005e86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e88:	bf00      	nop
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b088      	sub	sp, #32
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	689a      	ldr	r2, [r3, #8]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	431a      	orrs	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	431a      	orrs	r2, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	69db      	ldr	r3, [r3, #28]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005ec2:	f023 030c 	bic.w	r3, r3, #12
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	6812      	ldr	r2, [r2, #0]
 8005eca:	6979      	ldr	r1, [r7, #20]
 8005ecc:	430b      	orrs	r3, r1
 8005ece:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	68da      	ldr	r2, [r3, #12]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a1b      	ldr	r3, [r3, #32]
 8005ef0:	697a      	ldr	r2, [r7, #20]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	697a      	ldr	r2, [r7, #20]
 8005f06:	430a      	orrs	r2, r1
 8005f08:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4aae      	ldr	r2, [pc, #696]	; (80061c8 <UART_SetConfig+0x334>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d120      	bne.n	8005f56 <UART_SetConfig+0xc2>
 8005f14:	4bad      	ldr	r3, [pc, #692]	; (80061cc <UART_SetConfig+0x338>)
 8005f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f18:	f003 0303 	and.w	r3, r3, #3
 8005f1c:	2b03      	cmp	r3, #3
 8005f1e:	d817      	bhi.n	8005f50 <UART_SetConfig+0xbc>
 8005f20:	a201      	add	r2, pc, #4	; (adr r2, 8005f28 <UART_SetConfig+0x94>)
 8005f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f26:	bf00      	nop
 8005f28:	08005f39 	.word	0x08005f39
 8005f2c:	08005f45 	.word	0x08005f45
 8005f30:	08005f4b 	.word	0x08005f4b
 8005f34:	08005f3f 	.word	0x08005f3f
 8005f38:	2301      	movs	r3, #1
 8005f3a:	77fb      	strb	r3, [r7, #31]
 8005f3c:	e0b5      	b.n	80060aa <UART_SetConfig+0x216>
 8005f3e:	2302      	movs	r3, #2
 8005f40:	77fb      	strb	r3, [r7, #31]
 8005f42:	e0b2      	b.n	80060aa <UART_SetConfig+0x216>
 8005f44:	2304      	movs	r3, #4
 8005f46:	77fb      	strb	r3, [r7, #31]
 8005f48:	e0af      	b.n	80060aa <UART_SetConfig+0x216>
 8005f4a:	2308      	movs	r3, #8
 8005f4c:	77fb      	strb	r3, [r7, #31]
 8005f4e:	e0ac      	b.n	80060aa <UART_SetConfig+0x216>
 8005f50:	2310      	movs	r3, #16
 8005f52:	77fb      	strb	r3, [r7, #31]
 8005f54:	e0a9      	b.n	80060aa <UART_SetConfig+0x216>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a9d      	ldr	r2, [pc, #628]	; (80061d0 <UART_SetConfig+0x33c>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d124      	bne.n	8005faa <UART_SetConfig+0x116>
 8005f60:	4b9a      	ldr	r3, [pc, #616]	; (80061cc <UART_SetConfig+0x338>)
 8005f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f68:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f6c:	d011      	beq.n	8005f92 <UART_SetConfig+0xfe>
 8005f6e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f72:	d817      	bhi.n	8005fa4 <UART_SetConfig+0x110>
 8005f74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f78:	d011      	beq.n	8005f9e <UART_SetConfig+0x10a>
 8005f7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f7e:	d811      	bhi.n	8005fa4 <UART_SetConfig+0x110>
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d003      	beq.n	8005f8c <UART_SetConfig+0xf8>
 8005f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f88:	d006      	beq.n	8005f98 <UART_SetConfig+0x104>
 8005f8a:	e00b      	b.n	8005fa4 <UART_SetConfig+0x110>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	77fb      	strb	r3, [r7, #31]
 8005f90:	e08b      	b.n	80060aa <UART_SetConfig+0x216>
 8005f92:	2302      	movs	r3, #2
 8005f94:	77fb      	strb	r3, [r7, #31]
 8005f96:	e088      	b.n	80060aa <UART_SetConfig+0x216>
 8005f98:	2304      	movs	r3, #4
 8005f9a:	77fb      	strb	r3, [r7, #31]
 8005f9c:	e085      	b.n	80060aa <UART_SetConfig+0x216>
 8005f9e:	2308      	movs	r3, #8
 8005fa0:	77fb      	strb	r3, [r7, #31]
 8005fa2:	e082      	b.n	80060aa <UART_SetConfig+0x216>
 8005fa4:	2310      	movs	r3, #16
 8005fa6:	77fb      	strb	r3, [r7, #31]
 8005fa8:	e07f      	b.n	80060aa <UART_SetConfig+0x216>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a89      	ldr	r2, [pc, #548]	; (80061d4 <UART_SetConfig+0x340>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d124      	bne.n	8005ffe <UART_SetConfig+0x16a>
 8005fb4:	4b85      	ldr	r3, [pc, #532]	; (80061cc <UART_SetConfig+0x338>)
 8005fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005fbc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005fc0:	d011      	beq.n	8005fe6 <UART_SetConfig+0x152>
 8005fc2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005fc6:	d817      	bhi.n	8005ff8 <UART_SetConfig+0x164>
 8005fc8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005fcc:	d011      	beq.n	8005ff2 <UART_SetConfig+0x15e>
 8005fce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005fd2:	d811      	bhi.n	8005ff8 <UART_SetConfig+0x164>
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d003      	beq.n	8005fe0 <UART_SetConfig+0x14c>
 8005fd8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005fdc:	d006      	beq.n	8005fec <UART_SetConfig+0x158>
 8005fde:	e00b      	b.n	8005ff8 <UART_SetConfig+0x164>
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	77fb      	strb	r3, [r7, #31]
 8005fe4:	e061      	b.n	80060aa <UART_SetConfig+0x216>
 8005fe6:	2302      	movs	r3, #2
 8005fe8:	77fb      	strb	r3, [r7, #31]
 8005fea:	e05e      	b.n	80060aa <UART_SetConfig+0x216>
 8005fec:	2304      	movs	r3, #4
 8005fee:	77fb      	strb	r3, [r7, #31]
 8005ff0:	e05b      	b.n	80060aa <UART_SetConfig+0x216>
 8005ff2:	2308      	movs	r3, #8
 8005ff4:	77fb      	strb	r3, [r7, #31]
 8005ff6:	e058      	b.n	80060aa <UART_SetConfig+0x216>
 8005ff8:	2310      	movs	r3, #16
 8005ffa:	77fb      	strb	r3, [r7, #31]
 8005ffc:	e055      	b.n	80060aa <UART_SetConfig+0x216>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a75      	ldr	r2, [pc, #468]	; (80061d8 <UART_SetConfig+0x344>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d124      	bne.n	8006052 <UART_SetConfig+0x1be>
 8006008:	4b70      	ldr	r3, [pc, #448]	; (80061cc <UART_SetConfig+0x338>)
 800600a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800600c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006010:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006014:	d011      	beq.n	800603a <UART_SetConfig+0x1a6>
 8006016:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800601a:	d817      	bhi.n	800604c <UART_SetConfig+0x1b8>
 800601c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006020:	d011      	beq.n	8006046 <UART_SetConfig+0x1b2>
 8006022:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006026:	d811      	bhi.n	800604c <UART_SetConfig+0x1b8>
 8006028:	2b00      	cmp	r3, #0
 800602a:	d003      	beq.n	8006034 <UART_SetConfig+0x1a0>
 800602c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006030:	d006      	beq.n	8006040 <UART_SetConfig+0x1ac>
 8006032:	e00b      	b.n	800604c <UART_SetConfig+0x1b8>
 8006034:	2300      	movs	r3, #0
 8006036:	77fb      	strb	r3, [r7, #31]
 8006038:	e037      	b.n	80060aa <UART_SetConfig+0x216>
 800603a:	2302      	movs	r3, #2
 800603c:	77fb      	strb	r3, [r7, #31]
 800603e:	e034      	b.n	80060aa <UART_SetConfig+0x216>
 8006040:	2304      	movs	r3, #4
 8006042:	77fb      	strb	r3, [r7, #31]
 8006044:	e031      	b.n	80060aa <UART_SetConfig+0x216>
 8006046:	2308      	movs	r3, #8
 8006048:	77fb      	strb	r3, [r7, #31]
 800604a:	e02e      	b.n	80060aa <UART_SetConfig+0x216>
 800604c:	2310      	movs	r3, #16
 800604e:	77fb      	strb	r3, [r7, #31]
 8006050:	e02b      	b.n	80060aa <UART_SetConfig+0x216>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a61      	ldr	r2, [pc, #388]	; (80061dc <UART_SetConfig+0x348>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d124      	bne.n	80060a6 <UART_SetConfig+0x212>
 800605c:	4b5b      	ldr	r3, [pc, #364]	; (80061cc <UART_SetConfig+0x338>)
 800605e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006060:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006064:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006068:	d011      	beq.n	800608e <UART_SetConfig+0x1fa>
 800606a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800606e:	d817      	bhi.n	80060a0 <UART_SetConfig+0x20c>
 8006070:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006074:	d011      	beq.n	800609a <UART_SetConfig+0x206>
 8006076:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800607a:	d811      	bhi.n	80060a0 <UART_SetConfig+0x20c>
 800607c:	2b00      	cmp	r3, #0
 800607e:	d003      	beq.n	8006088 <UART_SetConfig+0x1f4>
 8006080:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006084:	d006      	beq.n	8006094 <UART_SetConfig+0x200>
 8006086:	e00b      	b.n	80060a0 <UART_SetConfig+0x20c>
 8006088:	2300      	movs	r3, #0
 800608a:	77fb      	strb	r3, [r7, #31]
 800608c:	e00d      	b.n	80060aa <UART_SetConfig+0x216>
 800608e:	2302      	movs	r3, #2
 8006090:	77fb      	strb	r3, [r7, #31]
 8006092:	e00a      	b.n	80060aa <UART_SetConfig+0x216>
 8006094:	2304      	movs	r3, #4
 8006096:	77fb      	strb	r3, [r7, #31]
 8006098:	e007      	b.n	80060aa <UART_SetConfig+0x216>
 800609a:	2308      	movs	r3, #8
 800609c:	77fb      	strb	r3, [r7, #31]
 800609e:	e004      	b.n	80060aa <UART_SetConfig+0x216>
 80060a0:	2310      	movs	r3, #16
 80060a2:	77fb      	strb	r3, [r7, #31]
 80060a4:	e001      	b.n	80060aa <UART_SetConfig+0x216>
 80060a6:	2310      	movs	r3, #16
 80060a8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	69db      	ldr	r3, [r3, #28]
 80060ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060b2:	d15c      	bne.n	800616e <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 80060b4:	7ffb      	ldrb	r3, [r7, #31]
 80060b6:	2b08      	cmp	r3, #8
 80060b8:	d827      	bhi.n	800610a <UART_SetConfig+0x276>
 80060ba:	a201      	add	r2, pc, #4	; (adr r2, 80060c0 <UART_SetConfig+0x22c>)
 80060bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c0:	080060e5 	.word	0x080060e5
 80060c4:	080060ed 	.word	0x080060ed
 80060c8:	080060f5 	.word	0x080060f5
 80060cc:	0800610b 	.word	0x0800610b
 80060d0:	080060fb 	.word	0x080060fb
 80060d4:	0800610b 	.word	0x0800610b
 80060d8:	0800610b 	.word	0x0800610b
 80060dc:	0800610b 	.word	0x0800610b
 80060e0:	08006103 	.word	0x08006103
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060e4:	f7fd fd7e 	bl	8003be4 <HAL_RCC_GetPCLK1Freq>
 80060e8:	61b8      	str	r0, [r7, #24]
        break;
 80060ea:	e013      	b.n	8006114 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060ec:	f7fd fd9c 	bl	8003c28 <HAL_RCC_GetPCLK2Freq>
 80060f0:	61b8      	str	r0, [r7, #24]
        break;
 80060f2:	e00f      	b.n	8006114 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060f4:	4b3a      	ldr	r3, [pc, #232]	; (80061e0 <UART_SetConfig+0x34c>)
 80060f6:	61bb      	str	r3, [r7, #24]
        break;
 80060f8:	e00c      	b.n	8006114 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060fa:	f7fd fcfd 	bl	8003af8 <HAL_RCC_GetSysClockFreq>
 80060fe:	61b8      	str	r0, [r7, #24]
        break;
 8006100:	e008      	b.n	8006114 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006106:	61bb      	str	r3, [r7, #24]
        break;
 8006108:	e004      	b.n	8006114 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800610a:	2300      	movs	r3, #0
 800610c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	77bb      	strb	r3, [r7, #30]
        break;
 8006112:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	2b00      	cmp	r3, #0
 8006118:	f000 8085 	beq.w	8006226 <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	005a      	lsls	r2, r3, #1
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	085b      	lsrs	r3, r3, #1
 8006126:	441a      	add	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006130:	b29b      	uxth	r3, r3
 8006132:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	2b0f      	cmp	r3, #15
 8006138:	d916      	bls.n	8006168 <UART_SetConfig+0x2d4>
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006140:	d212      	bcs.n	8006168 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	b29b      	uxth	r3, r3
 8006146:	f023 030f 	bic.w	r3, r3, #15
 800614a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	085b      	lsrs	r3, r3, #1
 8006150:	b29b      	uxth	r3, r3
 8006152:	f003 0307 	and.w	r3, r3, #7
 8006156:	b29a      	uxth	r2, r3
 8006158:	89fb      	ldrh	r3, [r7, #14]
 800615a:	4313      	orrs	r3, r2
 800615c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	89fa      	ldrh	r2, [r7, #14]
 8006164:	60da      	str	r2, [r3, #12]
 8006166:	e05e      	b.n	8006226 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	77bb      	strb	r3, [r7, #30]
 800616c:	e05b      	b.n	8006226 <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 800616e:	7ffb      	ldrb	r3, [r7, #31]
 8006170:	2b08      	cmp	r3, #8
 8006172:	d837      	bhi.n	80061e4 <UART_SetConfig+0x350>
 8006174:	a201      	add	r2, pc, #4	; (adr r2, 800617c <UART_SetConfig+0x2e8>)
 8006176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800617a:	bf00      	nop
 800617c:	080061a1 	.word	0x080061a1
 8006180:	080061a9 	.word	0x080061a9
 8006184:	080061b1 	.word	0x080061b1
 8006188:	080061e5 	.word	0x080061e5
 800618c:	080061b7 	.word	0x080061b7
 8006190:	080061e5 	.word	0x080061e5
 8006194:	080061e5 	.word	0x080061e5
 8006198:	080061e5 	.word	0x080061e5
 800619c:	080061bf 	.word	0x080061bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061a0:	f7fd fd20 	bl	8003be4 <HAL_RCC_GetPCLK1Freq>
 80061a4:	61b8      	str	r0, [r7, #24]
        break;
 80061a6:	e022      	b.n	80061ee <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061a8:	f7fd fd3e 	bl	8003c28 <HAL_RCC_GetPCLK2Freq>
 80061ac:	61b8      	str	r0, [r7, #24]
        break;
 80061ae:	e01e      	b.n	80061ee <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061b0:	4b0b      	ldr	r3, [pc, #44]	; (80061e0 <UART_SetConfig+0x34c>)
 80061b2:	61bb      	str	r3, [r7, #24]
        break;
 80061b4:	e01b      	b.n	80061ee <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061b6:	f7fd fc9f 	bl	8003af8 <HAL_RCC_GetSysClockFreq>
 80061ba:	61b8      	str	r0, [r7, #24]
        break;
 80061bc:	e017      	b.n	80061ee <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061c2:	61bb      	str	r3, [r7, #24]
        break;
 80061c4:	e013      	b.n	80061ee <UART_SetConfig+0x35a>
 80061c6:	bf00      	nop
 80061c8:	40013800 	.word	0x40013800
 80061cc:	40021000 	.word	0x40021000
 80061d0:	40004400 	.word	0x40004400
 80061d4:	40004800 	.word	0x40004800
 80061d8:	40004c00 	.word	0x40004c00
 80061dc:	40005000 	.word	0x40005000
 80061e0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80061e4:	2300      	movs	r3, #0
 80061e6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	77bb      	strb	r3, [r7, #30]
        break;
 80061ec:	bf00      	nop
    }

    if (pclk != 0U)
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d018      	beq.n	8006226 <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	085a      	lsrs	r2, r3, #1
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	441a      	add	r2, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	fbb2 f3f3 	udiv	r3, r2, r3
 8006206:	b29b      	uxth	r3, r3
 8006208:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	2b0f      	cmp	r3, #15
 800620e:	d908      	bls.n	8006222 <UART_SetConfig+0x38e>
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006216:	d204      	bcs.n	8006222 <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	60da      	str	r2, [r3, #12]
 8006220:	e001      	b.n	8006226 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006232:	7fbb      	ldrb	r3, [r7, #30]
}
 8006234:	4618      	mov	r0, r3
 8006236:	3720      	adds	r7, #32
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006248:	f003 0301 	and.w	r3, r3, #1
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00a      	beq.n	8006266 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	430a      	orrs	r2, r1
 8006264:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626a:	f003 0302 	and.w	r3, r3, #2
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00a      	beq.n	8006288 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	430a      	orrs	r2, r1
 8006286:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628c:	f003 0304 	and.w	r3, r3, #4
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00a      	beq.n	80062aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	430a      	orrs	r2, r1
 80062a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ae:	f003 0308 	and.w	r3, r3, #8
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00a      	beq.n	80062cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	430a      	orrs	r2, r1
 80062ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d0:	f003 0310 	and.w	r3, r3, #16
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00a      	beq.n	80062ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	430a      	orrs	r2, r1
 80062ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f2:	f003 0320 	and.w	r3, r3, #32
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00a      	beq.n	8006310 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	430a      	orrs	r2, r1
 800630e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006318:	2b00      	cmp	r3, #0
 800631a:	d01a      	beq.n	8006352 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	430a      	orrs	r2, r1
 8006330:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006336:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800633a:	d10a      	bne.n	8006352 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	430a      	orrs	r2, r1
 8006350:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00a      	beq.n	8006374 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	430a      	orrs	r2, r1
 8006372:	605a      	str	r2, [r3, #4]
  }
}
 8006374:	bf00      	nop
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af02      	add	r7, sp, #8
 8006386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006390:	f7fb fdae 	bl	8001ef0 <HAL_GetTick>
 8006394:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0308 	and.w	r3, r3, #8
 80063a0:	2b08      	cmp	r3, #8
 80063a2:	d10e      	bne.n	80063c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063a8:	9300      	str	r3, [sp, #0]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 f82d 	bl	8006412 <UART_WaitOnFlagUntilTimeout>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d001      	beq.n	80063c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e023      	b.n	800640a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 0304 	and.w	r3, r3, #4
 80063cc:	2b04      	cmp	r3, #4
 80063ce:	d10e      	bne.n	80063ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063d4:	9300      	str	r3, [sp, #0]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 f817 	bl	8006412 <UART_WaitOnFlagUntilTimeout>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d001      	beq.n	80063ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e00d      	b.n	800640a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2220      	movs	r2, #32
 80063f2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2220      	movs	r2, #32
 80063f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006412:	b580      	push	{r7, lr}
 8006414:	b09c      	sub	sp, #112	; 0x70
 8006416:	af00      	add	r7, sp, #0
 8006418:	60f8      	str	r0, [r7, #12]
 800641a:	60b9      	str	r1, [r7, #8]
 800641c:	603b      	str	r3, [r7, #0]
 800641e:	4613      	mov	r3, r2
 8006420:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006422:	e0a5      	b.n	8006570 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006424:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800642a:	f000 80a1 	beq.w	8006570 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800642e:	f7fb fd5f 	bl	8001ef0 <HAL_GetTick>
 8006432:	4602      	mov	r2, r0
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800643a:	429a      	cmp	r2, r3
 800643c:	d302      	bcc.n	8006444 <UART_WaitOnFlagUntilTimeout+0x32>
 800643e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006440:	2b00      	cmp	r3, #0
 8006442:	d13e      	bne.n	80064c2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800644c:	e853 3f00 	ldrex	r3, [r3]
 8006450:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006454:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006458:	667b      	str	r3, [r7, #100]	; 0x64
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	461a      	mov	r2, r3
 8006460:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006462:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006464:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006466:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006468:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800646a:	e841 2300 	strex	r3, r2, [r1]
 800646e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006470:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1e6      	bne.n	8006444 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	3308      	adds	r3, #8
 800647c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006480:	e853 3f00 	ldrex	r3, [r3]
 8006484:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006488:	f023 0301 	bic.w	r3, r3, #1
 800648c:	663b      	str	r3, [r7, #96]	; 0x60
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	3308      	adds	r3, #8
 8006494:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006496:	64ba      	str	r2, [r7, #72]	; 0x48
 8006498:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800649c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800649e:	e841 2300 	strex	r3, r2, [r1]
 80064a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80064a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1e5      	bne.n	8006476 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2220      	movs	r2, #32
 80064ae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2220      	movs	r2, #32
 80064b4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80064be:	2303      	movs	r3, #3
 80064c0:	e067      	b.n	8006592 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0304 	and.w	r3, r3, #4
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d04f      	beq.n	8006570 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	69db      	ldr	r3, [r3, #28]
 80064d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064de:	d147      	bne.n	8006570 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064e8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f2:	e853 3f00 	ldrex	r3, [r3]
 80064f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80064fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	461a      	mov	r2, r3
 8006506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006508:	637b      	str	r3, [r7, #52]	; 0x34
 800650a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800650e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006510:	e841 2300 	strex	r3, r2, [r1]
 8006514:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1e6      	bne.n	80064ea <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	3308      	adds	r3, #8
 8006522:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	e853 3f00 	ldrex	r3, [r3]
 800652a:	613b      	str	r3, [r7, #16]
   return(result);
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	f023 0301 	bic.w	r3, r3, #1
 8006532:	66bb      	str	r3, [r7, #104]	; 0x68
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	3308      	adds	r3, #8
 800653a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800653c:	623a      	str	r2, [r7, #32]
 800653e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006540:	69f9      	ldr	r1, [r7, #28]
 8006542:	6a3a      	ldr	r2, [r7, #32]
 8006544:	e841 2300 	strex	r3, r2, [r1]
 8006548:	61bb      	str	r3, [r7, #24]
   return(result);
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1e5      	bne.n	800651c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2220      	movs	r2, #32
 8006554:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2220      	movs	r2, #32
 800655a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2220      	movs	r2, #32
 8006560:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	e010      	b.n	8006592 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	69da      	ldr	r2, [r3, #28]
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	4013      	ands	r3, r2
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	429a      	cmp	r2, r3
 800657e:	bf0c      	ite	eq
 8006580:	2301      	moveq	r3, #1
 8006582:	2300      	movne	r3, #0
 8006584:	b2db      	uxtb	r3, r3
 8006586:	461a      	mov	r2, r3
 8006588:	79fb      	ldrb	r3, [r7, #7]
 800658a:	429a      	cmp	r2, r3
 800658c:	f43f af4a 	beq.w	8006424 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3770      	adds	r7, #112	; 0x70
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
	...

0800659c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800659c:	b480      	push	{r7}
 800659e:	b091      	sub	sp, #68	; 0x44
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	4613      	mov	r3, r2
 80065a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	68ba      	ldr	r2, [r7, #8]
 80065ae:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	88fa      	ldrh	r2, [r7, #6]
 80065b4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	88fa      	ldrh	r2, [r7, #6]
 80065bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ce:	d10e      	bne.n	80065ee <UART_Start_Receive_IT+0x52>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d105      	bne.n	80065e4 <UART_Start_Receive_IT+0x48>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f240 12ff 	movw	r2, #511	; 0x1ff
 80065de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80065e2:	e01a      	b.n	800661a <UART_Start_Receive_IT+0x7e>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	22ff      	movs	r2, #255	; 0xff
 80065e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80065ec:	e015      	b.n	800661a <UART_Start_Receive_IT+0x7e>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d10d      	bne.n	8006612 <UART_Start_Receive_IT+0x76>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d104      	bne.n	8006608 <UART_Start_Receive_IT+0x6c>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	22ff      	movs	r2, #255	; 0xff
 8006602:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006606:	e008      	b.n	800661a <UART_Start_Receive_IT+0x7e>
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	227f      	movs	r2, #127	; 0x7f
 800660c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006610:	e003      	b.n	800661a <UART_Start_Receive_IT+0x7e>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2222      	movs	r2, #34	; 0x22
 8006626:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	3308      	adds	r3, #8
 800662e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006632:	e853 3f00 	ldrex	r3, [r3]
 8006636:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663a:	f043 0301 	orr.w	r3, r3, #1
 800663e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	3308      	adds	r3, #8
 8006646:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006648:	637a      	str	r2, [r7, #52]	; 0x34
 800664a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800664e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006650:	e841 2300 	strex	r3, r2, [r1]
 8006654:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006658:	2b00      	cmp	r3, #0
 800665a:	d1e5      	bne.n	8006628 <UART_Start_Receive_IT+0x8c>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006664:	d107      	bne.n	8006676 <UART_Start_Receive_IT+0xda>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d103      	bne.n	8006676 <UART_Start_Receive_IT+0xda>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	4a14      	ldr	r2, [pc, #80]	; (80066c4 <UART_Start_Receive_IT+0x128>)
 8006672:	665a      	str	r2, [r3, #100]	; 0x64
 8006674:	e002      	b.n	800667c <UART_Start_Receive_IT+0xe0>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	4a13      	ldr	r2, [pc, #76]	; (80066c8 <UART_Start_Receive_IT+0x12c>)
 800667a:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	e853 3f00 	ldrex	r3, [r3]
 8006690:	613b      	str	r3, [r7, #16]
   return(result);
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006698:	63bb      	str	r3, [r7, #56]	; 0x38
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	461a      	mov	r2, r3
 80066a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a2:	623b      	str	r3, [r7, #32]
 80066a4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a6:	69f9      	ldr	r1, [r7, #28]
 80066a8:	6a3a      	ldr	r2, [r7, #32]
 80066aa:	e841 2300 	strex	r3, r2, [r1]
 80066ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1e6      	bne.n	8006684 <UART_Start_Receive_IT+0xe8>
  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3744      	adds	r7, #68	; 0x44
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr
 80066c4:	0800696f 	.word	0x0800696f
 80066c8:	08006813 	.word	0x08006813

080066cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b095      	sub	sp, #84	; 0x54
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066dc:	e853 3f00 	ldrex	r3, [r3]
 80066e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	461a      	mov	r2, r3
 80066f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066f2:	643b      	str	r3, [r7, #64]	; 0x40
 80066f4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066fa:	e841 2300 	strex	r3, r2, [r1]
 80066fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006702:	2b00      	cmp	r3, #0
 8006704:	d1e6      	bne.n	80066d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	3308      	adds	r3, #8
 800670c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670e:	6a3b      	ldr	r3, [r7, #32]
 8006710:	e853 3f00 	ldrex	r3, [r3]
 8006714:	61fb      	str	r3, [r7, #28]
   return(result);
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	f023 0301 	bic.w	r3, r3, #1
 800671c:	64bb      	str	r3, [r7, #72]	; 0x48
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	3308      	adds	r3, #8
 8006724:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006726:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006728:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800672c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800672e:	e841 2300 	strex	r3, r2, [r1]
 8006732:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1e5      	bne.n	8006706 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800673e:	2b01      	cmp	r3, #1
 8006740:	d118      	bne.n	8006774 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	e853 3f00 	ldrex	r3, [r3]
 800674e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	f023 0310 	bic.w	r3, r3, #16
 8006756:	647b      	str	r3, [r7, #68]	; 0x44
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	461a      	mov	r2, r3
 800675e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006760:	61bb      	str	r3, [r7, #24]
 8006762:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006764:	6979      	ldr	r1, [r7, #20]
 8006766:	69ba      	ldr	r2, [r7, #24]
 8006768:	e841 2300 	strex	r3, r2, [r1]
 800676c:	613b      	str	r3, [r7, #16]
   return(result);
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d1e6      	bne.n	8006742 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2220      	movs	r2, #32
 8006778:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006786:	bf00      	nop
 8006788:	3754      	adds	r7, #84	; 0x54
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr

08006792 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006792:	b580      	push	{r7, lr}
 8006794:	b084      	sub	sp, #16
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f7ff fb59 	bl	8005e68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067b6:	bf00      	nop
 80067b8:	3710      	adds	r7, #16
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067be:	b580      	push	{r7, lr}
 80067c0:	b088      	sub	sp, #32
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	e853 3f00 	ldrex	r3, [r3]
 80067d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067da:	61fb      	str	r3, [r7, #28]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	461a      	mov	r2, r3
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	61bb      	str	r3, [r7, #24]
 80067e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e8:	6979      	ldr	r1, [r7, #20]
 80067ea:	69ba      	ldr	r2, [r7, #24]
 80067ec:	e841 2300 	strex	r3, r2, [r1]
 80067f0:	613b      	str	r3, [r7, #16]
   return(result);
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d1e6      	bne.n	80067c6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2220      	movs	r2, #32
 80067fc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f7ff fb25 	bl	8005e54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800680a:	bf00      	nop
 800680c:	3720      	adds	r7, #32
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b096      	sub	sp, #88	; 0x58
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006820:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006828:	2b22      	cmp	r3, #34	; 0x22
 800682a:	f040 8094 	bne.w	8006956 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006834:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006838:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800683c:	b2d9      	uxtb	r1, r3
 800683e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006842:	b2da      	uxtb	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006848:	400a      	ands	r2, r1
 800684a:	b2d2      	uxtb	r2, r2
 800684c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006852:	1c5a      	adds	r2, r3, #1
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800685e:	b29b      	uxth	r3, r3
 8006860:	3b01      	subs	r3, #1
 8006862:	b29a      	uxth	r2, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006870:	b29b      	uxth	r3, r3
 8006872:	2b00      	cmp	r3, #0
 8006874:	d177      	bne.n	8006966 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687e:	e853 3f00 	ldrex	r3, [r3]
 8006882:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006886:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800688a:	653b      	str	r3, [r7, #80]	; 0x50
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	461a      	mov	r2, r3
 8006892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006894:	647b      	str	r3, [r7, #68]	; 0x44
 8006896:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006898:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800689a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800689c:	e841 2300 	strex	r3, r2, [r1]
 80068a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1e6      	bne.n	8006876 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	3308      	adds	r3, #8
 80068ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b2:	e853 3f00 	ldrex	r3, [r3]
 80068b6:	623b      	str	r3, [r7, #32]
   return(result);
 80068b8:	6a3b      	ldr	r3, [r7, #32]
 80068ba:	f023 0301 	bic.w	r3, r3, #1
 80068be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	3308      	adds	r3, #8
 80068c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80068c8:	633a      	str	r2, [r7, #48]	; 0x30
 80068ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068d0:	e841 2300 	strex	r3, r2, [r1]
 80068d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80068d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1e5      	bne.n	80068a8 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2220      	movs	r2, #32
 80068e0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d12e      	bne.n	800694e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	e853 3f00 	ldrex	r3, [r3]
 8006902:	60fb      	str	r3, [r7, #12]
   return(result);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f023 0310 	bic.w	r3, r3, #16
 800690a:	64bb      	str	r3, [r7, #72]	; 0x48
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	461a      	mov	r2, r3
 8006912:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006914:	61fb      	str	r3, [r7, #28]
 8006916:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006918:	69b9      	ldr	r1, [r7, #24]
 800691a:	69fa      	ldr	r2, [r7, #28]
 800691c:	e841 2300 	strex	r3, r2, [r1]
 8006920:	617b      	str	r3, [r7, #20]
   return(result);
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1e6      	bne.n	80068f6 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	69db      	ldr	r3, [r3, #28]
 800692e:	f003 0310 	and.w	r3, r3, #16
 8006932:	2b10      	cmp	r3, #16
 8006934:	d103      	bne.n	800693e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2210      	movs	r2, #16
 800693c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006944:	4619      	mov	r1, r3
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f7ff fa98 	bl	8005e7c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800694c:	e00b      	b.n	8006966 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f7fa f976 	bl	8000c40 <HAL_UART_RxCpltCallback>
}
 8006954:	e007      	b.n	8006966 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	699a      	ldr	r2, [r3, #24]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f042 0208 	orr.w	r2, r2, #8
 8006964:	619a      	str	r2, [r3, #24]
}
 8006966:	bf00      	nop
 8006968:	3758      	adds	r7, #88	; 0x58
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800696e:	b580      	push	{r7, lr}
 8006970:	b096      	sub	sp, #88	; 0x58
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800697c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006984:	2b22      	cmp	r3, #34	; 0x22
 8006986:	f040 8094 	bne.w	8006ab2 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006990:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006998:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800699a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800699e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80069a2:	4013      	ands	r3, r2
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069a8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ae:	1c9a      	adds	r2, r3, #2
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	3b01      	subs	r3, #1
 80069be:	b29a      	uxth	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d177      	bne.n	8006ac2 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069da:	e853 3f00 	ldrex	r3, [r3]
 80069de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80069e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	461a      	mov	r2, r3
 80069ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069f0:	643b      	str	r3, [r7, #64]	; 0x40
 80069f2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80069f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069f8:	e841 2300 	strex	r3, r2, [r1]
 80069fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1e6      	bne.n	80069d2 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	3308      	adds	r3, #8
 8006a0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0c:	6a3b      	ldr	r3, [r7, #32]
 8006a0e:	e853 3f00 	ldrex	r3, [r3]
 8006a12:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	f023 0301 	bic.w	r3, r3, #1
 8006a1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	3308      	adds	r3, #8
 8006a22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a24:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a2c:	e841 2300 	strex	r3, r2, [r1]
 8006a30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1e5      	bne.n	8006a04 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2220      	movs	r2, #32
 8006a3c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d12e      	bne.n	8006aaa <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	e853 3f00 	ldrex	r3, [r3]
 8006a5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	f023 0310 	bic.w	r3, r3, #16
 8006a66:	647b      	str	r3, [r7, #68]	; 0x44
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a70:	61bb      	str	r3, [r7, #24]
 8006a72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a74:	6979      	ldr	r1, [r7, #20]
 8006a76:	69ba      	ldr	r2, [r7, #24]
 8006a78:	e841 2300 	strex	r3, r2, [r1]
 8006a7c:	613b      	str	r3, [r7, #16]
   return(result);
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1e6      	bne.n	8006a52 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	69db      	ldr	r3, [r3, #28]
 8006a8a:	f003 0310 	and.w	r3, r3, #16
 8006a8e:	2b10      	cmp	r3, #16
 8006a90:	d103      	bne.n	8006a9a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2210      	movs	r2, #16
 8006a98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f7ff f9ea 	bl	8005e7c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006aa8:	e00b      	b.n	8006ac2 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f7fa f8c8 	bl	8000c40 <HAL_UART_RxCpltCallback>
}
 8006ab0:	e007      	b.n	8006ac2 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	699a      	ldr	r2, [r3, #24]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f042 0208 	orr.w	r2, r2, #8
 8006ac0:	619a      	str	r2, [r3, #24]
}
 8006ac2:	bf00      	nop
 8006ac4:	3758      	adds	r7, #88	; 0x58
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006aca:	b480      	push	{r7}
 8006acc:	b083      	sub	sp, #12
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006ad2:	bf00      	nop
 8006ad4:	370c      	adds	r7, #12
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr

08006ade <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006ade:	b480      	push	{r7}
 8006ae0:	b085      	sub	sp, #20
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006ae6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006aea:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	43db      	mvns	r3, r3
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	4013      	ands	r3, r2
 8006afe:	b29a      	uxth	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3714      	adds	r7, #20
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006b14:	b084      	sub	sp, #16
 8006b16:	b480      	push	{r7}
 8006b18:	b083      	sub	sp, #12
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
 8006b1e:	f107 0014 	add.w	r0, r7, #20
 8006b22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	b004      	add	sp, #16
 8006b54:	4770      	bx	lr
	...

08006b58 <__errno>:
 8006b58:	4b01      	ldr	r3, [pc, #4]	; (8006b60 <__errno+0x8>)
 8006b5a:	6818      	ldr	r0, [r3, #0]
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	20000088 	.word	0x20000088

08006b64 <__libc_init_array>:
 8006b64:	b570      	push	{r4, r5, r6, lr}
 8006b66:	4d0d      	ldr	r5, [pc, #52]	; (8006b9c <__libc_init_array+0x38>)
 8006b68:	4c0d      	ldr	r4, [pc, #52]	; (8006ba0 <__libc_init_array+0x3c>)
 8006b6a:	1b64      	subs	r4, r4, r5
 8006b6c:	10a4      	asrs	r4, r4, #2
 8006b6e:	2600      	movs	r6, #0
 8006b70:	42a6      	cmp	r6, r4
 8006b72:	d109      	bne.n	8006b88 <__libc_init_array+0x24>
 8006b74:	4d0b      	ldr	r5, [pc, #44]	; (8006ba4 <__libc_init_array+0x40>)
 8006b76:	4c0c      	ldr	r4, [pc, #48]	; (8006ba8 <__libc_init_array+0x44>)
 8006b78:	f000 ffae 	bl	8007ad8 <_init>
 8006b7c:	1b64      	subs	r4, r4, r5
 8006b7e:	10a4      	asrs	r4, r4, #2
 8006b80:	2600      	movs	r6, #0
 8006b82:	42a6      	cmp	r6, r4
 8006b84:	d105      	bne.n	8006b92 <__libc_init_array+0x2e>
 8006b86:	bd70      	pop	{r4, r5, r6, pc}
 8006b88:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b8c:	4798      	blx	r3
 8006b8e:	3601      	adds	r6, #1
 8006b90:	e7ee      	b.n	8006b70 <__libc_init_array+0xc>
 8006b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b96:	4798      	blx	r3
 8006b98:	3601      	adds	r6, #1
 8006b9a:	e7f2      	b.n	8006b82 <__libc_init_array+0x1e>
 8006b9c:	08007d18 	.word	0x08007d18
 8006ba0:	08007d18 	.word	0x08007d18
 8006ba4:	08007d18 	.word	0x08007d18
 8006ba8:	08007d1c 	.word	0x08007d1c

08006bac <memcpy>:
 8006bac:	440a      	add	r2, r1
 8006bae:	4291      	cmp	r1, r2
 8006bb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006bb4:	d100      	bne.n	8006bb8 <memcpy+0xc>
 8006bb6:	4770      	bx	lr
 8006bb8:	b510      	push	{r4, lr}
 8006bba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bc2:	4291      	cmp	r1, r2
 8006bc4:	d1f9      	bne.n	8006bba <memcpy+0xe>
 8006bc6:	bd10      	pop	{r4, pc}

08006bc8 <memset>:
 8006bc8:	4402      	add	r2, r0
 8006bca:	4603      	mov	r3, r0
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d100      	bne.n	8006bd2 <memset+0xa>
 8006bd0:	4770      	bx	lr
 8006bd2:	f803 1b01 	strb.w	r1, [r3], #1
 8006bd6:	e7f9      	b.n	8006bcc <memset+0x4>

08006bd8 <iprintf>:
 8006bd8:	b40f      	push	{r0, r1, r2, r3}
 8006bda:	4b0a      	ldr	r3, [pc, #40]	; (8006c04 <iprintf+0x2c>)
 8006bdc:	b513      	push	{r0, r1, r4, lr}
 8006bde:	681c      	ldr	r4, [r3, #0]
 8006be0:	b124      	cbz	r4, 8006bec <iprintf+0x14>
 8006be2:	69a3      	ldr	r3, [r4, #24]
 8006be4:	b913      	cbnz	r3, 8006bec <iprintf+0x14>
 8006be6:	4620      	mov	r0, r4
 8006be8:	f000 f890 	bl	8006d0c <__sinit>
 8006bec:	ab05      	add	r3, sp, #20
 8006bee:	9a04      	ldr	r2, [sp, #16]
 8006bf0:	68a1      	ldr	r1, [r4, #8]
 8006bf2:	9301      	str	r3, [sp, #4]
 8006bf4:	4620      	mov	r0, r4
 8006bf6:	f000 f9ad 	bl	8006f54 <_vfiprintf_r>
 8006bfa:	b002      	add	sp, #8
 8006bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c00:	b004      	add	sp, #16
 8006c02:	4770      	bx	lr
 8006c04:	20000088 	.word	0x20000088

08006c08 <strncpy>:
 8006c08:	b510      	push	{r4, lr}
 8006c0a:	3901      	subs	r1, #1
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	b132      	cbz	r2, 8006c1e <strncpy+0x16>
 8006c10:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006c14:	f803 4b01 	strb.w	r4, [r3], #1
 8006c18:	3a01      	subs	r2, #1
 8006c1a:	2c00      	cmp	r4, #0
 8006c1c:	d1f7      	bne.n	8006c0e <strncpy+0x6>
 8006c1e:	441a      	add	r2, r3
 8006c20:	2100      	movs	r1, #0
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d100      	bne.n	8006c28 <strncpy+0x20>
 8006c26:	bd10      	pop	{r4, pc}
 8006c28:	f803 1b01 	strb.w	r1, [r3], #1
 8006c2c:	e7f9      	b.n	8006c22 <strncpy+0x1a>

08006c2e <strstr>:
 8006c2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c30:	780c      	ldrb	r4, [r1, #0]
 8006c32:	b164      	cbz	r4, 8006c4e <strstr+0x20>
 8006c34:	4603      	mov	r3, r0
 8006c36:	781a      	ldrb	r2, [r3, #0]
 8006c38:	4618      	mov	r0, r3
 8006c3a:	1c5e      	adds	r6, r3, #1
 8006c3c:	b90a      	cbnz	r2, 8006c42 <strstr+0x14>
 8006c3e:	4610      	mov	r0, r2
 8006c40:	e005      	b.n	8006c4e <strstr+0x20>
 8006c42:	4294      	cmp	r4, r2
 8006c44:	d108      	bne.n	8006c58 <strstr+0x2a>
 8006c46:	460d      	mov	r5, r1
 8006c48:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8006c4c:	b902      	cbnz	r2, 8006c50 <strstr+0x22>
 8006c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c50:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8006c54:	4297      	cmp	r7, r2
 8006c56:	d0f7      	beq.n	8006c48 <strstr+0x1a>
 8006c58:	4633      	mov	r3, r6
 8006c5a:	e7ec      	b.n	8006c36 <strstr+0x8>

08006c5c <std>:
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	b510      	push	{r4, lr}
 8006c60:	4604      	mov	r4, r0
 8006c62:	e9c0 3300 	strd	r3, r3, [r0]
 8006c66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c6a:	6083      	str	r3, [r0, #8]
 8006c6c:	8181      	strh	r1, [r0, #12]
 8006c6e:	6643      	str	r3, [r0, #100]	; 0x64
 8006c70:	81c2      	strh	r2, [r0, #14]
 8006c72:	6183      	str	r3, [r0, #24]
 8006c74:	4619      	mov	r1, r3
 8006c76:	2208      	movs	r2, #8
 8006c78:	305c      	adds	r0, #92	; 0x5c
 8006c7a:	f7ff ffa5 	bl	8006bc8 <memset>
 8006c7e:	4b05      	ldr	r3, [pc, #20]	; (8006c94 <std+0x38>)
 8006c80:	6263      	str	r3, [r4, #36]	; 0x24
 8006c82:	4b05      	ldr	r3, [pc, #20]	; (8006c98 <std+0x3c>)
 8006c84:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c86:	4b05      	ldr	r3, [pc, #20]	; (8006c9c <std+0x40>)
 8006c88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c8a:	4b05      	ldr	r3, [pc, #20]	; (8006ca0 <std+0x44>)
 8006c8c:	6224      	str	r4, [r4, #32]
 8006c8e:	6323      	str	r3, [r4, #48]	; 0x30
 8006c90:	bd10      	pop	{r4, pc}
 8006c92:	bf00      	nop
 8006c94:	080074fd 	.word	0x080074fd
 8006c98:	0800751f 	.word	0x0800751f
 8006c9c:	08007557 	.word	0x08007557
 8006ca0:	0800757b 	.word	0x0800757b

08006ca4 <_cleanup_r>:
 8006ca4:	4901      	ldr	r1, [pc, #4]	; (8006cac <_cleanup_r+0x8>)
 8006ca6:	f000 b8af 	b.w	8006e08 <_fwalk_reent>
 8006caa:	bf00      	nop
 8006cac:	08007855 	.word	0x08007855

08006cb0 <__sfmoreglue>:
 8006cb0:	b570      	push	{r4, r5, r6, lr}
 8006cb2:	1e4a      	subs	r2, r1, #1
 8006cb4:	2568      	movs	r5, #104	; 0x68
 8006cb6:	4355      	muls	r5, r2
 8006cb8:	460e      	mov	r6, r1
 8006cba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006cbe:	f000 f8c5 	bl	8006e4c <_malloc_r>
 8006cc2:	4604      	mov	r4, r0
 8006cc4:	b140      	cbz	r0, 8006cd8 <__sfmoreglue+0x28>
 8006cc6:	2100      	movs	r1, #0
 8006cc8:	e9c0 1600 	strd	r1, r6, [r0]
 8006ccc:	300c      	adds	r0, #12
 8006cce:	60a0      	str	r0, [r4, #8]
 8006cd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006cd4:	f7ff ff78 	bl	8006bc8 <memset>
 8006cd8:	4620      	mov	r0, r4
 8006cda:	bd70      	pop	{r4, r5, r6, pc}

08006cdc <__sfp_lock_acquire>:
 8006cdc:	4801      	ldr	r0, [pc, #4]	; (8006ce4 <__sfp_lock_acquire+0x8>)
 8006cde:	f000 b8b3 	b.w	8006e48 <__retarget_lock_acquire_recursive>
 8006ce2:	bf00      	nop
 8006ce4:	20000738 	.word	0x20000738

08006ce8 <__sfp_lock_release>:
 8006ce8:	4801      	ldr	r0, [pc, #4]	; (8006cf0 <__sfp_lock_release+0x8>)
 8006cea:	f000 b8ae 	b.w	8006e4a <__retarget_lock_release_recursive>
 8006cee:	bf00      	nop
 8006cf0:	20000738 	.word	0x20000738

08006cf4 <__sinit_lock_acquire>:
 8006cf4:	4801      	ldr	r0, [pc, #4]	; (8006cfc <__sinit_lock_acquire+0x8>)
 8006cf6:	f000 b8a7 	b.w	8006e48 <__retarget_lock_acquire_recursive>
 8006cfa:	bf00      	nop
 8006cfc:	20000733 	.word	0x20000733

08006d00 <__sinit_lock_release>:
 8006d00:	4801      	ldr	r0, [pc, #4]	; (8006d08 <__sinit_lock_release+0x8>)
 8006d02:	f000 b8a2 	b.w	8006e4a <__retarget_lock_release_recursive>
 8006d06:	bf00      	nop
 8006d08:	20000733 	.word	0x20000733

08006d0c <__sinit>:
 8006d0c:	b510      	push	{r4, lr}
 8006d0e:	4604      	mov	r4, r0
 8006d10:	f7ff fff0 	bl	8006cf4 <__sinit_lock_acquire>
 8006d14:	69a3      	ldr	r3, [r4, #24]
 8006d16:	b11b      	cbz	r3, 8006d20 <__sinit+0x14>
 8006d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d1c:	f7ff bff0 	b.w	8006d00 <__sinit_lock_release>
 8006d20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006d24:	6523      	str	r3, [r4, #80]	; 0x50
 8006d26:	4b13      	ldr	r3, [pc, #76]	; (8006d74 <__sinit+0x68>)
 8006d28:	4a13      	ldr	r2, [pc, #76]	; (8006d78 <__sinit+0x6c>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d2e:	42a3      	cmp	r3, r4
 8006d30:	bf04      	itt	eq
 8006d32:	2301      	moveq	r3, #1
 8006d34:	61a3      	streq	r3, [r4, #24]
 8006d36:	4620      	mov	r0, r4
 8006d38:	f000 f820 	bl	8006d7c <__sfp>
 8006d3c:	6060      	str	r0, [r4, #4]
 8006d3e:	4620      	mov	r0, r4
 8006d40:	f000 f81c 	bl	8006d7c <__sfp>
 8006d44:	60a0      	str	r0, [r4, #8]
 8006d46:	4620      	mov	r0, r4
 8006d48:	f000 f818 	bl	8006d7c <__sfp>
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	60e0      	str	r0, [r4, #12]
 8006d50:	2104      	movs	r1, #4
 8006d52:	6860      	ldr	r0, [r4, #4]
 8006d54:	f7ff ff82 	bl	8006c5c <std>
 8006d58:	68a0      	ldr	r0, [r4, #8]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	2109      	movs	r1, #9
 8006d5e:	f7ff ff7d 	bl	8006c5c <std>
 8006d62:	68e0      	ldr	r0, [r4, #12]
 8006d64:	2202      	movs	r2, #2
 8006d66:	2112      	movs	r1, #18
 8006d68:	f7ff ff78 	bl	8006c5c <std>
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	61a3      	str	r3, [r4, #24]
 8006d70:	e7d2      	b.n	8006d18 <__sinit+0xc>
 8006d72:	bf00      	nop
 8006d74:	08007c80 	.word	0x08007c80
 8006d78:	08006ca5 	.word	0x08006ca5

08006d7c <__sfp>:
 8006d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d7e:	4607      	mov	r7, r0
 8006d80:	f7ff ffac 	bl	8006cdc <__sfp_lock_acquire>
 8006d84:	4b1e      	ldr	r3, [pc, #120]	; (8006e00 <__sfp+0x84>)
 8006d86:	681e      	ldr	r6, [r3, #0]
 8006d88:	69b3      	ldr	r3, [r6, #24]
 8006d8a:	b913      	cbnz	r3, 8006d92 <__sfp+0x16>
 8006d8c:	4630      	mov	r0, r6
 8006d8e:	f7ff ffbd 	bl	8006d0c <__sinit>
 8006d92:	3648      	adds	r6, #72	; 0x48
 8006d94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	d503      	bpl.n	8006da4 <__sfp+0x28>
 8006d9c:	6833      	ldr	r3, [r6, #0]
 8006d9e:	b30b      	cbz	r3, 8006de4 <__sfp+0x68>
 8006da0:	6836      	ldr	r6, [r6, #0]
 8006da2:	e7f7      	b.n	8006d94 <__sfp+0x18>
 8006da4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006da8:	b9d5      	cbnz	r5, 8006de0 <__sfp+0x64>
 8006daa:	4b16      	ldr	r3, [pc, #88]	; (8006e04 <__sfp+0x88>)
 8006dac:	60e3      	str	r3, [r4, #12]
 8006dae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006db2:	6665      	str	r5, [r4, #100]	; 0x64
 8006db4:	f000 f847 	bl	8006e46 <__retarget_lock_init_recursive>
 8006db8:	f7ff ff96 	bl	8006ce8 <__sfp_lock_release>
 8006dbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006dc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006dc4:	6025      	str	r5, [r4, #0]
 8006dc6:	61a5      	str	r5, [r4, #24]
 8006dc8:	2208      	movs	r2, #8
 8006dca:	4629      	mov	r1, r5
 8006dcc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006dd0:	f7ff fefa 	bl	8006bc8 <memset>
 8006dd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006dd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006ddc:	4620      	mov	r0, r4
 8006dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006de0:	3468      	adds	r4, #104	; 0x68
 8006de2:	e7d9      	b.n	8006d98 <__sfp+0x1c>
 8006de4:	2104      	movs	r1, #4
 8006de6:	4638      	mov	r0, r7
 8006de8:	f7ff ff62 	bl	8006cb0 <__sfmoreglue>
 8006dec:	4604      	mov	r4, r0
 8006dee:	6030      	str	r0, [r6, #0]
 8006df0:	2800      	cmp	r0, #0
 8006df2:	d1d5      	bne.n	8006da0 <__sfp+0x24>
 8006df4:	f7ff ff78 	bl	8006ce8 <__sfp_lock_release>
 8006df8:	230c      	movs	r3, #12
 8006dfa:	603b      	str	r3, [r7, #0]
 8006dfc:	e7ee      	b.n	8006ddc <__sfp+0x60>
 8006dfe:	bf00      	nop
 8006e00:	08007c80 	.word	0x08007c80
 8006e04:	ffff0001 	.word	0xffff0001

08006e08 <_fwalk_reent>:
 8006e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e0c:	4606      	mov	r6, r0
 8006e0e:	4688      	mov	r8, r1
 8006e10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e14:	2700      	movs	r7, #0
 8006e16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e1a:	f1b9 0901 	subs.w	r9, r9, #1
 8006e1e:	d505      	bpl.n	8006e2c <_fwalk_reent+0x24>
 8006e20:	6824      	ldr	r4, [r4, #0]
 8006e22:	2c00      	cmp	r4, #0
 8006e24:	d1f7      	bne.n	8006e16 <_fwalk_reent+0xe>
 8006e26:	4638      	mov	r0, r7
 8006e28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e2c:	89ab      	ldrh	r3, [r5, #12]
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d907      	bls.n	8006e42 <_fwalk_reent+0x3a>
 8006e32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e36:	3301      	adds	r3, #1
 8006e38:	d003      	beq.n	8006e42 <_fwalk_reent+0x3a>
 8006e3a:	4629      	mov	r1, r5
 8006e3c:	4630      	mov	r0, r6
 8006e3e:	47c0      	blx	r8
 8006e40:	4307      	orrs	r7, r0
 8006e42:	3568      	adds	r5, #104	; 0x68
 8006e44:	e7e9      	b.n	8006e1a <_fwalk_reent+0x12>

08006e46 <__retarget_lock_init_recursive>:
 8006e46:	4770      	bx	lr

08006e48 <__retarget_lock_acquire_recursive>:
 8006e48:	4770      	bx	lr

08006e4a <__retarget_lock_release_recursive>:
 8006e4a:	4770      	bx	lr

08006e4c <_malloc_r>:
 8006e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e4e:	1ccd      	adds	r5, r1, #3
 8006e50:	f025 0503 	bic.w	r5, r5, #3
 8006e54:	3508      	adds	r5, #8
 8006e56:	2d0c      	cmp	r5, #12
 8006e58:	bf38      	it	cc
 8006e5a:	250c      	movcc	r5, #12
 8006e5c:	2d00      	cmp	r5, #0
 8006e5e:	4606      	mov	r6, r0
 8006e60:	db01      	blt.n	8006e66 <_malloc_r+0x1a>
 8006e62:	42a9      	cmp	r1, r5
 8006e64:	d903      	bls.n	8006e6e <_malloc_r+0x22>
 8006e66:	230c      	movs	r3, #12
 8006e68:	6033      	str	r3, [r6, #0]
 8006e6a:	2000      	movs	r0, #0
 8006e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e6e:	f000 fda3 	bl	80079b8 <__malloc_lock>
 8006e72:	4921      	ldr	r1, [pc, #132]	; (8006ef8 <_malloc_r+0xac>)
 8006e74:	680a      	ldr	r2, [r1, #0]
 8006e76:	4614      	mov	r4, r2
 8006e78:	b99c      	cbnz	r4, 8006ea2 <_malloc_r+0x56>
 8006e7a:	4f20      	ldr	r7, [pc, #128]	; (8006efc <_malloc_r+0xb0>)
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	b923      	cbnz	r3, 8006e8a <_malloc_r+0x3e>
 8006e80:	4621      	mov	r1, r4
 8006e82:	4630      	mov	r0, r6
 8006e84:	f000 fb2a 	bl	80074dc <_sbrk_r>
 8006e88:	6038      	str	r0, [r7, #0]
 8006e8a:	4629      	mov	r1, r5
 8006e8c:	4630      	mov	r0, r6
 8006e8e:	f000 fb25 	bl	80074dc <_sbrk_r>
 8006e92:	1c43      	adds	r3, r0, #1
 8006e94:	d123      	bne.n	8006ede <_malloc_r+0x92>
 8006e96:	230c      	movs	r3, #12
 8006e98:	6033      	str	r3, [r6, #0]
 8006e9a:	4630      	mov	r0, r6
 8006e9c:	f000 fd92 	bl	80079c4 <__malloc_unlock>
 8006ea0:	e7e3      	b.n	8006e6a <_malloc_r+0x1e>
 8006ea2:	6823      	ldr	r3, [r4, #0]
 8006ea4:	1b5b      	subs	r3, r3, r5
 8006ea6:	d417      	bmi.n	8006ed8 <_malloc_r+0x8c>
 8006ea8:	2b0b      	cmp	r3, #11
 8006eaa:	d903      	bls.n	8006eb4 <_malloc_r+0x68>
 8006eac:	6023      	str	r3, [r4, #0]
 8006eae:	441c      	add	r4, r3
 8006eb0:	6025      	str	r5, [r4, #0]
 8006eb2:	e004      	b.n	8006ebe <_malloc_r+0x72>
 8006eb4:	6863      	ldr	r3, [r4, #4]
 8006eb6:	42a2      	cmp	r2, r4
 8006eb8:	bf0c      	ite	eq
 8006eba:	600b      	streq	r3, [r1, #0]
 8006ebc:	6053      	strne	r3, [r2, #4]
 8006ebe:	4630      	mov	r0, r6
 8006ec0:	f000 fd80 	bl	80079c4 <__malloc_unlock>
 8006ec4:	f104 000b 	add.w	r0, r4, #11
 8006ec8:	1d23      	adds	r3, r4, #4
 8006eca:	f020 0007 	bic.w	r0, r0, #7
 8006ece:	1ac2      	subs	r2, r0, r3
 8006ed0:	d0cc      	beq.n	8006e6c <_malloc_r+0x20>
 8006ed2:	1a1b      	subs	r3, r3, r0
 8006ed4:	50a3      	str	r3, [r4, r2]
 8006ed6:	e7c9      	b.n	8006e6c <_malloc_r+0x20>
 8006ed8:	4622      	mov	r2, r4
 8006eda:	6864      	ldr	r4, [r4, #4]
 8006edc:	e7cc      	b.n	8006e78 <_malloc_r+0x2c>
 8006ede:	1cc4      	adds	r4, r0, #3
 8006ee0:	f024 0403 	bic.w	r4, r4, #3
 8006ee4:	42a0      	cmp	r0, r4
 8006ee6:	d0e3      	beq.n	8006eb0 <_malloc_r+0x64>
 8006ee8:	1a21      	subs	r1, r4, r0
 8006eea:	4630      	mov	r0, r6
 8006eec:	f000 faf6 	bl	80074dc <_sbrk_r>
 8006ef0:	3001      	adds	r0, #1
 8006ef2:	d1dd      	bne.n	8006eb0 <_malloc_r+0x64>
 8006ef4:	e7cf      	b.n	8006e96 <_malloc_r+0x4a>
 8006ef6:	bf00      	nop
 8006ef8:	20000144 	.word	0x20000144
 8006efc:	20000148 	.word	0x20000148

08006f00 <__sfputc_r>:
 8006f00:	6893      	ldr	r3, [r2, #8]
 8006f02:	3b01      	subs	r3, #1
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	b410      	push	{r4}
 8006f08:	6093      	str	r3, [r2, #8]
 8006f0a:	da08      	bge.n	8006f1e <__sfputc_r+0x1e>
 8006f0c:	6994      	ldr	r4, [r2, #24]
 8006f0e:	42a3      	cmp	r3, r4
 8006f10:	db01      	blt.n	8006f16 <__sfputc_r+0x16>
 8006f12:	290a      	cmp	r1, #10
 8006f14:	d103      	bne.n	8006f1e <__sfputc_r+0x1e>
 8006f16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f1a:	f000 bb33 	b.w	8007584 <__swbuf_r>
 8006f1e:	6813      	ldr	r3, [r2, #0]
 8006f20:	1c58      	adds	r0, r3, #1
 8006f22:	6010      	str	r0, [r2, #0]
 8006f24:	7019      	strb	r1, [r3, #0]
 8006f26:	4608      	mov	r0, r1
 8006f28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f2c:	4770      	bx	lr

08006f2e <__sfputs_r>:
 8006f2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f30:	4606      	mov	r6, r0
 8006f32:	460f      	mov	r7, r1
 8006f34:	4614      	mov	r4, r2
 8006f36:	18d5      	adds	r5, r2, r3
 8006f38:	42ac      	cmp	r4, r5
 8006f3a:	d101      	bne.n	8006f40 <__sfputs_r+0x12>
 8006f3c:	2000      	movs	r0, #0
 8006f3e:	e007      	b.n	8006f50 <__sfputs_r+0x22>
 8006f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f44:	463a      	mov	r2, r7
 8006f46:	4630      	mov	r0, r6
 8006f48:	f7ff ffda 	bl	8006f00 <__sfputc_r>
 8006f4c:	1c43      	adds	r3, r0, #1
 8006f4e:	d1f3      	bne.n	8006f38 <__sfputs_r+0xa>
 8006f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f54 <_vfiprintf_r>:
 8006f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f58:	460d      	mov	r5, r1
 8006f5a:	b09d      	sub	sp, #116	; 0x74
 8006f5c:	4614      	mov	r4, r2
 8006f5e:	4698      	mov	r8, r3
 8006f60:	4606      	mov	r6, r0
 8006f62:	b118      	cbz	r0, 8006f6c <_vfiprintf_r+0x18>
 8006f64:	6983      	ldr	r3, [r0, #24]
 8006f66:	b90b      	cbnz	r3, 8006f6c <_vfiprintf_r+0x18>
 8006f68:	f7ff fed0 	bl	8006d0c <__sinit>
 8006f6c:	4b89      	ldr	r3, [pc, #548]	; (8007194 <_vfiprintf_r+0x240>)
 8006f6e:	429d      	cmp	r5, r3
 8006f70:	d11b      	bne.n	8006faa <_vfiprintf_r+0x56>
 8006f72:	6875      	ldr	r5, [r6, #4]
 8006f74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f76:	07d9      	lsls	r1, r3, #31
 8006f78:	d405      	bmi.n	8006f86 <_vfiprintf_r+0x32>
 8006f7a:	89ab      	ldrh	r3, [r5, #12]
 8006f7c:	059a      	lsls	r2, r3, #22
 8006f7e:	d402      	bmi.n	8006f86 <_vfiprintf_r+0x32>
 8006f80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f82:	f7ff ff61 	bl	8006e48 <__retarget_lock_acquire_recursive>
 8006f86:	89ab      	ldrh	r3, [r5, #12]
 8006f88:	071b      	lsls	r3, r3, #28
 8006f8a:	d501      	bpl.n	8006f90 <_vfiprintf_r+0x3c>
 8006f8c:	692b      	ldr	r3, [r5, #16]
 8006f8e:	b9eb      	cbnz	r3, 8006fcc <_vfiprintf_r+0x78>
 8006f90:	4629      	mov	r1, r5
 8006f92:	4630      	mov	r0, r6
 8006f94:	f000 fb5a 	bl	800764c <__swsetup_r>
 8006f98:	b1c0      	cbz	r0, 8006fcc <_vfiprintf_r+0x78>
 8006f9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f9c:	07dc      	lsls	r4, r3, #31
 8006f9e:	d50e      	bpl.n	8006fbe <_vfiprintf_r+0x6a>
 8006fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa4:	b01d      	add	sp, #116	; 0x74
 8006fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006faa:	4b7b      	ldr	r3, [pc, #492]	; (8007198 <_vfiprintf_r+0x244>)
 8006fac:	429d      	cmp	r5, r3
 8006fae:	d101      	bne.n	8006fb4 <_vfiprintf_r+0x60>
 8006fb0:	68b5      	ldr	r5, [r6, #8]
 8006fb2:	e7df      	b.n	8006f74 <_vfiprintf_r+0x20>
 8006fb4:	4b79      	ldr	r3, [pc, #484]	; (800719c <_vfiprintf_r+0x248>)
 8006fb6:	429d      	cmp	r5, r3
 8006fb8:	bf08      	it	eq
 8006fba:	68f5      	ldreq	r5, [r6, #12]
 8006fbc:	e7da      	b.n	8006f74 <_vfiprintf_r+0x20>
 8006fbe:	89ab      	ldrh	r3, [r5, #12]
 8006fc0:	0598      	lsls	r0, r3, #22
 8006fc2:	d4ed      	bmi.n	8006fa0 <_vfiprintf_r+0x4c>
 8006fc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fc6:	f7ff ff40 	bl	8006e4a <__retarget_lock_release_recursive>
 8006fca:	e7e9      	b.n	8006fa0 <_vfiprintf_r+0x4c>
 8006fcc:	2300      	movs	r3, #0
 8006fce:	9309      	str	r3, [sp, #36]	; 0x24
 8006fd0:	2320      	movs	r3, #32
 8006fd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006fd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fda:	2330      	movs	r3, #48	; 0x30
 8006fdc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80071a0 <_vfiprintf_r+0x24c>
 8006fe0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006fe4:	f04f 0901 	mov.w	r9, #1
 8006fe8:	4623      	mov	r3, r4
 8006fea:	469a      	mov	sl, r3
 8006fec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ff0:	b10a      	cbz	r2, 8006ff6 <_vfiprintf_r+0xa2>
 8006ff2:	2a25      	cmp	r2, #37	; 0x25
 8006ff4:	d1f9      	bne.n	8006fea <_vfiprintf_r+0x96>
 8006ff6:	ebba 0b04 	subs.w	fp, sl, r4
 8006ffa:	d00b      	beq.n	8007014 <_vfiprintf_r+0xc0>
 8006ffc:	465b      	mov	r3, fp
 8006ffe:	4622      	mov	r2, r4
 8007000:	4629      	mov	r1, r5
 8007002:	4630      	mov	r0, r6
 8007004:	f7ff ff93 	bl	8006f2e <__sfputs_r>
 8007008:	3001      	adds	r0, #1
 800700a:	f000 80aa 	beq.w	8007162 <_vfiprintf_r+0x20e>
 800700e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007010:	445a      	add	r2, fp
 8007012:	9209      	str	r2, [sp, #36]	; 0x24
 8007014:	f89a 3000 	ldrb.w	r3, [sl]
 8007018:	2b00      	cmp	r3, #0
 800701a:	f000 80a2 	beq.w	8007162 <_vfiprintf_r+0x20e>
 800701e:	2300      	movs	r3, #0
 8007020:	f04f 32ff 	mov.w	r2, #4294967295
 8007024:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007028:	f10a 0a01 	add.w	sl, sl, #1
 800702c:	9304      	str	r3, [sp, #16]
 800702e:	9307      	str	r3, [sp, #28]
 8007030:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007034:	931a      	str	r3, [sp, #104]	; 0x68
 8007036:	4654      	mov	r4, sl
 8007038:	2205      	movs	r2, #5
 800703a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800703e:	4858      	ldr	r0, [pc, #352]	; (80071a0 <_vfiprintf_r+0x24c>)
 8007040:	f7f9 f8c6 	bl	80001d0 <memchr>
 8007044:	9a04      	ldr	r2, [sp, #16]
 8007046:	b9d8      	cbnz	r0, 8007080 <_vfiprintf_r+0x12c>
 8007048:	06d1      	lsls	r1, r2, #27
 800704a:	bf44      	itt	mi
 800704c:	2320      	movmi	r3, #32
 800704e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007052:	0713      	lsls	r3, r2, #28
 8007054:	bf44      	itt	mi
 8007056:	232b      	movmi	r3, #43	; 0x2b
 8007058:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800705c:	f89a 3000 	ldrb.w	r3, [sl]
 8007060:	2b2a      	cmp	r3, #42	; 0x2a
 8007062:	d015      	beq.n	8007090 <_vfiprintf_r+0x13c>
 8007064:	9a07      	ldr	r2, [sp, #28]
 8007066:	4654      	mov	r4, sl
 8007068:	2000      	movs	r0, #0
 800706a:	f04f 0c0a 	mov.w	ip, #10
 800706e:	4621      	mov	r1, r4
 8007070:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007074:	3b30      	subs	r3, #48	; 0x30
 8007076:	2b09      	cmp	r3, #9
 8007078:	d94e      	bls.n	8007118 <_vfiprintf_r+0x1c4>
 800707a:	b1b0      	cbz	r0, 80070aa <_vfiprintf_r+0x156>
 800707c:	9207      	str	r2, [sp, #28]
 800707e:	e014      	b.n	80070aa <_vfiprintf_r+0x156>
 8007080:	eba0 0308 	sub.w	r3, r0, r8
 8007084:	fa09 f303 	lsl.w	r3, r9, r3
 8007088:	4313      	orrs	r3, r2
 800708a:	9304      	str	r3, [sp, #16]
 800708c:	46a2      	mov	sl, r4
 800708e:	e7d2      	b.n	8007036 <_vfiprintf_r+0xe2>
 8007090:	9b03      	ldr	r3, [sp, #12]
 8007092:	1d19      	adds	r1, r3, #4
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	9103      	str	r1, [sp, #12]
 8007098:	2b00      	cmp	r3, #0
 800709a:	bfbb      	ittet	lt
 800709c:	425b      	neglt	r3, r3
 800709e:	f042 0202 	orrlt.w	r2, r2, #2
 80070a2:	9307      	strge	r3, [sp, #28]
 80070a4:	9307      	strlt	r3, [sp, #28]
 80070a6:	bfb8      	it	lt
 80070a8:	9204      	strlt	r2, [sp, #16]
 80070aa:	7823      	ldrb	r3, [r4, #0]
 80070ac:	2b2e      	cmp	r3, #46	; 0x2e
 80070ae:	d10c      	bne.n	80070ca <_vfiprintf_r+0x176>
 80070b0:	7863      	ldrb	r3, [r4, #1]
 80070b2:	2b2a      	cmp	r3, #42	; 0x2a
 80070b4:	d135      	bne.n	8007122 <_vfiprintf_r+0x1ce>
 80070b6:	9b03      	ldr	r3, [sp, #12]
 80070b8:	1d1a      	adds	r2, r3, #4
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	9203      	str	r2, [sp, #12]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	bfb8      	it	lt
 80070c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80070c6:	3402      	adds	r4, #2
 80070c8:	9305      	str	r3, [sp, #20]
 80070ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80071b0 <_vfiprintf_r+0x25c>
 80070ce:	7821      	ldrb	r1, [r4, #0]
 80070d0:	2203      	movs	r2, #3
 80070d2:	4650      	mov	r0, sl
 80070d4:	f7f9 f87c 	bl	80001d0 <memchr>
 80070d8:	b140      	cbz	r0, 80070ec <_vfiprintf_r+0x198>
 80070da:	2340      	movs	r3, #64	; 0x40
 80070dc:	eba0 000a 	sub.w	r0, r0, sl
 80070e0:	fa03 f000 	lsl.w	r0, r3, r0
 80070e4:	9b04      	ldr	r3, [sp, #16]
 80070e6:	4303      	orrs	r3, r0
 80070e8:	3401      	adds	r4, #1
 80070ea:	9304      	str	r3, [sp, #16]
 80070ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070f0:	482c      	ldr	r0, [pc, #176]	; (80071a4 <_vfiprintf_r+0x250>)
 80070f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80070f6:	2206      	movs	r2, #6
 80070f8:	f7f9 f86a 	bl	80001d0 <memchr>
 80070fc:	2800      	cmp	r0, #0
 80070fe:	d03f      	beq.n	8007180 <_vfiprintf_r+0x22c>
 8007100:	4b29      	ldr	r3, [pc, #164]	; (80071a8 <_vfiprintf_r+0x254>)
 8007102:	bb1b      	cbnz	r3, 800714c <_vfiprintf_r+0x1f8>
 8007104:	9b03      	ldr	r3, [sp, #12]
 8007106:	3307      	adds	r3, #7
 8007108:	f023 0307 	bic.w	r3, r3, #7
 800710c:	3308      	adds	r3, #8
 800710e:	9303      	str	r3, [sp, #12]
 8007110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007112:	443b      	add	r3, r7
 8007114:	9309      	str	r3, [sp, #36]	; 0x24
 8007116:	e767      	b.n	8006fe8 <_vfiprintf_r+0x94>
 8007118:	fb0c 3202 	mla	r2, ip, r2, r3
 800711c:	460c      	mov	r4, r1
 800711e:	2001      	movs	r0, #1
 8007120:	e7a5      	b.n	800706e <_vfiprintf_r+0x11a>
 8007122:	2300      	movs	r3, #0
 8007124:	3401      	adds	r4, #1
 8007126:	9305      	str	r3, [sp, #20]
 8007128:	4619      	mov	r1, r3
 800712a:	f04f 0c0a 	mov.w	ip, #10
 800712e:	4620      	mov	r0, r4
 8007130:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007134:	3a30      	subs	r2, #48	; 0x30
 8007136:	2a09      	cmp	r2, #9
 8007138:	d903      	bls.n	8007142 <_vfiprintf_r+0x1ee>
 800713a:	2b00      	cmp	r3, #0
 800713c:	d0c5      	beq.n	80070ca <_vfiprintf_r+0x176>
 800713e:	9105      	str	r1, [sp, #20]
 8007140:	e7c3      	b.n	80070ca <_vfiprintf_r+0x176>
 8007142:	fb0c 2101 	mla	r1, ip, r1, r2
 8007146:	4604      	mov	r4, r0
 8007148:	2301      	movs	r3, #1
 800714a:	e7f0      	b.n	800712e <_vfiprintf_r+0x1da>
 800714c:	ab03      	add	r3, sp, #12
 800714e:	9300      	str	r3, [sp, #0]
 8007150:	462a      	mov	r2, r5
 8007152:	4b16      	ldr	r3, [pc, #88]	; (80071ac <_vfiprintf_r+0x258>)
 8007154:	a904      	add	r1, sp, #16
 8007156:	4630      	mov	r0, r6
 8007158:	f3af 8000 	nop.w
 800715c:	4607      	mov	r7, r0
 800715e:	1c78      	adds	r0, r7, #1
 8007160:	d1d6      	bne.n	8007110 <_vfiprintf_r+0x1bc>
 8007162:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007164:	07d9      	lsls	r1, r3, #31
 8007166:	d405      	bmi.n	8007174 <_vfiprintf_r+0x220>
 8007168:	89ab      	ldrh	r3, [r5, #12]
 800716a:	059a      	lsls	r2, r3, #22
 800716c:	d402      	bmi.n	8007174 <_vfiprintf_r+0x220>
 800716e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007170:	f7ff fe6b 	bl	8006e4a <__retarget_lock_release_recursive>
 8007174:	89ab      	ldrh	r3, [r5, #12]
 8007176:	065b      	lsls	r3, r3, #25
 8007178:	f53f af12 	bmi.w	8006fa0 <_vfiprintf_r+0x4c>
 800717c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800717e:	e711      	b.n	8006fa4 <_vfiprintf_r+0x50>
 8007180:	ab03      	add	r3, sp, #12
 8007182:	9300      	str	r3, [sp, #0]
 8007184:	462a      	mov	r2, r5
 8007186:	4b09      	ldr	r3, [pc, #36]	; (80071ac <_vfiprintf_r+0x258>)
 8007188:	a904      	add	r1, sp, #16
 800718a:	4630      	mov	r0, r6
 800718c:	f000 f880 	bl	8007290 <_printf_i>
 8007190:	e7e4      	b.n	800715c <_vfiprintf_r+0x208>
 8007192:	bf00      	nop
 8007194:	08007ca4 	.word	0x08007ca4
 8007198:	08007cc4 	.word	0x08007cc4
 800719c:	08007c84 	.word	0x08007c84
 80071a0:	08007ce4 	.word	0x08007ce4
 80071a4:	08007cee 	.word	0x08007cee
 80071a8:	00000000 	.word	0x00000000
 80071ac:	08006f2f 	.word	0x08006f2f
 80071b0:	08007cea 	.word	0x08007cea

080071b4 <_printf_common>:
 80071b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071b8:	4616      	mov	r6, r2
 80071ba:	4699      	mov	r9, r3
 80071bc:	688a      	ldr	r2, [r1, #8]
 80071be:	690b      	ldr	r3, [r1, #16]
 80071c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80071c4:	4293      	cmp	r3, r2
 80071c6:	bfb8      	it	lt
 80071c8:	4613      	movlt	r3, r2
 80071ca:	6033      	str	r3, [r6, #0]
 80071cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80071d0:	4607      	mov	r7, r0
 80071d2:	460c      	mov	r4, r1
 80071d4:	b10a      	cbz	r2, 80071da <_printf_common+0x26>
 80071d6:	3301      	adds	r3, #1
 80071d8:	6033      	str	r3, [r6, #0]
 80071da:	6823      	ldr	r3, [r4, #0]
 80071dc:	0699      	lsls	r1, r3, #26
 80071de:	bf42      	ittt	mi
 80071e0:	6833      	ldrmi	r3, [r6, #0]
 80071e2:	3302      	addmi	r3, #2
 80071e4:	6033      	strmi	r3, [r6, #0]
 80071e6:	6825      	ldr	r5, [r4, #0]
 80071e8:	f015 0506 	ands.w	r5, r5, #6
 80071ec:	d106      	bne.n	80071fc <_printf_common+0x48>
 80071ee:	f104 0a19 	add.w	sl, r4, #25
 80071f2:	68e3      	ldr	r3, [r4, #12]
 80071f4:	6832      	ldr	r2, [r6, #0]
 80071f6:	1a9b      	subs	r3, r3, r2
 80071f8:	42ab      	cmp	r3, r5
 80071fa:	dc26      	bgt.n	800724a <_printf_common+0x96>
 80071fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007200:	1e13      	subs	r3, r2, #0
 8007202:	6822      	ldr	r2, [r4, #0]
 8007204:	bf18      	it	ne
 8007206:	2301      	movne	r3, #1
 8007208:	0692      	lsls	r2, r2, #26
 800720a:	d42b      	bmi.n	8007264 <_printf_common+0xb0>
 800720c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007210:	4649      	mov	r1, r9
 8007212:	4638      	mov	r0, r7
 8007214:	47c0      	blx	r8
 8007216:	3001      	adds	r0, #1
 8007218:	d01e      	beq.n	8007258 <_printf_common+0xa4>
 800721a:	6823      	ldr	r3, [r4, #0]
 800721c:	68e5      	ldr	r5, [r4, #12]
 800721e:	6832      	ldr	r2, [r6, #0]
 8007220:	f003 0306 	and.w	r3, r3, #6
 8007224:	2b04      	cmp	r3, #4
 8007226:	bf08      	it	eq
 8007228:	1aad      	subeq	r5, r5, r2
 800722a:	68a3      	ldr	r3, [r4, #8]
 800722c:	6922      	ldr	r2, [r4, #16]
 800722e:	bf0c      	ite	eq
 8007230:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007234:	2500      	movne	r5, #0
 8007236:	4293      	cmp	r3, r2
 8007238:	bfc4      	itt	gt
 800723a:	1a9b      	subgt	r3, r3, r2
 800723c:	18ed      	addgt	r5, r5, r3
 800723e:	2600      	movs	r6, #0
 8007240:	341a      	adds	r4, #26
 8007242:	42b5      	cmp	r5, r6
 8007244:	d11a      	bne.n	800727c <_printf_common+0xc8>
 8007246:	2000      	movs	r0, #0
 8007248:	e008      	b.n	800725c <_printf_common+0xa8>
 800724a:	2301      	movs	r3, #1
 800724c:	4652      	mov	r2, sl
 800724e:	4649      	mov	r1, r9
 8007250:	4638      	mov	r0, r7
 8007252:	47c0      	blx	r8
 8007254:	3001      	adds	r0, #1
 8007256:	d103      	bne.n	8007260 <_printf_common+0xac>
 8007258:	f04f 30ff 	mov.w	r0, #4294967295
 800725c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007260:	3501      	adds	r5, #1
 8007262:	e7c6      	b.n	80071f2 <_printf_common+0x3e>
 8007264:	18e1      	adds	r1, r4, r3
 8007266:	1c5a      	adds	r2, r3, #1
 8007268:	2030      	movs	r0, #48	; 0x30
 800726a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800726e:	4422      	add	r2, r4
 8007270:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007274:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007278:	3302      	adds	r3, #2
 800727a:	e7c7      	b.n	800720c <_printf_common+0x58>
 800727c:	2301      	movs	r3, #1
 800727e:	4622      	mov	r2, r4
 8007280:	4649      	mov	r1, r9
 8007282:	4638      	mov	r0, r7
 8007284:	47c0      	blx	r8
 8007286:	3001      	adds	r0, #1
 8007288:	d0e6      	beq.n	8007258 <_printf_common+0xa4>
 800728a:	3601      	adds	r6, #1
 800728c:	e7d9      	b.n	8007242 <_printf_common+0x8e>
	...

08007290 <_printf_i>:
 8007290:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007294:	460c      	mov	r4, r1
 8007296:	4691      	mov	r9, r2
 8007298:	7e27      	ldrb	r7, [r4, #24]
 800729a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800729c:	2f78      	cmp	r7, #120	; 0x78
 800729e:	4680      	mov	r8, r0
 80072a0:	469a      	mov	sl, r3
 80072a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072a6:	d807      	bhi.n	80072b8 <_printf_i+0x28>
 80072a8:	2f62      	cmp	r7, #98	; 0x62
 80072aa:	d80a      	bhi.n	80072c2 <_printf_i+0x32>
 80072ac:	2f00      	cmp	r7, #0
 80072ae:	f000 80d8 	beq.w	8007462 <_printf_i+0x1d2>
 80072b2:	2f58      	cmp	r7, #88	; 0x58
 80072b4:	f000 80a3 	beq.w	80073fe <_printf_i+0x16e>
 80072b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80072bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80072c0:	e03a      	b.n	8007338 <_printf_i+0xa8>
 80072c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80072c6:	2b15      	cmp	r3, #21
 80072c8:	d8f6      	bhi.n	80072b8 <_printf_i+0x28>
 80072ca:	a001      	add	r0, pc, #4	; (adr r0, 80072d0 <_printf_i+0x40>)
 80072cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80072d0:	08007329 	.word	0x08007329
 80072d4:	0800733d 	.word	0x0800733d
 80072d8:	080072b9 	.word	0x080072b9
 80072dc:	080072b9 	.word	0x080072b9
 80072e0:	080072b9 	.word	0x080072b9
 80072e4:	080072b9 	.word	0x080072b9
 80072e8:	0800733d 	.word	0x0800733d
 80072ec:	080072b9 	.word	0x080072b9
 80072f0:	080072b9 	.word	0x080072b9
 80072f4:	080072b9 	.word	0x080072b9
 80072f8:	080072b9 	.word	0x080072b9
 80072fc:	08007449 	.word	0x08007449
 8007300:	0800736d 	.word	0x0800736d
 8007304:	0800742b 	.word	0x0800742b
 8007308:	080072b9 	.word	0x080072b9
 800730c:	080072b9 	.word	0x080072b9
 8007310:	0800746b 	.word	0x0800746b
 8007314:	080072b9 	.word	0x080072b9
 8007318:	0800736d 	.word	0x0800736d
 800731c:	080072b9 	.word	0x080072b9
 8007320:	080072b9 	.word	0x080072b9
 8007324:	08007433 	.word	0x08007433
 8007328:	680b      	ldr	r3, [r1, #0]
 800732a:	1d1a      	adds	r2, r3, #4
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	600a      	str	r2, [r1, #0]
 8007330:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007334:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007338:	2301      	movs	r3, #1
 800733a:	e0a3      	b.n	8007484 <_printf_i+0x1f4>
 800733c:	6825      	ldr	r5, [r4, #0]
 800733e:	6808      	ldr	r0, [r1, #0]
 8007340:	062e      	lsls	r6, r5, #24
 8007342:	f100 0304 	add.w	r3, r0, #4
 8007346:	d50a      	bpl.n	800735e <_printf_i+0xce>
 8007348:	6805      	ldr	r5, [r0, #0]
 800734a:	600b      	str	r3, [r1, #0]
 800734c:	2d00      	cmp	r5, #0
 800734e:	da03      	bge.n	8007358 <_printf_i+0xc8>
 8007350:	232d      	movs	r3, #45	; 0x2d
 8007352:	426d      	negs	r5, r5
 8007354:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007358:	485e      	ldr	r0, [pc, #376]	; (80074d4 <_printf_i+0x244>)
 800735a:	230a      	movs	r3, #10
 800735c:	e019      	b.n	8007392 <_printf_i+0x102>
 800735e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007362:	6805      	ldr	r5, [r0, #0]
 8007364:	600b      	str	r3, [r1, #0]
 8007366:	bf18      	it	ne
 8007368:	b22d      	sxthne	r5, r5
 800736a:	e7ef      	b.n	800734c <_printf_i+0xbc>
 800736c:	680b      	ldr	r3, [r1, #0]
 800736e:	6825      	ldr	r5, [r4, #0]
 8007370:	1d18      	adds	r0, r3, #4
 8007372:	6008      	str	r0, [r1, #0]
 8007374:	0628      	lsls	r0, r5, #24
 8007376:	d501      	bpl.n	800737c <_printf_i+0xec>
 8007378:	681d      	ldr	r5, [r3, #0]
 800737a:	e002      	b.n	8007382 <_printf_i+0xf2>
 800737c:	0669      	lsls	r1, r5, #25
 800737e:	d5fb      	bpl.n	8007378 <_printf_i+0xe8>
 8007380:	881d      	ldrh	r5, [r3, #0]
 8007382:	4854      	ldr	r0, [pc, #336]	; (80074d4 <_printf_i+0x244>)
 8007384:	2f6f      	cmp	r7, #111	; 0x6f
 8007386:	bf0c      	ite	eq
 8007388:	2308      	moveq	r3, #8
 800738a:	230a      	movne	r3, #10
 800738c:	2100      	movs	r1, #0
 800738e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007392:	6866      	ldr	r6, [r4, #4]
 8007394:	60a6      	str	r6, [r4, #8]
 8007396:	2e00      	cmp	r6, #0
 8007398:	bfa2      	ittt	ge
 800739a:	6821      	ldrge	r1, [r4, #0]
 800739c:	f021 0104 	bicge.w	r1, r1, #4
 80073a0:	6021      	strge	r1, [r4, #0]
 80073a2:	b90d      	cbnz	r5, 80073a8 <_printf_i+0x118>
 80073a4:	2e00      	cmp	r6, #0
 80073a6:	d04d      	beq.n	8007444 <_printf_i+0x1b4>
 80073a8:	4616      	mov	r6, r2
 80073aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80073ae:	fb03 5711 	mls	r7, r3, r1, r5
 80073b2:	5dc7      	ldrb	r7, [r0, r7]
 80073b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80073b8:	462f      	mov	r7, r5
 80073ba:	42bb      	cmp	r3, r7
 80073bc:	460d      	mov	r5, r1
 80073be:	d9f4      	bls.n	80073aa <_printf_i+0x11a>
 80073c0:	2b08      	cmp	r3, #8
 80073c2:	d10b      	bne.n	80073dc <_printf_i+0x14c>
 80073c4:	6823      	ldr	r3, [r4, #0]
 80073c6:	07df      	lsls	r7, r3, #31
 80073c8:	d508      	bpl.n	80073dc <_printf_i+0x14c>
 80073ca:	6923      	ldr	r3, [r4, #16]
 80073cc:	6861      	ldr	r1, [r4, #4]
 80073ce:	4299      	cmp	r1, r3
 80073d0:	bfde      	ittt	le
 80073d2:	2330      	movle	r3, #48	; 0x30
 80073d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80073d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80073dc:	1b92      	subs	r2, r2, r6
 80073de:	6122      	str	r2, [r4, #16]
 80073e0:	f8cd a000 	str.w	sl, [sp]
 80073e4:	464b      	mov	r3, r9
 80073e6:	aa03      	add	r2, sp, #12
 80073e8:	4621      	mov	r1, r4
 80073ea:	4640      	mov	r0, r8
 80073ec:	f7ff fee2 	bl	80071b4 <_printf_common>
 80073f0:	3001      	adds	r0, #1
 80073f2:	d14c      	bne.n	800748e <_printf_i+0x1fe>
 80073f4:	f04f 30ff 	mov.w	r0, #4294967295
 80073f8:	b004      	add	sp, #16
 80073fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073fe:	4835      	ldr	r0, [pc, #212]	; (80074d4 <_printf_i+0x244>)
 8007400:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007404:	6823      	ldr	r3, [r4, #0]
 8007406:	680e      	ldr	r6, [r1, #0]
 8007408:	061f      	lsls	r7, r3, #24
 800740a:	f856 5b04 	ldr.w	r5, [r6], #4
 800740e:	600e      	str	r6, [r1, #0]
 8007410:	d514      	bpl.n	800743c <_printf_i+0x1ac>
 8007412:	07d9      	lsls	r1, r3, #31
 8007414:	bf44      	itt	mi
 8007416:	f043 0320 	orrmi.w	r3, r3, #32
 800741a:	6023      	strmi	r3, [r4, #0]
 800741c:	b91d      	cbnz	r5, 8007426 <_printf_i+0x196>
 800741e:	6823      	ldr	r3, [r4, #0]
 8007420:	f023 0320 	bic.w	r3, r3, #32
 8007424:	6023      	str	r3, [r4, #0]
 8007426:	2310      	movs	r3, #16
 8007428:	e7b0      	b.n	800738c <_printf_i+0xfc>
 800742a:	6823      	ldr	r3, [r4, #0]
 800742c:	f043 0320 	orr.w	r3, r3, #32
 8007430:	6023      	str	r3, [r4, #0]
 8007432:	2378      	movs	r3, #120	; 0x78
 8007434:	4828      	ldr	r0, [pc, #160]	; (80074d8 <_printf_i+0x248>)
 8007436:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800743a:	e7e3      	b.n	8007404 <_printf_i+0x174>
 800743c:	065e      	lsls	r6, r3, #25
 800743e:	bf48      	it	mi
 8007440:	b2ad      	uxthmi	r5, r5
 8007442:	e7e6      	b.n	8007412 <_printf_i+0x182>
 8007444:	4616      	mov	r6, r2
 8007446:	e7bb      	b.n	80073c0 <_printf_i+0x130>
 8007448:	680b      	ldr	r3, [r1, #0]
 800744a:	6826      	ldr	r6, [r4, #0]
 800744c:	6960      	ldr	r0, [r4, #20]
 800744e:	1d1d      	adds	r5, r3, #4
 8007450:	600d      	str	r5, [r1, #0]
 8007452:	0635      	lsls	r5, r6, #24
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	d501      	bpl.n	800745c <_printf_i+0x1cc>
 8007458:	6018      	str	r0, [r3, #0]
 800745a:	e002      	b.n	8007462 <_printf_i+0x1d2>
 800745c:	0671      	lsls	r1, r6, #25
 800745e:	d5fb      	bpl.n	8007458 <_printf_i+0x1c8>
 8007460:	8018      	strh	r0, [r3, #0]
 8007462:	2300      	movs	r3, #0
 8007464:	6123      	str	r3, [r4, #16]
 8007466:	4616      	mov	r6, r2
 8007468:	e7ba      	b.n	80073e0 <_printf_i+0x150>
 800746a:	680b      	ldr	r3, [r1, #0]
 800746c:	1d1a      	adds	r2, r3, #4
 800746e:	600a      	str	r2, [r1, #0]
 8007470:	681e      	ldr	r6, [r3, #0]
 8007472:	6862      	ldr	r2, [r4, #4]
 8007474:	2100      	movs	r1, #0
 8007476:	4630      	mov	r0, r6
 8007478:	f7f8 feaa 	bl	80001d0 <memchr>
 800747c:	b108      	cbz	r0, 8007482 <_printf_i+0x1f2>
 800747e:	1b80      	subs	r0, r0, r6
 8007480:	6060      	str	r0, [r4, #4]
 8007482:	6863      	ldr	r3, [r4, #4]
 8007484:	6123      	str	r3, [r4, #16]
 8007486:	2300      	movs	r3, #0
 8007488:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800748c:	e7a8      	b.n	80073e0 <_printf_i+0x150>
 800748e:	6923      	ldr	r3, [r4, #16]
 8007490:	4632      	mov	r2, r6
 8007492:	4649      	mov	r1, r9
 8007494:	4640      	mov	r0, r8
 8007496:	47d0      	blx	sl
 8007498:	3001      	adds	r0, #1
 800749a:	d0ab      	beq.n	80073f4 <_printf_i+0x164>
 800749c:	6823      	ldr	r3, [r4, #0]
 800749e:	079b      	lsls	r3, r3, #30
 80074a0:	d413      	bmi.n	80074ca <_printf_i+0x23a>
 80074a2:	68e0      	ldr	r0, [r4, #12]
 80074a4:	9b03      	ldr	r3, [sp, #12]
 80074a6:	4298      	cmp	r0, r3
 80074a8:	bfb8      	it	lt
 80074aa:	4618      	movlt	r0, r3
 80074ac:	e7a4      	b.n	80073f8 <_printf_i+0x168>
 80074ae:	2301      	movs	r3, #1
 80074b0:	4632      	mov	r2, r6
 80074b2:	4649      	mov	r1, r9
 80074b4:	4640      	mov	r0, r8
 80074b6:	47d0      	blx	sl
 80074b8:	3001      	adds	r0, #1
 80074ba:	d09b      	beq.n	80073f4 <_printf_i+0x164>
 80074bc:	3501      	adds	r5, #1
 80074be:	68e3      	ldr	r3, [r4, #12]
 80074c0:	9903      	ldr	r1, [sp, #12]
 80074c2:	1a5b      	subs	r3, r3, r1
 80074c4:	42ab      	cmp	r3, r5
 80074c6:	dcf2      	bgt.n	80074ae <_printf_i+0x21e>
 80074c8:	e7eb      	b.n	80074a2 <_printf_i+0x212>
 80074ca:	2500      	movs	r5, #0
 80074cc:	f104 0619 	add.w	r6, r4, #25
 80074d0:	e7f5      	b.n	80074be <_printf_i+0x22e>
 80074d2:	bf00      	nop
 80074d4:	08007cf5 	.word	0x08007cf5
 80074d8:	08007d06 	.word	0x08007d06

080074dc <_sbrk_r>:
 80074dc:	b538      	push	{r3, r4, r5, lr}
 80074de:	4d06      	ldr	r5, [pc, #24]	; (80074f8 <_sbrk_r+0x1c>)
 80074e0:	2300      	movs	r3, #0
 80074e2:	4604      	mov	r4, r0
 80074e4:	4608      	mov	r0, r1
 80074e6:	602b      	str	r3, [r5, #0]
 80074e8:	f7fa fc36 	bl	8001d58 <_sbrk>
 80074ec:	1c43      	adds	r3, r0, #1
 80074ee:	d102      	bne.n	80074f6 <_sbrk_r+0x1a>
 80074f0:	682b      	ldr	r3, [r5, #0]
 80074f2:	b103      	cbz	r3, 80074f6 <_sbrk_r+0x1a>
 80074f4:	6023      	str	r3, [r4, #0]
 80074f6:	bd38      	pop	{r3, r4, r5, pc}
 80074f8:	2000073c 	.word	0x2000073c

080074fc <__sread>:
 80074fc:	b510      	push	{r4, lr}
 80074fe:	460c      	mov	r4, r1
 8007500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007504:	f000 fab4 	bl	8007a70 <_read_r>
 8007508:	2800      	cmp	r0, #0
 800750a:	bfab      	itete	ge
 800750c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800750e:	89a3      	ldrhlt	r3, [r4, #12]
 8007510:	181b      	addge	r3, r3, r0
 8007512:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007516:	bfac      	ite	ge
 8007518:	6563      	strge	r3, [r4, #84]	; 0x54
 800751a:	81a3      	strhlt	r3, [r4, #12]
 800751c:	bd10      	pop	{r4, pc}

0800751e <__swrite>:
 800751e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007522:	461f      	mov	r7, r3
 8007524:	898b      	ldrh	r3, [r1, #12]
 8007526:	05db      	lsls	r3, r3, #23
 8007528:	4605      	mov	r5, r0
 800752a:	460c      	mov	r4, r1
 800752c:	4616      	mov	r6, r2
 800752e:	d505      	bpl.n	800753c <__swrite+0x1e>
 8007530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007534:	2302      	movs	r3, #2
 8007536:	2200      	movs	r2, #0
 8007538:	f000 f9c8 	bl	80078cc <_lseek_r>
 800753c:	89a3      	ldrh	r3, [r4, #12]
 800753e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007542:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007546:	81a3      	strh	r3, [r4, #12]
 8007548:	4632      	mov	r2, r6
 800754a:	463b      	mov	r3, r7
 800754c:	4628      	mov	r0, r5
 800754e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007552:	f000 b869 	b.w	8007628 <_write_r>

08007556 <__sseek>:
 8007556:	b510      	push	{r4, lr}
 8007558:	460c      	mov	r4, r1
 800755a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800755e:	f000 f9b5 	bl	80078cc <_lseek_r>
 8007562:	1c43      	adds	r3, r0, #1
 8007564:	89a3      	ldrh	r3, [r4, #12]
 8007566:	bf15      	itete	ne
 8007568:	6560      	strne	r0, [r4, #84]	; 0x54
 800756a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800756e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007572:	81a3      	strheq	r3, [r4, #12]
 8007574:	bf18      	it	ne
 8007576:	81a3      	strhne	r3, [r4, #12]
 8007578:	bd10      	pop	{r4, pc}

0800757a <__sclose>:
 800757a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800757e:	f000 b8d3 	b.w	8007728 <_close_r>
	...

08007584 <__swbuf_r>:
 8007584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007586:	460e      	mov	r6, r1
 8007588:	4614      	mov	r4, r2
 800758a:	4605      	mov	r5, r0
 800758c:	b118      	cbz	r0, 8007596 <__swbuf_r+0x12>
 800758e:	6983      	ldr	r3, [r0, #24]
 8007590:	b90b      	cbnz	r3, 8007596 <__swbuf_r+0x12>
 8007592:	f7ff fbbb 	bl	8006d0c <__sinit>
 8007596:	4b21      	ldr	r3, [pc, #132]	; (800761c <__swbuf_r+0x98>)
 8007598:	429c      	cmp	r4, r3
 800759a:	d12b      	bne.n	80075f4 <__swbuf_r+0x70>
 800759c:	686c      	ldr	r4, [r5, #4]
 800759e:	69a3      	ldr	r3, [r4, #24]
 80075a0:	60a3      	str	r3, [r4, #8]
 80075a2:	89a3      	ldrh	r3, [r4, #12]
 80075a4:	071a      	lsls	r2, r3, #28
 80075a6:	d52f      	bpl.n	8007608 <__swbuf_r+0x84>
 80075a8:	6923      	ldr	r3, [r4, #16]
 80075aa:	b36b      	cbz	r3, 8007608 <__swbuf_r+0x84>
 80075ac:	6923      	ldr	r3, [r4, #16]
 80075ae:	6820      	ldr	r0, [r4, #0]
 80075b0:	1ac0      	subs	r0, r0, r3
 80075b2:	6963      	ldr	r3, [r4, #20]
 80075b4:	b2f6      	uxtb	r6, r6
 80075b6:	4283      	cmp	r3, r0
 80075b8:	4637      	mov	r7, r6
 80075ba:	dc04      	bgt.n	80075c6 <__swbuf_r+0x42>
 80075bc:	4621      	mov	r1, r4
 80075be:	4628      	mov	r0, r5
 80075c0:	f000 f948 	bl	8007854 <_fflush_r>
 80075c4:	bb30      	cbnz	r0, 8007614 <__swbuf_r+0x90>
 80075c6:	68a3      	ldr	r3, [r4, #8]
 80075c8:	3b01      	subs	r3, #1
 80075ca:	60a3      	str	r3, [r4, #8]
 80075cc:	6823      	ldr	r3, [r4, #0]
 80075ce:	1c5a      	adds	r2, r3, #1
 80075d0:	6022      	str	r2, [r4, #0]
 80075d2:	701e      	strb	r6, [r3, #0]
 80075d4:	6963      	ldr	r3, [r4, #20]
 80075d6:	3001      	adds	r0, #1
 80075d8:	4283      	cmp	r3, r0
 80075da:	d004      	beq.n	80075e6 <__swbuf_r+0x62>
 80075dc:	89a3      	ldrh	r3, [r4, #12]
 80075de:	07db      	lsls	r3, r3, #31
 80075e0:	d506      	bpl.n	80075f0 <__swbuf_r+0x6c>
 80075e2:	2e0a      	cmp	r6, #10
 80075e4:	d104      	bne.n	80075f0 <__swbuf_r+0x6c>
 80075e6:	4621      	mov	r1, r4
 80075e8:	4628      	mov	r0, r5
 80075ea:	f000 f933 	bl	8007854 <_fflush_r>
 80075ee:	b988      	cbnz	r0, 8007614 <__swbuf_r+0x90>
 80075f0:	4638      	mov	r0, r7
 80075f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075f4:	4b0a      	ldr	r3, [pc, #40]	; (8007620 <__swbuf_r+0x9c>)
 80075f6:	429c      	cmp	r4, r3
 80075f8:	d101      	bne.n	80075fe <__swbuf_r+0x7a>
 80075fa:	68ac      	ldr	r4, [r5, #8]
 80075fc:	e7cf      	b.n	800759e <__swbuf_r+0x1a>
 80075fe:	4b09      	ldr	r3, [pc, #36]	; (8007624 <__swbuf_r+0xa0>)
 8007600:	429c      	cmp	r4, r3
 8007602:	bf08      	it	eq
 8007604:	68ec      	ldreq	r4, [r5, #12]
 8007606:	e7ca      	b.n	800759e <__swbuf_r+0x1a>
 8007608:	4621      	mov	r1, r4
 800760a:	4628      	mov	r0, r5
 800760c:	f000 f81e 	bl	800764c <__swsetup_r>
 8007610:	2800      	cmp	r0, #0
 8007612:	d0cb      	beq.n	80075ac <__swbuf_r+0x28>
 8007614:	f04f 37ff 	mov.w	r7, #4294967295
 8007618:	e7ea      	b.n	80075f0 <__swbuf_r+0x6c>
 800761a:	bf00      	nop
 800761c:	08007ca4 	.word	0x08007ca4
 8007620:	08007cc4 	.word	0x08007cc4
 8007624:	08007c84 	.word	0x08007c84

08007628 <_write_r>:
 8007628:	b538      	push	{r3, r4, r5, lr}
 800762a:	4d07      	ldr	r5, [pc, #28]	; (8007648 <_write_r+0x20>)
 800762c:	4604      	mov	r4, r0
 800762e:	4608      	mov	r0, r1
 8007630:	4611      	mov	r1, r2
 8007632:	2200      	movs	r2, #0
 8007634:	602a      	str	r2, [r5, #0]
 8007636:	461a      	mov	r2, r3
 8007638:	f7fa fb3d 	bl	8001cb6 <_write>
 800763c:	1c43      	adds	r3, r0, #1
 800763e:	d102      	bne.n	8007646 <_write_r+0x1e>
 8007640:	682b      	ldr	r3, [r5, #0]
 8007642:	b103      	cbz	r3, 8007646 <_write_r+0x1e>
 8007644:	6023      	str	r3, [r4, #0]
 8007646:	bd38      	pop	{r3, r4, r5, pc}
 8007648:	2000073c 	.word	0x2000073c

0800764c <__swsetup_r>:
 800764c:	4b32      	ldr	r3, [pc, #200]	; (8007718 <__swsetup_r+0xcc>)
 800764e:	b570      	push	{r4, r5, r6, lr}
 8007650:	681d      	ldr	r5, [r3, #0]
 8007652:	4606      	mov	r6, r0
 8007654:	460c      	mov	r4, r1
 8007656:	b125      	cbz	r5, 8007662 <__swsetup_r+0x16>
 8007658:	69ab      	ldr	r3, [r5, #24]
 800765a:	b913      	cbnz	r3, 8007662 <__swsetup_r+0x16>
 800765c:	4628      	mov	r0, r5
 800765e:	f7ff fb55 	bl	8006d0c <__sinit>
 8007662:	4b2e      	ldr	r3, [pc, #184]	; (800771c <__swsetup_r+0xd0>)
 8007664:	429c      	cmp	r4, r3
 8007666:	d10f      	bne.n	8007688 <__swsetup_r+0x3c>
 8007668:	686c      	ldr	r4, [r5, #4]
 800766a:	89a3      	ldrh	r3, [r4, #12]
 800766c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007670:	0719      	lsls	r1, r3, #28
 8007672:	d42c      	bmi.n	80076ce <__swsetup_r+0x82>
 8007674:	06dd      	lsls	r5, r3, #27
 8007676:	d411      	bmi.n	800769c <__swsetup_r+0x50>
 8007678:	2309      	movs	r3, #9
 800767a:	6033      	str	r3, [r6, #0]
 800767c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007680:	81a3      	strh	r3, [r4, #12]
 8007682:	f04f 30ff 	mov.w	r0, #4294967295
 8007686:	e03e      	b.n	8007706 <__swsetup_r+0xba>
 8007688:	4b25      	ldr	r3, [pc, #148]	; (8007720 <__swsetup_r+0xd4>)
 800768a:	429c      	cmp	r4, r3
 800768c:	d101      	bne.n	8007692 <__swsetup_r+0x46>
 800768e:	68ac      	ldr	r4, [r5, #8]
 8007690:	e7eb      	b.n	800766a <__swsetup_r+0x1e>
 8007692:	4b24      	ldr	r3, [pc, #144]	; (8007724 <__swsetup_r+0xd8>)
 8007694:	429c      	cmp	r4, r3
 8007696:	bf08      	it	eq
 8007698:	68ec      	ldreq	r4, [r5, #12]
 800769a:	e7e6      	b.n	800766a <__swsetup_r+0x1e>
 800769c:	0758      	lsls	r0, r3, #29
 800769e:	d512      	bpl.n	80076c6 <__swsetup_r+0x7a>
 80076a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076a2:	b141      	cbz	r1, 80076b6 <__swsetup_r+0x6a>
 80076a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076a8:	4299      	cmp	r1, r3
 80076aa:	d002      	beq.n	80076b2 <__swsetup_r+0x66>
 80076ac:	4630      	mov	r0, r6
 80076ae:	f000 f98f 	bl	80079d0 <_free_r>
 80076b2:	2300      	movs	r3, #0
 80076b4:	6363      	str	r3, [r4, #52]	; 0x34
 80076b6:	89a3      	ldrh	r3, [r4, #12]
 80076b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80076bc:	81a3      	strh	r3, [r4, #12]
 80076be:	2300      	movs	r3, #0
 80076c0:	6063      	str	r3, [r4, #4]
 80076c2:	6923      	ldr	r3, [r4, #16]
 80076c4:	6023      	str	r3, [r4, #0]
 80076c6:	89a3      	ldrh	r3, [r4, #12]
 80076c8:	f043 0308 	orr.w	r3, r3, #8
 80076cc:	81a3      	strh	r3, [r4, #12]
 80076ce:	6923      	ldr	r3, [r4, #16]
 80076d0:	b94b      	cbnz	r3, 80076e6 <__swsetup_r+0x9a>
 80076d2:	89a3      	ldrh	r3, [r4, #12]
 80076d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80076d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076dc:	d003      	beq.n	80076e6 <__swsetup_r+0x9a>
 80076de:	4621      	mov	r1, r4
 80076e0:	4630      	mov	r0, r6
 80076e2:	f000 f929 	bl	8007938 <__smakebuf_r>
 80076e6:	89a0      	ldrh	r0, [r4, #12]
 80076e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80076ec:	f010 0301 	ands.w	r3, r0, #1
 80076f0:	d00a      	beq.n	8007708 <__swsetup_r+0xbc>
 80076f2:	2300      	movs	r3, #0
 80076f4:	60a3      	str	r3, [r4, #8]
 80076f6:	6963      	ldr	r3, [r4, #20]
 80076f8:	425b      	negs	r3, r3
 80076fa:	61a3      	str	r3, [r4, #24]
 80076fc:	6923      	ldr	r3, [r4, #16]
 80076fe:	b943      	cbnz	r3, 8007712 <__swsetup_r+0xc6>
 8007700:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007704:	d1ba      	bne.n	800767c <__swsetup_r+0x30>
 8007706:	bd70      	pop	{r4, r5, r6, pc}
 8007708:	0781      	lsls	r1, r0, #30
 800770a:	bf58      	it	pl
 800770c:	6963      	ldrpl	r3, [r4, #20]
 800770e:	60a3      	str	r3, [r4, #8]
 8007710:	e7f4      	b.n	80076fc <__swsetup_r+0xb0>
 8007712:	2000      	movs	r0, #0
 8007714:	e7f7      	b.n	8007706 <__swsetup_r+0xba>
 8007716:	bf00      	nop
 8007718:	20000088 	.word	0x20000088
 800771c:	08007ca4 	.word	0x08007ca4
 8007720:	08007cc4 	.word	0x08007cc4
 8007724:	08007c84 	.word	0x08007c84

08007728 <_close_r>:
 8007728:	b538      	push	{r3, r4, r5, lr}
 800772a:	4d06      	ldr	r5, [pc, #24]	; (8007744 <_close_r+0x1c>)
 800772c:	2300      	movs	r3, #0
 800772e:	4604      	mov	r4, r0
 8007730:	4608      	mov	r0, r1
 8007732:	602b      	str	r3, [r5, #0]
 8007734:	f7fa fadb 	bl	8001cee <_close>
 8007738:	1c43      	adds	r3, r0, #1
 800773a:	d102      	bne.n	8007742 <_close_r+0x1a>
 800773c:	682b      	ldr	r3, [r5, #0]
 800773e:	b103      	cbz	r3, 8007742 <_close_r+0x1a>
 8007740:	6023      	str	r3, [r4, #0]
 8007742:	bd38      	pop	{r3, r4, r5, pc}
 8007744:	2000073c 	.word	0x2000073c

08007748 <__sflush_r>:
 8007748:	898a      	ldrh	r2, [r1, #12]
 800774a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800774e:	4605      	mov	r5, r0
 8007750:	0710      	lsls	r0, r2, #28
 8007752:	460c      	mov	r4, r1
 8007754:	d458      	bmi.n	8007808 <__sflush_r+0xc0>
 8007756:	684b      	ldr	r3, [r1, #4]
 8007758:	2b00      	cmp	r3, #0
 800775a:	dc05      	bgt.n	8007768 <__sflush_r+0x20>
 800775c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800775e:	2b00      	cmp	r3, #0
 8007760:	dc02      	bgt.n	8007768 <__sflush_r+0x20>
 8007762:	2000      	movs	r0, #0
 8007764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007768:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800776a:	2e00      	cmp	r6, #0
 800776c:	d0f9      	beq.n	8007762 <__sflush_r+0x1a>
 800776e:	2300      	movs	r3, #0
 8007770:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007774:	682f      	ldr	r7, [r5, #0]
 8007776:	602b      	str	r3, [r5, #0]
 8007778:	d032      	beq.n	80077e0 <__sflush_r+0x98>
 800777a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800777c:	89a3      	ldrh	r3, [r4, #12]
 800777e:	075a      	lsls	r2, r3, #29
 8007780:	d505      	bpl.n	800778e <__sflush_r+0x46>
 8007782:	6863      	ldr	r3, [r4, #4]
 8007784:	1ac0      	subs	r0, r0, r3
 8007786:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007788:	b10b      	cbz	r3, 800778e <__sflush_r+0x46>
 800778a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800778c:	1ac0      	subs	r0, r0, r3
 800778e:	2300      	movs	r3, #0
 8007790:	4602      	mov	r2, r0
 8007792:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007794:	6a21      	ldr	r1, [r4, #32]
 8007796:	4628      	mov	r0, r5
 8007798:	47b0      	blx	r6
 800779a:	1c43      	adds	r3, r0, #1
 800779c:	89a3      	ldrh	r3, [r4, #12]
 800779e:	d106      	bne.n	80077ae <__sflush_r+0x66>
 80077a0:	6829      	ldr	r1, [r5, #0]
 80077a2:	291d      	cmp	r1, #29
 80077a4:	d82c      	bhi.n	8007800 <__sflush_r+0xb8>
 80077a6:	4a2a      	ldr	r2, [pc, #168]	; (8007850 <__sflush_r+0x108>)
 80077a8:	40ca      	lsrs	r2, r1
 80077aa:	07d6      	lsls	r6, r2, #31
 80077ac:	d528      	bpl.n	8007800 <__sflush_r+0xb8>
 80077ae:	2200      	movs	r2, #0
 80077b0:	6062      	str	r2, [r4, #4]
 80077b2:	04d9      	lsls	r1, r3, #19
 80077b4:	6922      	ldr	r2, [r4, #16]
 80077b6:	6022      	str	r2, [r4, #0]
 80077b8:	d504      	bpl.n	80077c4 <__sflush_r+0x7c>
 80077ba:	1c42      	adds	r2, r0, #1
 80077bc:	d101      	bne.n	80077c2 <__sflush_r+0x7a>
 80077be:	682b      	ldr	r3, [r5, #0]
 80077c0:	b903      	cbnz	r3, 80077c4 <__sflush_r+0x7c>
 80077c2:	6560      	str	r0, [r4, #84]	; 0x54
 80077c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077c6:	602f      	str	r7, [r5, #0]
 80077c8:	2900      	cmp	r1, #0
 80077ca:	d0ca      	beq.n	8007762 <__sflush_r+0x1a>
 80077cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077d0:	4299      	cmp	r1, r3
 80077d2:	d002      	beq.n	80077da <__sflush_r+0x92>
 80077d4:	4628      	mov	r0, r5
 80077d6:	f000 f8fb 	bl	80079d0 <_free_r>
 80077da:	2000      	movs	r0, #0
 80077dc:	6360      	str	r0, [r4, #52]	; 0x34
 80077de:	e7c1      	b.n	8007764 <__sflush_r+0x1c>
 80077e0:	6a21      	ldr	r1, [r4, #32]
 80077e2:	2301      	movs	r3, #1
 80077e4:	4628      	mov	r0, r5
 80077e6:	47b0      	blx	r6
 80077e8:	1c41      	adds	r1, r0, #1
 80077ea:	d1c7      	bne.n	800777c <__sflush_r+0x34>
 80077ec:	682b      	ldr	r3, [r5, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d0c4      	beq.n	800777c <__sflush_r+0x34>
 80077f2:	2b1d      	cmp	r3, #29
 80077f4:	d001      	beq.n	80077fa <__sflush_r+0xb2>
 80077f6:	2b16      	cmp	r3, #22
 80077f8:	d101      	bne.n	80077fe <__sflush_r+0xb6>
 80077fa:	602f      	str	r7, [r5, #0]
 80077fc:	e7b1      	b.n	8007762 <__sflush_r+0x1a>
 80077fe:	89a3      	ldrh	r3, [r4, #12]
 8007800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007804:	81a3      	strh	r3, [r4, #12]
 8007806:	e7ad      	b.n	8007764 <__sflush_r+0x1c>
 8007808:	690f      	ldr	r7, [r1, #16]
 800780a:	2f00      	cmp	r7, #0
 800780c:	d0a9      	beq.n	8007762 <__sflush_r+0x1a>
 800780e:	0793      	lsls	r3, r2, #30
 8007810:	680e      	ldr	r6, [r1, #0]
 8007812:	bf08      	it	eq
 8007814:	694b      	ldreq	r3, [r1, #20]
 8007816:	600f      	str	r7, [r1, #0]
 8007818:	bf18      	it	ne
 800781a:	2300      	movne	r3, #0
 800781c:	eba6 0807 	sub.w	r8, r6, r7
 8007820:	608b      	str	r3, [r1, #8]
 8007822:	f1b8 0f00 	cmp.w	r8, #0
 8007826:	dd9c      	ble.n	8007762 <__sflush_r+0x1a>
 8007828:	6a21      	ldr	r1, [r4, #32]
 800782a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800782c:	4643      	mov	r3, r8
 800782e:	463a      	mov	r2, r7
 8007830:	4628      	mov	r0, r5
 8007832:	47b0      	blx	r6
 8007834:	2800      	cmp	r0, #0
 8007836:	dc06      	bgt.n	8007846 <__sflush_r+0xfe>
 8007838:	89a3      	ldrh	r3, [r4, #12]
 800783a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800783e:	81a3      	strh	r3, [r4, #12]
 8007840:	f04f 30ff 	mov.w	r0, #4294967295
 8007844:	e78e      	b.n	8007764 <__sflush_r+0x1c>
 8007846:	4407      	add	r7, r0
 8007848:	eba8 0800 	sub.w	r8, r8, r0
 800784c:	e7e9      	b.n	8007822 <__sflush_r+0xda>
 800784e:	bf00      	nop
 8007850:	20400001 	.word	0x20400001

08007854 <_fflush_r>:
 8007854:	b538      	push	{r3, r4, r5, lr}
 8007856:	690b      	ldr	r3, [r1, #16]
 8007858:	4605      	mov	r5, r0
 800785a:	460c      	mov	r4, r1
 800785c:	b913      	cbnz	r3, 8007864 <_fflush_r+0x10>
 800785e:	2500      	movs	r5, #0
 8007860:	4628      	mov	r0, r5
 8007862:	bd38      	pop	{r3, r4, r5, pc}
 8007864:	b118      	cbz	r0, 800786e <_fflush_r+0x1a>
 8007866:	6983      	ldr	r3, [r0, #24]
 8007868:	b90b      	cbnz	r3, 800786e <_fflush_r+0x1a>
 800786a:	f7ff fa4f 	bl	8006d0c <__sinit>
 800786e:	4b14      	ldr	r3, [pc, #80]	; (80078c0 <_fflush_r+0x6c>)
 8007870:	429c      	cmp	r4, r3
 8007872:	d11b      	bne.n	80078ac <_fflush_r+0x58>
 8007874:	686c      	ldr	r4, [r5, #4]
 8007876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d0ef      	beq.n	800785e <_fflush_r+0xa>
 800787e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007880:	07d0      	lsls	r0, r2, #31
 8007882:	d404      	bmi.n	800788e <_fflush_r+0x3a>
 8007884:	0599      	lsls	r1, r3, #22
 8007886:	d402      	bmi.n	800788e <_fflush_r+0x3a>
 8007888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800788a:	f7ff fadd 	bl	8006e48 <__retarget_lock_acquire_recursive>
 800788e:	4628      	mov	r0, r5
 8007890:	4621      	mov	r1, r4
 8007892:	f7ff ff59 	bl	8007748 <__sflush_r>
 8007896:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007898:	07da      	lsls	r2, r3, #31
 800789a:	4605      	mov	r5, r0
 800789c:	d4e0      	bmi.n	8007860 <_fflush_r+0xc>
 800789e:	89a3      	ldrh	r3, [r4, #12]
 80078a0:	059b      	lsls	r3, r3, #22
 80078a2:	d4dd      	bmi.n	8007860 <_fflush_r+0xc>
 80078a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078a6:	f7ff fad0 	bl	8006e4a <__retarget_lock_release_recursive>
 80078aa:	e7d9      	b.n	8007860 <_fflush_r+0xc>
 80078ac:	4b05      	ldr	r3, [pc, #20]	; (80078c4 <_fflush_r+0x70>)
 80078ae:	429c      	cmp	r4, r3
 80078b0:	d101      	bne.n	80078b6 <_fflush_r+0x62>
 80078b2:	68ac      	ldr	r4, [r5, #8]
 80078b4:	e7df      	b.n	8007876 <_fflush_r+0x22>
 80078b6:	4b04      	ldr	r3, [pc, #16]	; (80078c8 <_fflush_r+0x74>)
 80078b8:	429c      	cmp	r4, r3
 80078ba:	bf08      	it	eq
 80078bc:	68ec      	ldreq	r4, [r5, #12]
 80078be:	e7da      	b.n	8007876 <_fflush_r+0x22>
 80078c0:	08007ca4 	.word	0x08007ca4
 80078c4:	08007cc4 	.word	0x08007cc4
 80078c8:	08007c84 	.word	0x08007c84

080078cc <_lseek_r>:
 80078cc:	b538      	push	{r3, r4, r5, lr}
 80078ce:	4d07      	ldr	r5, [pc, #28]	; (80078ec <_lseek_r+0x20>)
 80078d0:	4604      	mov	r4, r0
 80078d2:	4608      	mov	r0, r1
 80078d4:	4611      	mov	r1, r2
 80078d6:	2200      	movs	r2, #0
 80078d8:	602a      	str	r2, [r5, #0]
 80078da:	461a      	mov	r2, r3
 80078dc:	f7fa fa2e 	bl	8001d3c <_lseek>
 80078e0:	1c43      	adds	r3, r0, #1
 80078e2:	d102      	bne.n	80078ea <_lseek_r+0x1e>
 80078e4:	682b      	ldr	r3, [r5, #0]
 80078e6:	b103      	cbz	r3, 80078ea <_lseek_r+0x1e>
 80078e8:	6023      	str	r3, [r4, #0]
 80078ea:	bd38      	pop	{r3, r4, r5, pc}
 80078ec:	2000073c 	.word	0x2000073c

080078f0 <__swhatbuf_r>:
 80078f0:	b570      	push	{r4, r5, r6, lr}
 80078f2:	460e      	mov	r6, r1
 80078f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078f8:	2900      	cmp	r1, #0
 80078fa:	b096      	sub	sp, #88	; 0x58
 80078fc:	4614      	mov	r4, r2
 80078fe:	461d      	mov	r5, r3
 8007900:	da07      	bge.n	8007912 <__swhatbuf_r+0x22>
 8007902:	2300      	movs	r3, #0
 8007904:	602b      	str	r3, [r5, #0]
 8007906:	89b3      	ldrh	r3, [r6, #12]
 8007908:	061a      	lsls	r2, r3, #24
 800790a:	d410      	bmi.n	800792e <__swhatbuf_r+0x3e>
 800790c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007910:	e00e      	b.n	8007930 <__swhatbuf_r+0x40>
 8007912:	466a      	mov	r2, sp
 8007914:	f000 f8be 	bl	8007a94 <_fstat_r>
 8007918:	2800      	cmp	r0, #0
 800791a:	dbf2      	blt.n	8007902 <__swhatbuf_r+0x12>
 800791c:	9a01      	ldr	r2, [sp, #4]
 800791e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007922:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007926:	425a      	negs	r2, r3
 8007928:	415a      	adcs	r2, r3
 800792a:	602a      	str	r2, [r5, #0]
 800792c:	e7ee      	b.n	800790c <__swhatbuf_r+0x1c>
 800792e:	2340      	movs	r3, #64	; 0x40
 8007930:	2000      	movs	r0, #0
 8007932:	6023      	str	r3, [r4, #0]
 8007934:	b016      	add	sp, #88	; 0x58
 8007936:	bd70      	pop	{r4, r5, r6, pc}

08007938 <__smakebuf_r>:
 8007938:	898b      	ldrh	r3, [r1, #12]
 800793a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800793c:	079d      	lsls	r5, r3, #30
 800793e:	4606      	mov	r6, r0
 8007940:	460c      	mov	r4, r1
 8007942:	d507      	bpl.n	8007954 <__smakebuf_r+0x1c>
 8007944:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007948:	6023      	str	r3, [r4, #0]
 800794a:	6123      	str	r3, [r4, #16]
 800794c:	2301      	movs	r3, #1
 800794e:	6163      	str	r3, [r4, #20]
 8007950:	b002      	add	sp, #8
 8007952:	bd70      	pop	{r4, r5, r6, pc}
 8007954:	ab01      	add	r3, sp, #4
 8007956:	466a      	mov	r2, sp
 8007958:	f7ff ffca 	bl	80078f0 <__swhatbuf_r>
 800795c:	9900      	ldr	r1, [sp, #0]
 800795e:	4605      	mov	r5, r0
 8007960:	4630      	mov	r0, r6
 8007962:	f7ff fa73 	bl	8006e4c <_malloc_r>
 8007966:	b948      	cbnz	r0, 800797c <__smakebuf_r+0x44>
 8007968:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800796c:	059a      	lsls	r2, r3, #22
 800796e:	d4ef      	bmi.n	8007950 <__smakebuf_r+0x18>
 8007970:	f023 0303 	bic.w	r3, r3, #3
 8007974:	f043 0302 	orr.w	r3, r3, #2
 8007978:	81a3      	strh	r3, [r4, #12]
 800797a:	e7e3      	b.n	8007944 <__smakebuf_r+0xc>
 800797c:	4b0d      	ldr	r3, [pc, #52]	; (80079b4 <__smakebuf_r+0x7c>)
 800797e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007980:	89a3      	ldrh	r3, [r4, #12]
 8007982:	6020      	str	r0, [r4, #0]
 8007984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007988:	81a3      	strh	r3, [r4, #12]
 800798a:	9b00      	ldr	r3, [sp, #0]
 800798c:	6163      	str	r3, [r4, #20]
 800798e:	9b01      	ldr	r3, [sp, #4]
 8007990:	6120      	str	r0, [r4, #16]
 8007992:	b15b      	cbz	r3, 80079ac <__smakebuf_r+0x74>
 8007994:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007998:	4630      	mov	r0, r6
 800799a:	f000 f88d 	bl	8007ab8 <_isatty_r>
 800799e:	b128      	cbz	r0, 80079ac <__smakebuf_r+0x74>
 80079a0:	89a3      	ldrh	r3, [r4, #12]
 80079a2:	f023 0303 	bic.w	r3, r3, #3
 80079a6:	f043 0301 	orr.w	r3, r3, #1
 80079aa:	81a3      	strh	r3, [r4, #12]
 80079ac:	89a0      	ldrh	r0, [r4, #12]
 80079ae:	4305      	orrs	r5, r0
 80079b0:	81a5      	strh	r5, [r4, #12]
 80079b2:	e7cd      	b.n	8007950 <__smakebuf_r+0x18>
 80079b4:	08006ca5 	.word	0x08006ca5

080079b8 <__malloc_lock>:
 80079b8:	4801      	ldr	r0, [pc, #4]	; (80079c0 <__malloc_lock+0x8>)
 80079ba:	f7ff ba45 	b.w	8006e48 <__retarget_lock_acquire_recursive>
 80079be:	bf00      	nop
 80079c0:	20000734 	.word	0x20000734

080079c4 <__malloc_unlock>:
 80079c4:	4801      	ldr	r0, [pc, #4]	; (80079cc <__malloc_unlock+0x8>)
 80079c6:	f7ff ba40 	b.w	8006e4a <__retarget_lock_release_recursive>
 80079ca:	bf00      	nop
 80079cc:	20000734 	.word	0x20000734

080079d0 <_free_r>:
 80079d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079d2:	2900      	cmp	r1, #0
 80079d4:	d048      	beq.n	8007a68 <_free_r+0x98>
 80079d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079da:	9001      	str	r0, [sp, #4]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f1a1 0404 	sub.w	r4, r1, #4
 80079e2:	bfb8      	it	lt
 80079e4:	18e4      	addlt	r4, r4, r3
 80079e6:	f7ff ffe7 	bl	80079b8 <__malloc_lock>
 80079ea:	4a20      	ldr	r2, [pc, #128]	; (8007a6c <_free_r+0x9c>)
 80079ec:	9801      	ldr	r0, [sp, #4]
 80079ee:	6813      	ldr	r3, [r2, #0]
 80079f0:	4615      	mov	r5, r2
 80079f2:	b933      	cbnz	r3, 8007a02 <_free_r+0x32>
 80079f4:	6063      	str	r3, [r4, #4]
 80079f6:	6014      	str	r4, [r2, #0]
 80079f8:	b003      	add	sp, #12
 80079fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079fe:	f7ff bfe1 	b.w	80079c4 <__malloc_unlock>
 8007a02:	42a3      	cmp	r3, r4
 8007a04:	d90b      	bls.n	8007a1e <_free_r+0x4e>
 8007a06:	6821      	ldr	r1, [r4, #0]
 8007a08:	1862      	adds	r2, r4, r1
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	bf04      	itt	eq
 8007a0e:	681a      	ldreq	r2, [r3, #0]
 8007a10:	685b      	ldreq	r3, [r3, #4]
 8007a12:	6063      	str	r3, [r4, #4]
 8007a14:	bf04      	itt	eq
 8007a16:	1852      	addeq	r2, r2, r1
 8007a18:	6022      	streq	r2, [r4, #0]
 8007a1a:	602c      	str	r4, [r5, #0]
 8007a1c:	e7ec      	b.n	80079f8 <_free_r+0x28>
 8007a1e:	461a      	mov	r2, r3
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	b10b      	cbz	r3, 8007a28 <_free_r+0x58>
 8007a24:	42a3      	cmp	r3, r4
 8007a26:	d9fa      	bls.n	8007a1e <_free_r+0x4e>
 8007a28:	6811      	ldr	r1, [r2, #0]
 8007a2a:	1855      	adds	r5, r2, r1
 8007a2c:	42a5      	cmp	r5, r4
 8007a2e:	d10b      	bne.n	8007a48 <_free_r+0x78>
 8007a30:	6824      	ldr	r4, [r4, #0]
 8007a32:	4421      	add	r1, r4
 8007a34:	1854      	adds	r4, r2, r1
 8007a36:	42a3      	cmp	r3, r4
 8007a38:	6011      	str	r1, [r2, #0]
 8007a3a:	d1dd      	bne.n	80079f8 <_free_r+0x28>
 8007a3c:	681c      	ldr	r4, [r3, #0]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	6053      	str	r3, [r2, #4]
 8007a42:	4421      	add	r1, r4
 8007a44:	6011      	str	r1, [r2, #0]
 8007a46:	e7d7      	b.n	80079f8 <_free_r+0x28>
 8007a48:	d902      	bls.n	8007a50 <_free_r+0x80>
 8007a4a:	230c      	movs	r3, #12
 8007a4c:	6003      	str	r3, [r0, #0]
 8007a4e:	e7d3      	b.n	80079f8 <_free_r+0x28>
 8007a50:	6825      	ldr	r5, [r4, #0]
 8007a52:	1961      	adds	r1, r4, r5
 8007a54:	428b      	cmp	r3, r1
 8007a56:	bf04      	itt	eq
 8007a58:	6819      	ldreq	r1, [r3, #0]
 8007a5a:	685b      	ldreq	r3, [r3, #4]
 8007a5c:	6063      	str	r3, [r4, #4]
 8007a5e:	bf04      	itt	eq
 8007a60:	1949      	addeq	r1, r1, r5
 8007a62:	6021      	streq	r1, [r4, #0]
 8007a64:	6054      	str	r4, [r2, #4]
 8007a66:	e7c7      	b.n	80079f8 <_free_r+0x28>
 8007a68:	b003      	add	sp, #12
 8007a6a:	bd30      	pop	{r4, r5, pc}
 8007a6c:	20000144 	.word	0x20000144

08007a70 <_read_r>:
 8007a70:	b538      	push	{r3, r4, r5, lr}
 8007a72:	4d07      	ldr	r5, [pc, #28]	; (8007a90 <_read_r+0x20>)
 8007a74:	4604      	mov	r4, r0
 8007a76:	4608      	mov	r0, r1
 8007a78:	4611      	mov	r1, r2
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	602a      	str	r2, [r5, #0]
 8007a7e:	461a      	mov	r2, r3
 8007a80:	f7fa f8fc 	bl	8001c7c <_read>
 8007a84:	1c43      	adds	r3, r0, #1
 8007a86:	d102      	bne.n	8007a8e <_read_r+0x1e>
 8007a88:	682b      	ldr	r3, [r5, #0]
 8007a8a:	b103      	cbz	r3, 8007a8e <_read_r+0x1e>
 8007a8c:	6023      	str	r3, [r4, #0]
 8007a8e:	bd38      	pop	{r3, r4, r5, pc}
 8007a90:	2000073c 	.word	0x2000073c

08007a94 <_fstat_r>:
 8007a94:	b538      	push	{r3, r4, r5, lr}
 8007a96:	4d07      	ldr	r5, [pc, #28]	; (8007ab4 <_fstat_r+0x20>)
 8007a98:	2300      	movs	r3, #0
 8007a9a:	4604      	mov	r4, r0
 8007a9c:	4608      	mov	r0, r1
 8007a9e:	4611      	mov	r1, r2
 8007aa0:	602b      	str	r3, [r5, #0]
 8007aa2:	f7fa f930 	bl	8001d06 <_fstat>
 8007aa6:	1c43      	adds	r3, r0, #1
 8007aa8:	d102      	bne.n	8007ab0 <_fstat_r+0x1c>
 8007aaa:	682b      	ldr	r3, [r5, #0]
 8007aac:	b103      	cbz	r3, 8007ab0 <_fstat_r+0x1c>
 8007aae:	6023      	str	r3, [r4, #0]
 8007ab0:	bd38      	pop	{r3, r4, r5, pc}
 8007ab2:	bf00      	nop
 8007ab4:	2000073c 	.word	0x2000073c

08007ab8 <_isatty_r>:
 8007ab8:	b538      	push	{r3, r4, r5, lr}
 8007aba:	4d06      	ldr	r5, [pc, #24]	; (8007ad4 <_isatty_r+0x1c>)
 8007abc:	2300      	movs	r3, #0
 8007abe:	4604      	mov	r4, r0
 8007ac0:	4608      	mov	r0, r1
 8007ac2:	602b      	str	r3, [r5, #0]
 8007ac4:	f7fa f92f 	bl	8001d26 <_isatty>
 8007ac8:	1c43      	adds	r3, r0, #1
 8007aca:	d102      	bne.n	8007ad2 <_isatty_r+0x1a>
 8007acc:	682b      	ldr	r3, [r5, #0]
 8007ace:	b103      	cbz	r3, 8007ad2 <_isatty_r+0x1a>
 8007ad0:	6023      	str	r3, [r4, #0]
 8007ad2:	bd38      	pop	{r3, r4, r5, pc}
 8007ad4:	2000073c 	.word	0x2000073c

08007ad8 <_init>:
 8007ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ada:	bf00      	nop
 8007adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ade:	bc08      	pop	{r3}
 8007ae0:	469e      	mov	lr, r3
 8007ae2:	4770      	bx	lr

08007ae4 <_fini>:
 8007ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ae6:	bf00      	nop
 8007ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aea:	bc08      	pop	{r3}
 8007aec:	469e      	mov	lr, r3
 8007aee:	4770      	bx	lr
